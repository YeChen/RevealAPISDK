/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.Sdk.Client.SwaggerDateConverter;

namespace RevealAPI.Sdk.Models.Resources
{
    /// <summary>
    /// CosmicQueue
    /// </summary>
    [DataContract]
    public partial class CosmicQueue :  IEquatable<CosmicQueue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CosmicQueue" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="status">status.</param>
        /// <param name="reviewedPlusSkippedCount">reviewedPlusSkippedCount.</param>
        /// <param name="richness">richness.</param>
        /// <param name="remaining">remaining.</param>
        /// <param name="type">type.</param>
        /// <param name="enabled">enabled.</param>
        public CosmicQueue(long? id = default(long?), string name = default(string), string status = default(string), long? reviewedPlusSkippedCount = default(long?), long? richness = default(long?), string remaining = default(string), string type = default(string), bool? enabled = default(bool?))
        {
            this.Id = id;
            this.Name = name;
            this.Status = status;
            this.ReviewedPlusSkippedCount = reviewedPlusSkippedCount;
            this.Richness = richness;
            this.Remaining = remaining;
            this.Type = type;
            this.Enabled = enabled;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets ReviewedPlusSkippedCount
        /// </summary>
        [DataMember(Name="reviewedPlusSkippedCount", EmitDefaultValue=false)]
        public long? ReviewedPlusSkippedCount { get; set; }

        /// <summary>
        /// Gets or Sets Richness
        /// </summary>
        [DataMember(Name="richness", EmitDefaultValue=false)]
        public long? Richness { get; set; }

        /// <summary>
        /// Gets or Sets Remaining
        /// </summary>
        [DataMember(Name="remaining", EmitDefaultValue=false)]
        public string Remaining { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CosmicQueue {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ReviewedPlusSkippedCount: ").Append(ReviewedPlusSkippedCount).Append("\n");
            sb.Append("  Richness: ").Append(Richness).Append("\n");
            sb.Append("  Remaining: ").Append(Remaining).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CosmicQueue);
        }

        /// <summary>
        /// Returns true if CosmicQueue instances are equal
        /// </summary>
        /// <param name="input">Instance of CosmicQueue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CosmicQueue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ReviewedPlusSkippedCount == input.ReviewedPlusSkippedCount ||
                    (this.ReviewedPlusSkippedCount != null &&
                    this.ReviewedPlusSkippedCount.Equals(input.ReviewedPlusSkippedCount))
                ) && 
                (
                    this.Richness == input.Richness ||
                    (this.Richness != null &&
                    this.Richness.Equals(input.Richness))
                ) && 
                (
                    this.Remaining == input.Remaining ||
                    (this.Remaining != null &&
                    this.Remaining.Equals(input.Remaining))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ReviewedPlusSkippedCount != null)
                    hashCode = hashCode * 59 + this.ReviewedPlusSkippedCount.GetHashCode();
                if (this.Richness != null)
                    hashCode = hashCode * 59 + this.Richness.GetHashCode();
                if (this.Remaining != null)
                    hashCode = hashCode * 59 + this.Remaining.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
