/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.Sdk.Client.SwaggerDateConverter;

namespace RevealAPI.Sdk.Models.Resources
{
    /// <summary>
    /// DocumentTextSet2
    /// </summary>
    [DataContract]
    public partial class DocumentTextSet2 :  IEquatable<DocumentTextSet2>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Descriptor
        /// </summary>
        [DataMember(Name="descriptor", EmitDefaultValue=false)]
        public TextSetDescriptor? Descriptor { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentTextSet2" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="loadFileFieldName">loadFileFieldName.</param>
        /// <param name="analyzerType">analyzerType.</param>
        /// <param name="stopWordsType">stopWordsType.</param>
        /// <param name="descriptor">descriptor.</param>
        public DocumentTextSet2(int? id = default(int?), string name = default(string), string description = default(string), bool? enabled = default(bool?), string loadFileFieldName = default(string), string analyzerType = default(string), string stopWordsType = default(string), TextSetDescriptor? descriptor = default(TextSetDescriptor?))
        {
            this.Id = id;
            this.Name = name;
            this.Description = description;
            this.Enabled = enabled;
            this.LoadFileFieldName = loadFileFieldName;
            this.AnalyzerType = analyzerType;
            this.StopWordsType = stopWordsType;
            this.Descriptor = descriptor;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets LoadFileFieldName
        /// </summary>
        [DataMember(Name="loadFileFieldName", EmitDefaultValue=false)]
        public string LoadFileFieldName { get; set; }

        /// <summary>
        /// Gets or Sets AnalyzerType
        /// </summary>
        [DataMember(Name="analyzerType", EmitDefaultValue=false)]
        public string AnalyzerType { get; set; }

        /// <summary>
        /// Gets or Sets StopWordsType
        /// </summary>
        [DataMember(Name="stopWordsType", EmitDefaultValue=false)]
        public string StopWordsType { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentTextSet2 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  LoadFileFieldName: ").Append(LoadFileFieldName).Append("\n");
            sb.Append("  AnalyzerType: ").Append(AnalyzerType).Append("\n");
            sb.Append("  StopWordsType: ").Append(StopWordsType).Append("\n");
            sb.Append("  Descriptor: ").Append(Descriptor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentTextSet2);
        }

        /// <summary>
        /// Returns true if DocumentTextSet2 instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentTextSet2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentTextSet2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.LoadFileFieldName == input.LoadFileFieldName ||
                    (this.LoadFileFieldName != null &&
                    this.LoadFileFieldName.Equals(input.LoadFileFieldName))
                ) && 
                (
                    this.AnalyzerType == input.AnalyzerType ||
                    (this.AnalyzerType != null &&
                    this.AnalyzerType.Equals(input.AnalyzerType))
                ) && 
                (
                    this.StopWordsType == input.StopWordsType ||
                    (this.StopWordsType != null &&
                    this.StopWordsType.Equals(input.StopWordsType))
                ) && 
                (
                    this.Descriptor == input.Descriptor ||
                    (this.Descriptor != null &&
                    this.Descriptor.Equals(input.Descriptor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.LoadFileFieldName != null)
                    hashCode = hashCode * 59 + this.LoadFileFieldName.GetHashCode();
                if (this.AnalyzerType != null)
                    hashCode = hashCode * 59 + this.AnalyzerType.GetHashCode();
                if (this.StopWordsType != null)
                    hashCode = hashCode * 59 + this.StopWordsType.GetHashCode();
                if (this.Descriptor != null)
                    hashCode = hashCode * 59 + this.Descriptor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
