/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.Sdk.Client.SwaggerDateConverter;

namespace RevealAPI.Sdk.Models.Resources
{
    /// <summary>
    /// DocumentCriteria
    /// </summary>
    [DataContract]
    public partial class DocumentCriteria :  IEquatable<DocumentCriteria>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentCriteria" /> class.
        /// </summary>
        /// <param name="fieldNames">Fields to get back.</param>
        /// <param name="fieldProfileId">Field profile to retrieve fields with..</param>
        /// <param name="getFields">Get document metadata field info or just document ids.  Default: true.</param>
        /// <param name="getMandatoryFields">Include mandatory document metadata fields for R11 UI  Default: true.</param>
        /// <param name="getSpecialIconFields">Include special icon fields for R11 UI  Default: true.</param>
        /// <param name="getTagInformation">Get document tag info.  Default false.</param>
        /// <param name="start">The amount of results to skip.</param>
        /// <param name="count">The amount of results to retrieve.</param>
        public DocumentCriteria(List<string> fieldNames = default(List<string>), int? fieldProfileId = default(int?), bool? getFields = default(bool?), bool? getMandatoryFields = default(bool?), bool? getSpecialIconFields = default(bool?), bool? getTagInformation = default(bool?), int? start = default(int?), int? count = default(int?))
        {
            this.FieldNames = fieldNames;
            this.FieldProfileId = fieldProfileId;
            this.GetFields = getFields;
            this.GetMandatoryFields = getMandatoryFields;
            this.GetSpecialIconFields = getSpecialIconFields;
            this.GetTagInformation = getTagInformation;
            this.Start = start;
            this.Count = count;
        }
        
        /// <summary>
        /// Fields to get back
        /// </summary>
        /// <value>Fields to get back</value>
        [DataMember(Name="fieldNames", EmitDefaultValue=false)]
        public List<string> FieldNames { get; set; }

        /// <summary>
        /// Field profile to retrieve fields with.
        /// </summary>
        /// <value>Field profile to retrieve fields with.</value>
        [DataMember(Name="fieldProfileId", EmitDefaultValue=false)]
        public int? FieldProfileId { get; set; }

        /// <summary>
        /// Get document metadata field info or just document ids.  Default: true
        /// </summary>
        /// <value>Get document metadata field info or just document ids.  Default: true</value>
        [DataMember(Name="getFields", EmitDefaultValue=false)]
        public bool? GetFields { get; set; }

        /// <summary>
        /// Include mandatory document metadata fields for R11 UI  Default: true
        /// </summary>
        /// <value>Include mandatory document metadata fields for R11 UI  Default: true</value>
        [DataMember(Name="getMandatoryFields", EmitDefaultValue=false)]
        public bool? GetMandatoryFields { get; set; }

        /// <summary>
        /// Include special icon fields for R11 UI  Default: true
        /// </summary>
        /// <value>Include special icon fields for R11 UI  Default: true</value>
        [DataMember(Name="getSpecialIconFields", EmitDefaultValue=false)]
        public bool? GetSpecialIconFields { get; set; }

        /// <summary>
        /// Get document tag info.  Default false
        /// </summary>
        /// <value>Get document tag info.  Default false</value>
        [DataMember(Name="getTagInformation", EmitDefaultValue=false)]
        public bool? GetTagInformation { get; set; }

        /// <summary>
        /// The amount of results to skip
        /// </summary>
        /// <value>The amount of results to skip</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public int? Start { get; set; }

        /// <summary>
        /// The amount of results to retrieve
        /// </summary>
        /// <value>The amount of results to retrieve</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentCriteria {\n");
            sb.Append("  FieldNames: ").Append(FieldNames).Append("\n");
            sb.Append("  FieldProfileId: ").Append(FieldProfileId).Append("\n");
            sb.Append("  GetFields: ").Append(GetFields).Append("\n");
            sb.Append("  GetMandatoryFields: ").Append(GetMandatoryFields).Append("\n");
            sb.Append("  GetSpecialIconFields: ").Append(GetSpecialIconFields).Append("\n");
            sb.Append("  GetTagInformation: ").Append(GetTagInformation).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentCriteria);
        }

        /// <summary>
        /// Returns true if DocumentCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentCriteria input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FieldNames == input.FieldNames ||
                    this.FieldNames != null &&
                    this.FieldNames.SequenceEqual(input.FieldNames)
                ) && 
                (
                    this.FieldProfileId == input.FieldProfileId ||
                    (this.FieldProfileId != null &&
                    this.FieldProfileId.Equals(input.FieldProfileId))
                ) && 
                (
                    this.GetFields == input.GetFields ||
                    (this.GetFields != null &&
                    this.GetFields.Equals(input.GetFields))
                ) && 
                (
                    this.GetMandatoryFields == input.GetMandatoryFields ||
                    (this.GetMandatoryFields != null &&
                    this.GetMandatoryFields.Equals(input.GetMandatoryFields))
                ) && 
                (
                    this.GetSpecialIconFields == input.GetSpecialIconFields ||
                    (this.GetSpecialIconFields != null &&
                    this.GetSpecialIconFields.Equals(input.GetSpecialIconFields))
                ) && 
                (
                    this.GetTagInformation == input.GetTagInformation ||
                    (this.GetTagInformation != null &&
                    this.GetTagInformation.Equals(input.GetTagInformation))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldNames != null)
                    hashCode = hashCode * 59 + this.FieldNames.GetHashCode();
                if (this.FieldProfileId != null)
                    hashCode = hashCode * 59 + this.FieldProfileId.GetHashCode();
                if (this.GetFields != null)
                    hashCode = hashCode * 59 + this.GetFields.GetHashCode();
                if (this.GetMandatoryFields != null)
                    hashCode = hashCode * 59 + this.GetMandatoryFields.GetHashCode();
                if (this.GetSpecialIconFields != null)
                    hashCode = hashCode * 59 + this.GetSpecialIconFields.GetHashCode();
                if (this.GetTagInformation != null)
                    hashCode = hashCode * 59 + this.GetTagInformation.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
