/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.Sdk.Client.SwaggerDateConverter;

namespace RevealAPI.Sdk.Models.Resources
{
    /// <summary>
    /// FilterClauseRequestDTO
    /// </summary>
    [DataContract]
    public partial class FilterClauseRequestDTO :  IEquatable<FilterClauseRequestDTO>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public FolderItemType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterClauseRequestDTO" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="filterReferenceId">filterReferenceId.</param>
        public FilterClauseRequestDTO(FolderItemType? type = default(FolderItemType?), string filterReferenceId = default(string))
        {
            this.Type = type;
            this.FilterReferenceId = filterReferenceId;
        }
        

        /// <summary>
        /// Gets or Sets FilterReferenceId
        /// </summary>
        [DataMember(Name="filterReferenceId", EmitDefaultValue=false)]
        public string FilterReferenceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FilterClauseRequestDTO {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FilterReferenceId: ").Append(FilterReferenceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FilterClauseRequestDTO);
        }

        /// <summary>
        /// Returns true if FilterClauseRequestDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of FilterClauseRequestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterClauseRequestDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FilterReferenceId == input.FilterReferenceId ||
                    (this.FilterReferenceId != null &&
                    this.FilterReferenceId.Equals(input.FilterReferenceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.FilterReferenceId != null)
                    hashCode = hashCode * 59 + this.FilterReferenceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
