/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.Sdk.Client.SwaggerDateConverter;

namespace RevealAPI.Sdk.Models.Resources
{
    /// <summary>
    /// ColorDetectionSettings
    /// </summary>
    [DataContract]
    public partial class ColorDetectionSettings :  IEquatable<ColorDetectionSettings>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets NoColorInfoImageFormat
        /// </summary>
        [DataMember(Name="noColorInfoImageFormat", EmitDefaultValue=false)]
        public ImagingFormat? NoColorInfoImageFormat { get; set; }
        /// <summary>
        /// Gets or Sets BlackWhiteImageFormat
        /// </summary>
        [DataMember(Name="blackWhiteImageFormat", EmitDefaultValue=false)]
        public ImagingFormat? BlackWhiteImageFormat { get; set; }
        /// <summary>
        /// Gets or Sets BlackWhiteSafeImageFormat
        /// </summary>
        [DataMember(Name="blackWhiteSafeImageFormat", EmitDefaultValue=false)]
        public ImagingFormat? BlackWhiteSafeImageFormat { get; set; }
        /// <summary>
        /// Gets or Sets ColorImageFormat
        /// </summary>
        [DataMember(Name="colorImageFormat", EmitDefaultValue=false)]
        public ImagingFormat? ColorImageFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ColorDetectionSettings" /> class.
        /// </summary>
        /// <param name="noColorInfoImageFormat">noColorInfoImageFormat.</param>
        /// <param name="blackWhiteImageFormat">blackWhiteImageFormat.</param>
        /// <param name="blackWhiteSafeImageFormat">blackWhiteSafeImageFormat.</param>
        /// <param name="colorImageFormat">colorImageFormat.</param>
        /// <param name="treatImageContainingDocsAsColor">treatImageContainingDocsAsColor.</param>
        /// <param name="colorDetectionLuminanceCutoff">colorDetectionLuminanceCutoff.</param>
        public ColorDetectionSettings(ImagingFormat? noColorInfoImageFormat = default(ImagingFormat?), ImagingFormat? blackWhiteImageFormat = default(ImagingFormat?), ImagingFormat? blackWhiteSafeImageFormat = default(ImagingFormat?), ImagingFormat? colorImageFormat = default(ImagingFormat?), bool? treatImageContainingDocsAsColor = default(bool?), int? colorDetectionLuminanceCutoff = default(int?))
        {
            this.NoColorInfoImageFormat = noColorInfoImageFormat;
            this.BlackWhiteImageFormat = blackWhiteImageFormat;
            this.BlackWhiteSafeImageFormat = blackWhiteSafeImageFormat;
            this.ColorImageFormat = colorImageFormat;
            this.TreatImageContainingDocsAsColor = treatImageContainingDocsAsColor;
            this.ColorDetectionLuminanceCutoff = colorDetectionLuminanceCutoff;
        }
        




        /// <summary>
        /// Gets or Sets TreatImageContainingDocsAsColor
        /// </summary>
        [DataMember(Name="treatImageContainingDocsAsColor", EmitDefaultValue=false)]
        public bool? TreatImageContainingDocsAsColor { get; set; }

        /// <summary>
        /// Gets or Sets ColorDetectionLuminanceCutoff
        /// </summary>
        [DataMember(Name="colorDetectionLuminanceCutoff", EmitDefaultValue=false)]
        public int? ColorDetectionLuminanceCutoff { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ColorDetectionSettings {\n");
            sb.Append("  NoColorInfoImageFormat: ").Append(NoColorInfoImageFormat).Append("\n");
            sb.Append("  BlackWhiteImageFormat: ").Append(BlackWhiteImageFormat).Append("\n");
            sb.Append("  BlackWhiteSafeImageFormat: ").Append(BlackWhiteSafeImageFormat).Append("\n");
            sb.Append("  ColorImageFormat: ").Append(ColorImageFormat).Append("\n");
            sb.Append("  TreatImageContainingDocsAsColor: ").Append(TreatImageContainingDocsAsColor).Append("\n");
            sb.Append("  ColorDetectionLuminanceCutoff: ").Append(ColorDetectionLuminanceCutoff).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ColorDetectionSettings);
        }

        /// <summary>
        /// Returns true if ColorDetectionSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of ColorDetectionSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ColorDetectionSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NoColorInfoImageFormat == input.NoColorInfoImageFormat ||
                    (this.NoColorInfoImageFormat != null &&
                    this.NoColorInfoImageFormat.Equals(input.NoColorInfoImageFormat))
                ) && 
                (
                    this.BlackWhiteImageFormat == input.BlackWhiteImageFormat ||
                    (this.BlackWhiteImageFormat != null &&
                    this.BlackWhiteImageFormat.Equals(input.BlackWhiteImageFormat))
                ) && 
                (
                    this.BlackWhiteSafeImageFormat == input.BlackWhiteSafeImageFormat ||
                    (this.BlackWhiteSafeImageFormat != null &&
                    this.BlackWhiteSafeImageFormat.Equals(input.BlackWhiteSafeImageFormat))
                ) && 
                (
                    this.ColorImageFormat == input.ColorImageFormat ||
                    (this.ColorImageFormat != null &&
                    this.ColorImageFormat.Equals(input.ColorImageFormat))
                ) && 
                (
                    this.TreatImageContainingDocsAsColor == input.TreatImageContainingDocsAsColor ||
                    (this.TreatImageContainingDocsAsColor != null &&
                    this.TreatImageContainingDocsAsColor.Equals(input.TreatImageContainingDocsAsColor))
                ) && 
                (
                    this.ColorDetectionLuminanceCutoff == input.ColorDetectionLuminanceCutoff ||
                    (this.ColorDetectionLuminanceCutoff != null &&
                    this.ColorDetectionLuminanceCutoff.Equals(input.ColorDetectionLuminanceCutoff))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NoColorInfoImageFormat != null)
                    hashCode = hashCode * 59 + this.NoColorInfoImageFormat.GetHashCode();
                if (this.BlackWhiteImageFormat != null)
                    hashCode = hashCode * 59 + this.BlackWhiteImageFormat.GetHashCode();
                if (this.BlackWhiteSafeImageFormat != null)
                    hashCode = hashCode * 59 + this.BlackWhiteSafeImageFormat.GetHashCode();
                if (this.ColorImageFormat != null)
                    hashCode = hashCode * 59 + this.ColorImageFormat.GetHashCode();
                if (this.TreatImageContainingDocsAsColor != null)
                    hashCode = hashCode * 59 + this.TreatImageContainingDocsAsColor.GetHashCode();
                if (this.ColorDetectionLuminanceCutoff != null)
                    hashCode = hashCode * 59 + this.ColorDetectionLuminanceCutoff.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
