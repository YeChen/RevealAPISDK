/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.Sdk.Client.SwaggerDateConverter;

namespace RevealAPI.Sdk.Models.Resources
{
    /// <summary>
    /// HitInContext
    /// </summary>
    [DataContract]
    public partial class HitInContext :  IEquatable<HitInContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HitInContext" /> class.
        /// </summary>
        /// <param name="highlightedHit">highlightedHit.</param>
        /// <param name="hitStart">hitStart.</param>
        /// <param name="hitEnd">hitEnd.</param>
        public HitInContext(string highlightedHit = default(string), int? hitStart = default(int?), int? hitEnd = default(int?))
        {
            this.HighlightedHit = highlightedHit;
            this.HitStart = hitStart;
            this.HitEnd = hitEnd;
        }
        
        /// <summary>
        /// Gets or Sets HighlightedHit
        /// </summary>
        [DataMember(Name="highlightedHit", EmitDefaultValue=false)]
        public string HighlightedHit { get; set; }

        /// <summary>
        /// Gets or Sets HitStart
        /// </summary>
        [DataMember(Name="hitStart", EmitDefaultValue=false)]
        public int? HitStart { get; set; }

        /// <summary>
        /// Gets or Sets HitEnd
        /// </summary>
        [DataMember(Name="hitEnd", EmitDefaultValue=false)]
        public int? HitEnd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HitInContext {\n");
            sb.Append("  HighlightedHit: ").Append(HighlightedHit).Append("\n");
            sb.Append("  HitStart: ").Append(HitStart).Append("\n");
            sb.Append("  HitEnd: ").Append(HitEnd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HitInContext);
        }

        /// <summary>
        /// Returns true if HitInContext instances are equal
        /// </summary>
        /// <param name="input">Instance of HitInContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HitInContext input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HighlightedHit == input.HighlightedHit ||
                    (this.HighlightedHit != null &&
                    this.HighlightedHit.Equals(input.HighlightedHit))
                ) && 
                (
                    this.HitStart == input.HitStart ||
                    (this.HitStart != null &&
                    this.HitStart.Equals(input.HitStart))
                ) && 
                (
                    this.HitEnd == input.HitEnd ||
                    (this.HitEnd != null &&
                    this.HitEnd.Equals(input.HitEnd))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HighlightedHit != null)
                    hashCode = hashCode * 59 + this.HighlightedHit.GetHashCode();
                if (this.HitStart != null)
                    hashCode = hashCode * 59 + this.HitStart.GetHashCode();
                if (this.HitEnd != null)
                    hashCode = hashCode * 59 + this.HitEnd.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
