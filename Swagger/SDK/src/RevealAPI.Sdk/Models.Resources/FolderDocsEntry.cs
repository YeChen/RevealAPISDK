/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.Sdk.Client.SwaggerDateConverter;

namespace RevealAPI.Sdk.Models.Resources
{
    /// <summary>
    /// FolderDocsEntry
    /// </summary>
    [DataContract]
    public partial class FolderDocsEntry :  IEquatable<FolderDocsEntry>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets UpdateOption
        /// </summary>
        [DataMember(Name="updateOption", EmitDefaultValue=false)]
        public BulkFolderUpdateOption? UpdateOption { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FolderDocsEntry" /> class.
        /// </summary>
        /// <param name="folderIds">folderIds.</param>
        /// <param name="updateOption">updateOption.</param>
        public FolderDocsEntry(List<long?> folderIds = default(List<long?>), BulkFolderUpdateOption? updateOption = default(BulkFolderUpdateOption?))
        {
            this.FolderIds = folderIds;
            this.UpdateOption = updateOption;
        }
        
        /// <summary>
        /// Gets or Sets FolderIds
        /// </summary>
        [DataMember(Name="folderIds", EmitDefaultValue=false)]
        public List<long?> FolderIds { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FolderDocsEntry {\n");
            sb.Append("  FolderIds: ").Append(FolderIds).Append("\n");
            sb.Append("  UpdateOption: ").Append(UpdateOption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FolderDocsEntry);
        }

        /// <summary>
        /// Returns true if FolderDocsEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of FolderDocsEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FolderDocsEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FolderIds == input.FolderIds ||
                    this.FolderIds != null &&
                    this.FolderIds.SequenceEqual(input.FolderIds)
                ) && 
                (
                    this.UpdateOption == input.UpdateOption ||
                    (this.UpdateOption != null &&
                    this.UpdateOption.Equals(input.UpdateOption))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FolderIds != null)
                    hashCode = hashCode * 59 + this.FolderIds.GetHashCode();
                if (this.UpdateOption != null)
                    hashCode = hashCode * 59 + this.UpdateOption.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
