/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.Sdk.Client.SwaggerDateConverter;

namespace RevealAPI.Sdk.Models.Resources
{
    /// <summary>
    /// AssignmentJob
    /// </summary>
    [DataContract]
    public partial class AssignmentJob :  IEquatable<AssignmentJob>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets AssignmentType
        /// </summary>
        [DataMember(Name="assignmentType", EmitDefaultValue=false)]
        public AssignmentTypeID? AssignmentType { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public JobStatus? Status { get; set; }
        /// <summary>
        /// Gets or Sets RelatedType
        /// </summary>
        [DataMember(Name="relatedType", EmitDefaultValue=false)]
        public RelatedType? RelatedType { get; set; }
        /// <summary>
        /// Gets or Sets SampleType
        /// </summary>
        [DataMember(Name="sampleType", EmitDefaultValue=false)]
        public RandomSampleType? SampleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssignmentJob" /> class.
        /// </summary>
        /// <param name="assignmentType">assignmentType.</param>
        /// <param name="id">id.</param>
        /// <param name="status">status.</param>
        /// <param name="sourceDescription">sourceDescription.</param>
        /// <param name="createdByUserId">createdByUserId.</param>
        /// <param name="createdByUserName">createdByUserName.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="isAssignedToPool">isAssignedToPool.</param>
        /// <param name="assignedFolderIds">assignedFolderIds.</param>
        /// <param name="folderDescription">folderDescription.</param>
        /// <param name="documentsPerUserCount">documentsPerUserCount.</param>
        /// <param name="modifiedByUserId">modifiedByUserId.</param>
        /// <param name="modifiedDate">modifiedDate.</param>
        /// <param name="aiModelId">aiModelId.</param>
        /// <param name="aiQueueId">aiQueueId.</param>
        /// <param name="aiQueueName">aiQueueName.</param>
        /// <param name="searchId">searchId.</param>
        /// <param name="userDescription">userDescription.</param>
        /// <param name="isFolderNew">isFolderNew.</param>
        /// <param name="folderName">folderName.</param>
        /// <param name="folderLimit">folderLimit.</param>
        /// <param name="keepRelatedTogether">keepRelatedTogether.</param>
        /// <param name="relatedType">relatedType.</param>
        /// <param name="customRelationshipField">customRelationshipField.</param>
        /// <param name="limitAdditionalDocsInAFolder">limitAdditionalDocsInAFolder.</param>
        /// <param name="maxRelationshipDocCount">maxRelationshipDocCount.</param>
        /// <param name="assignedTeamId">assignedTeamId.</param>
        /// <param name="assignedUserIds">assignedUserIds.</param>
        /// <param name="sortOrderedFields">sortOrderedFields.</param>
        /// <param name="documentSecurtyTeamId">documentSecurtyTeamId.</param>
        /// <param name="tagProfileId">tagProfileId.</param>
        /// <param name="name">name.</param>
        /// <param name="sampleType">sampleType.</param>
        /// <param name="sampleDocumentCount">sampleDocumentCount.</param>
        /// <param name="samplePercent">samplePercent.</param>
        /// <param name="sampleConfidence">sampleConfidence.</param>
        /// <param name="sampleMarginOfError">sampleMarginOfError.</param>
        public AssignmentJob(AssignmentTypeID? assignmentType = default(AssignmentTypeID?), long? id = default(long?), JobStatus? status = default(JobStatus?), string sourceDescription = default(string), long? createdByUserId = default(long?), string createdByUserName = default(string), DateTime? createdDate = default(DateTime?), bool? isAssignedToPool = default(bool?), List<int?> assignedFolderIds = default(List<int?>), string folderDescription = default(string), int? documentsPerUserCount = default(int?), long? modifiedByUserId = default(long?), DateTime? modifiedDate = default(DateTime?), int? aiModelId = default(int?), int? aiQueueId = default(int?), string aiQueueName = default(string), long? searchId = default(long?), string userDescription = default(string), bool? isFolderNew = default(bool?), string folderName = default(string), int? folderLimit = default(int?), bool? keepRelatedTogether = default(bool?), RelatedType? relatedType = default(RelatedType?), string customRelationshipField = default(string), bool? limitAdditionalDocsInAFolder = default(bool?), int? maxRelationshipDocCount = default(int?), int? assignedTeamId = default(int?), List<long?> assignedUserIds = default(List<long?>), List<ExportJobSortedFieldItem> sortOrderedFields = default(List<ExportJobSortedFieldItem>), int? documentSecurtyTeamId = default(int?), int? tagProfileId = default(int?), string name = default(string), RandomSampleType? sampleType = default(RandomSampleType?), int? sampleDocumentCount = default(int?), int? samplePercent = default(int?), int? sampleConfidence = default(int?), int? sampleMarginOfError = default(int?))
        {
            this.AssignmentType = assignmentType;
            this.Id = id;
            this.Status = status;
            this.SourceDescription = sourceDescription;
            this.CreatedByUserId = createdByUserId;
            this.CreatedByUserName = createdByUserName;
            this.CreatedDate = createdDate;
            this.IsAssignedToPool = isAssignedToPool;
            this.AssignedFolderIds = assignedFolderIds;
            this.FolderDescription = folderDescription;
            this.DocumentsPerUserCount = documentsPerUserCount;
            this.ModifiedByUserId = modifiedByUserId;
            this.ModifiedDate = modifiedDate;
            this.AiModelId = aiModelId;
            this.AiQueueId = aiQueueId;
            this.AiQueueName = aiQueueName;
            this.SearchId = searchId;
            this.UserDescription = userDescription;
            this.IsFolderNew = isFolderNew;
            this.FolderName = folderName;
            this.FolderLimit = folderLimit;
            this.KeepRelatedTogether = keepRelatedTogether;
            this.RelatedType = relatedType;
            this.CustomRelationshipField = customRelationshipField;
            this.LimitAdditionalDocsInAFolder = limitAdditionalDocsInAFolder;
            this.MaxRelationshipDocCount = maxRelationshipDocCount;
            this.AssignedTeamId = assignedTeamId;
            this.AssignedUserIds = assignedUserIds;
            this.SortOrderedFields = sortOrderedFields;
            this.DocumentSecurtyTeamId = documentSecurtyTeamId;
            this.TagProfileId = tagProfileId;
            this.Name = name;
            this.SampleType = sampleType;
            this.SampleDocumentCount = sampleDocumentCount;
            this.SamplePercent = samplePercent;
            this.SampleConfidence = sampleConfidence;
            this.SampleMarginOfError = sampleMarginOfError;
        }
        

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }


        /// <summary>
        /// Gets or Sets SourceDescription
        /// </summary>
        [DataMember(Name="sourceDescription", EmitDefaultValue=false)]
        public string SourceDescription { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUserId
        /// </summary>
        [DataMember(Name="createdByUserId", EmitDefaultValue=false)]
        public long? CreatedByUserId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUserName
        /// </summary>
        [DataMember(Name="createdByUserName", EmitDefaultValue=false)]
        public string CreatedByUserName { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets IsAssignedToPool
        /// </summary>
        [DataMember(Name="isAssignedToPool", EmitDefaultValue=false)]
        public bool? IsAssignedToPool { get; set; }

        /// <summary>
        /// Gets or Sets AssignedFolderIds
        /// </summary>
        [DataMember(Name="assignedFolderIds", EmitDefaultValue=false)]
        public List<int?> AssignedFolderIds { get; set; }

        /// <summary>
        /// Gets or Sets FolderDescription
        /// </summary>
        [DataMember(Name="folderDescription", EmitDefaultValue=false)]
        public string FolderDescription { get; set; }

        /// <summary>
        /// Gets or Sets DocumentsPerUserCount
        /// </summary>
        [DataMember(Name="documentsPerUserCount", EmitDefaultValue=false)]
        public int? DocumentsPerUserCount { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedByUserId
        /// </summary>
        [DataMember(Name="modifiedByUserId", EmitDefaultValue=false)]
        public long? ModifiedByUserId { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name="modifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets AiModelId
        /// </summary>
        [DataMember(Name="aiModelId", EmitDefaultValue=false)]
        public int? AiModelId { get; set; }

        /// <summary>
        /// Gets or Sets AiQueueId
        /// </summary>
        [DataMember(Name="aiQueueId", EmitDefaultValue=false)]
        public int? AiQueueId { get; set; }

        /// <summary>
        /// Gets or Sets AiQueueName
        /// </summary>
        [DataMember(Name="aiQueueName", EmitDefaultValue=false)]
        public string AiQueueName { get; set; }

        /// <summary>
        /// Gets or Sets SearchId
        /// </summary>
        [DataMember(Name="searchId", EmitDefaultValue=false)]
        public long? SearchId { get; set; }

        /// <summary>
        /// Gets or Sets UserDescription
        /// </summary>
        [DataMember(Name="userDescription", EmitDefaultValue=false)]
        public string UserDescription { get; set; }

        /// <summary>
        /// Gets or Sets IsFolderNew
        /// </summary>
        [DataMember(Name="isFolderNew", EmitDefaultValue=false)]
        public bool? IsFolderNew { get; set; }

        /// <summary>
        /// Gets or Sets FolderName
        /// </summary>
        [DataMember(Name="folderName", EmitDefaultValue=false)]
        public string FolderName { get; set; }

        /// <summary>
        /// Gets or Sets FolderLimit
        /// </summary>
        [DataMember(Name="folderLimit", EmitDefaultValue=false)]
        public int? FolderLimit { get; set; }

        /// <summary>
        /// Gets or Sets KeepRelatedTogether
        /// </summary>
        [DataMember(Name="keepRelatedTogether", EmitDefaultValue=false)]
        public bool? KeepRelatedTogether { get; set; }


        /// <summary>
        /// Gets or Sets CustomRelationshipField
        /// </summary>
        [DataMember(Name="customRelationshipField", EmitDefaultValue=false)]
        public string CustomRelationshipField { get; set; }

        /// <summary>
        /// Gets or Sets LimitAdditionalDocsInAFolder
        /// </summary>
        [DataMember(Name="limitAdditionalDocsInAFolder", EmitDefaultValue=false)]
        public bool? LimitAdditionalDocsInAFolder { get; set; }

        /// <summary>
        /// Gets or Sets MaxRelationshipDocCount
        /// </summary>
        [DataMember(Name="maxRelationshipDocCount", EmitDefaultValue=false)]
        public int? MaxRelationshipDocCount { get; set; }

        /// <summary>
        /// Gets or Sets AssignedTeamId
        /// </summary>
        [DataMember(Name="assignedTeamId", EmitDefaultValue=false)]
        public int? AssignedTeamId { get; set; }

        /// <summary>
        /// Gets or Sets AssignedUserIds
        /// </summary>
        [DataMember(Name="assignedUserIds", EmitDefaultValue=false)]
        public List<long?> AssignedUserIds { get; set; }

        /// <summary>
        /// Gets or Sets SortOrderedFields
        /// </summary>
        [DataMember(Name="sortOrderedFields", EmitDefaultValue=false)]
        public List<ExportJobSortedFieldItem> SortOrderedFields { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSecurtyTeamId
        /// </summary>
        [DataMember(Name="documentSecurtyTeamId", EmitDefaultValue=false)]
        public int? DocumentSecurtyTeamId { get; set; }

        /// <summary>
        /// Gets or Sets TagProfileId
        /// </summary>
        [DataMember(Name="tagProfileId", EmitDefaultValue=false)]
        public int? TagProfileId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Gets or Sets SampleDocumentCount
        /// </summary>
        [DataMember(Name="sampleDocumentCount", EmitDefaultValue=false)]
        public int? SampleDocumentCount { get; set; }

        /// <summary>
        /// Gets or Sets SamplePercent
        /// </summary>
        [DataMember(Name="samplePercent", EmitDefaultValue=false)]
        public int? SamplePercent { get; set; }

        /// <summary>
        /// Gets or Sets SampleConfidence
        /// </summary>
        [DataMember(Name="sampleConfidence", EmitDefaultValue=false)]
        public int? SampleConfidence { get; set; }

        /// <summary>
        /// Gets or Sets SampleMarginOfError
        /// </summary>
        [DataMember(Name="sampleMarginOfError", EmitDefaultValue=false)]
        public int? SampleMarginOfError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssignmentJob {\n");
            sb.Append("  AssignmentType: ").Append(AssignmentType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SourceDescription: ").Append(SourceDescription).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  CreatedByUserName: ").Append(CreatedByUserName).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  IsAssignedToPool: ").Append(IsAssignedToPool).Append("\n");
            sb.Append("  AssignedFolderIds: ").Append(AssignedFolderIds).Append("\n");
            sb.Append("  FolderDescription: ").Append(FolderDescription).Append("\n");
            sb.Append("  DocumentsPerUserCount: ").Append(DocumentsPerUserCount).Append("\n");
            sb.Append("  ModifiedByUserId: ").Append(ModifiedByUserId).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  AiModelId: ").Append(AiModelId).Append("\n");
            sb.Append("  AiQueueId: ").Append(AiQueueId).Append("\n");
            sb.Append("  AiQueueName: ").Append(AiQueueName).Append("\n");
            sb.Append("  SearchId: ").Append(SearchId).Append("\n");
            sb.Append("  UserDescription: ").Append(UserDescription).Append("\n");
            sb.Append("  IsFolderNew: ").Append(IsFolderNew).Append("\n");
            sb.Append("  FolderName: ").Append(FolderName).Append("\n");
            sb.Append("  FolderLimit: ").Append(FolderLimit).Append("\n");
            sb.Append("  KeepRelatedTogether: ").Append(KeepRelatedTogether).Append("\n");
            sb.Append("  RelatedType: ").Append(RelatedType).Append("\n");
            sb.Append("  CustomRelationshipField: ").Append(CustomRelationshipField).Append("\n");
            sb.Append("  LimitAdditionalDocsInAFolder: ").Append(LimitAdditionalDocsInAFolder).Append("\n");
            sb.Append("  MaxRelationshipDocCount: ").Append(MaxRelationshipDocCount).Append("\n");
            sb.Append("  AssignedTeamId: ").Append(AssignedTeamId).Append("\n");
            sb.Append("  AssignedUserIds: ").Append(AssignedUserIds).Append("\n");
            sb.Append("  SortOrderedFields: ").Append(SortOrderedFields).Append("\n");
            sb.Append("  DocumentSecurtyTeamId: ").Append(DocumentSecurtyTeamId).Append("\n");
            sb.Append("  TagProfileId: ").Append(TagProfileId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SampleType: ").Append(SampleType).Append("\n");
            sb.Append("  SampleDocumentCount: ").Append(SampleDocumentCount).Append("\n");
            sb.Append("  SamplePercent: ").Append(SamplePercent).Append("\n");
            sb.Append("  SampleConfidence: ").Append(SampleConfidence).Append("\n");
            sb.Append("  SampleMarginOfError: ").Append(SampleMarginOfError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssignmentJob);
        }

        /// <summary>
        /// Returns true if AssignmentJob instances are equal
        /// </summary>
        /// <param name="input">Instance of AssignmentJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssignmentJob input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssignmentType == input.AssignmentType ||
                    (this.AssignmentType != null &&
                    this.AssignmentType.Equals(input.AssignmentType))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SourceDescription == input.SourceDescription ||
                    (this.SourceDescription != null &&
                    this.SourceDescription.Equals(input.SourceDescription))
                ) && 
                (
                    this.CreatedByUserId == input.CreatedByUserId ||
                    (this.CreatedByUserId != null &&
                    this.CreatedByUserId.Equals(input.CreatedByUserId))
                ) && 
                (
                    this.CreatedByUserName == input.CreatedByUserName ||
                    (this.CreatedByUserName != null &&
                    this.CreatedByUserName.Equals(input.CreatedByUserName))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.IsAssignedToPool == input.IsAssignedToPool ||
                    (this.IsAssignedToPool != null &&
                    this.IsAssignedToPool.Equals(input.IsAssignedToPool))
                ) && 
                (
                    this.AssignedFolderIds == input.AssignedFolderIds ||
                    this.AssignedFolderIds != null &&
                    this.AssignedFolderIds.SequenceEqual(input.AssignedFolderIds)
                ) && 
                (
                    this.FolderDescription == input.FolderDescription ||
                    (this.FolderDescription != null &&
                    this.FolderDescription.Equals(input.FolderDescription))
                ) && 
                (
                    this.DocumentsPerUserCount == input.DocumentsPerUserCount ||
                    (this.DocumentsPerUserCount != null &&
                    this.DocumentsPerUserCount.Equals(input.DocumentsPerUserCount))
                ) && 
                (
                    this.ModifiedByUserId == input.ModifiedByUserId ||
                    (this.ModifiedByUserId != null &&
                    this.ModifiedByUserId.Equals(input.ModifiedByUserId))
                ) && 
                (
                    this.ModifiedDate == input.ModifiedDate ||
                    (this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(input.ModifiedDate))
                ) && 
                (
                    this.AiModelId == input.AiModelId ||
                    (this.AiModelId != null &&
                    this.AiModelId.Equals(input.AiModelId))
                ) && 
                (
                    this.AiQueueId == input.AiQueueId ||
                    (this.AiQueueId != null &&
                    this.AiQueueId.Equals(input.AiQueueId))
                ) && 
                (
                    this.AiQueueName == input.AiQueueName ||
                    (this.AiQueueName != null &&
                    this.AiQueueName.Equals(input.AiQueueName))
                ) && 
                (
                    this.SearchId == input.SearchId ||
                    (this.SearchId != null &&
                    this.SearchId.Equals(input.SearchId))
                ) && 
                (
                    this.UserDescription == input.UserDescription ||
                    (this.UserDescription != null &&
                    this.UserDescription.Equals(input.UserDescription))
                ) && 
                (
                    this.IsFolderNew == input.IsFolderNew ||
                    (this.IsFolderNew != null &&
                    this.IsFolderNew.Equals(input.IsFolderNew))
                ) && 
                (
                    this.FolderName == input.FolderName ||
                    (this.FolderName != null &&
                    this.FolderName.Equals(input.FolderName))
                ) && 
                (
                    this.FolderLimit == input.FolderLimit ||
                    (this.FolderLimit != null &&
                    this.FolderLimit.Equals(input.FolderLimit))
                ) && 
                (
                    this.KeepRelatedTogether == input.KeepRelatedTogether ||
                    (this.KeepRelatedTogether != null &&
                    this.KeepRelatedTogether.Equals(input.KeepRelatedTogether))
                ) && 
                (
                    this.RelatedType == input.RelatedType ||
                    (this.RelatedType != null &&
                    this.RelatedType.Equals(input.RelatedType))
                ) && 
                (
                    this.CustomRelationshipField == input.CustomRelationshipField ||
                    (this.CustomRelationshipField != null &&
                    this.CustomRelationshipField.Equals(input.CustomRelationshipField))
                ) && 
                (
                    this.LimitAdditionalDocsInAFolder == input.LimitAdditionalDocsInAFolder ||
                    (this.LimitAdditionalDocsInAFolder != null &&
                    this.LimitAdditionalDocsInAFolder.Equals(input.LimitAdditionalDocsInAFolder))
                ) && 
                (
                    this.MaxRelationshipDocCount == input.MaxRelationshipDocCount ||
                    (this.MaxRelationshipDocCount != null &&
                    this.MaxRelationshipDocCount.Equals(input.MaxRelationshipDocCount))
                ) && 
                (
                    this.AssignedTeamId == input.AssignedTeamId ||
                    (this.AssignedTeamId != null &&
                    this.AssignedTeamId.Equals(input.AssignedTeamId))
                ) && 
                (
                    this.AssignedUserIds == input.AssignedUserIds ||
                    this.AssignedUserIds != null &&
                    this.AssignedUserIds.SequenceEqual(input.AssignedUserIds)
                ) && 
                (
                    this.SortOrderedFields == input.SortOrderedFields ||
                    this.SortOrderedFields != null &&
                    this.SortOrderedFields.SequenceEqual(input.SortOrderedFields)
                ) && 
                (
                    this.DocumentSecurtyTeamId == input.DocumentSecurtyTeamId ||
                    (this.DocumentSecurtyTeamId != null &&
                    this.DocumentSecurtyTeamId.Equals(input.DocumentSecurtyTeamId))
                ) && 
                (
                    this.TagProfileId == input.TagProfileId ||
                    (this.TagProfileId != null &&
                    this.TagProfileId.Equals(input.TagProfileId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SampleType == input.SampleType ||
                    (this.SampleType != null &&
                    this.SampleType.Equals(input.SampleType))
                ) && 
                (
                    this.SampleDocumentCount == input.SampleDocumentCount ||
                    (this.SampleDocumentCount != null &&
                    this.SampleDocumentCount.Equals(input.SampleDocumentCount))
                ) && 
                (
                    this.SamplePercent == input.SamplePercent ||
                    (this.SamplePercent != null &&
                    this.SamplePercent.Equals(input.SamplePercent))
                ) && 
                (
                    this.SampleConfidence == input.SampleConfidence ||
                    (this.SampleConfidence != null &&
                    this.SampleConfidence.Equals(input.SampleConfidence))
                ) && 
                (
                    this.SampleMarginOfError == input.SampleMarginOfError ||
                    (this.SampleMarginOfError != null &&
                    this.SampleMarginOfError.Equals(input.SampleMarginOfError))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssignmentType != null)
                    hashCode = hashCode * 59 + this.AssignmentType.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SourceDescription != null)
                    hashCode = hashCode * 59 + this.SourceDescription.GetHashCode();
                if (this.CreatedByUserId != null)
                    hashCode = hashCode * 59 + this.CreatedByUserId.GetHashCode();
                if (this.CreatedByUserName != null)
                    hashCode = hashCode * 59 + this.CreatedByUserName.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.IsAssignedToPool != null)
                    hashCode = hashCode * 59 + this.IsAssignedToPool.GetHashCode();
                if (this.AssignedFolderIds != null)
                    hashCode = hashCode * 59 + this.AssignedFolderIds.GetHashCode();
                if (this.FolderDescription != null)
                    hashCode = hashCode * 59 + this.FolderDescription.GetHashCode();
                if (this.DocumentsPerUserCount != null)
                    hashCode = hashCode * 59 + this.DocumentsPerUserCount.GetHashCode();
                if (this.ModifiedByUserId != null)
                    hashCode = hashCode * 59 + this.ModifiedByUserId.GetHashCode();
                if (this.ModifiedDate != null)
                    hashCode = hashCode * 59 + this.ModifiedDate.GetHashCode();
                if (this.AiModelId != null)
                    hashCode = hashCode * 59 + this.AiModelId.GetHashCode();
                if (this.AiQueueId != null)
                    hashCode = hashCode * 59 + this.AiQueueId.GetHashCode();
                if (this.AiQueueName != null)
                    hashCode = hashCode * 59 + this.AiQueueName.GetHashCode();
                if (this.SearchId != null)
                    hashCode = hashCode * 59 + this.SearchId.GetHashCode();
                if (this.UserDescription != null)
                    hashCode = hashCode * 59 + this.UserDescription.GetHashCode();
                if (this.IsFolderNew != null)
                    hashCode = hashCode * 59 + this.IsFolderNew.GetHashCode();
                if (this.FolderName != null)
                    hashCode = hashCode * 59 + this.FolderName.GetHashCode();
                if (this.FolderLimit != null)
                    hashCode = hashCode * 59 + this.FolderLimit.GetHashCode();
                if (this.KeepRelatedTogether != null)
                    hashCode = hashCode * 59 + this.KeepRelatedTogether.GetHashCode();
                if (this.RelatedType != null)
                    hashCode = hashCode * 59 + this.RelatedType.GetHashCode();
                if (this.CustomRelationshipField != null)
                    hashCode = hashCode * 59 + this.CustomRelationshipField.GetHashCode();
                if (this.LimitAdditionalDocsInAFolder != null)
                    hashCode = hashCode * 59 + this.LimitAdditionalDocsInAFolder.GetHashCode();
                if (this.MaxRelationshipDocCount != null)
                    hashCode = hashCode * 59 + this.MaxRelationshipDocCount.GetHashCode();
                if (this.AssignedTeamId != null)
                    hashCode = hashCode * 59 + this.AssignedTeamId.GetHashCode();
                if (this.AssignedUserIds != null)
                    hashCode = hashCode * 59 + this.AssignedUserIds.GetHashCode();
                if (this.SortOrderedFields != null)
                    hashCode = hashCode * 59 + this.SortOrderedFields.GetHashCode();
                if (this.DocumentSecurtyTeamId != null)
                    hashCode = hashCode * 59 + this.DocumentSecurtyTeamId.GetHashCode();
                if (this.TagProfileId != null)
                    hashCode = hashCode * 59 + this.TagProfileId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SampleType != null)
                    hashCode = hashCode * 59 + this.SampleType.GetHashCode();
                if (this.SampleDocumentCount != null)
                    hashCode = hashCode * 59 + this.SampleDocumentCount.GetHashCode();
                if (this.SamplePercent != null)
                    hashCode = hashCode * 59 + this.SamplePercent.GetHashCode();
                if (this.SampleConfidence != null)
                    hashCode = hashCode * 59 + this.SampleConfidence.GetHashCode();
                if (this.SampleMarginOfError != null)
                    hashCode = hashCode * 59 + this.SampleMarginOfError.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
