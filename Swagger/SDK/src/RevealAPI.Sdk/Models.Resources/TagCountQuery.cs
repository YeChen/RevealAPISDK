/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.Sdk.Client.SwaggerDateConverter;

namespace RevealAPI.Sdk.Models.Resources
{
    /// <summary>
    /// TagCountQuery
    /// </summary>
    [DataContract]
    public partial class TagCountQuery :  IEquatable<TagCountQuery>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets QueryType
        /// </summary>
        [DataMember(Name="queryType", EmitDefaultValue=false)]
        public SearchQueryType? QueryType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TagCountQuery" /> class.
        /// </summary>
        /// <param name="queryType">queryType.</param>
        /// <param name="queryString">queryString.</param>
        /// <param name="sortByString">sortByString.</param>
        /// <param name="tagSetId">tagSetId.</param>
        /// <param name="tagChoiceIds">tagChoiceIds.</param>
        /// <param name="ignoreDocumentSecurity">ignoreDocumentSecurity.</param>
        /// <param name="searchProfileIds">searchProfileIds.</param>
        /// <param name="totalCount">totalCount.</param>
        public TagCountQuery(SearchQueryType? queryType = default(SearchQueryType?), string queryString = default(string), string sortByString = default(string), int? tagSetId = default(int?), List<int?> tagChoiceIds = default(List<int?>), bool? ignoreDocumentSecurity = default(bool?), List<int?> searchProfileIds = default(List<int?>), int? totalCount = default(int?))
        {
            this.QueryType = queryType;
            this.QueryString = queryString;
            this.SortByString = sortByString;
            this.TagSetId = tagSetId;
            this.TagChoiceIds = tagChoiceIds;
            this.IgnoreDocumentSecurity = ignoreDocumentSecurity;
            this.SearchProfileIds = searchProfileIds;
            this.TotalCount = totalCount;
        }
        

        /// <summary>
        /// Gets or Sets QueryString
        /// </summary>
        [DataMember(Name="queryString", EmitDefaultValue=false)]
        public string QueryString { get; set; }

        /// <summary>
        /// Gets or Sets SortByString
        /// </summary>
        [DataMember(Name="sortByString", EmitDefaultValue=false)]
        public string SortByString { get; set; }

        /// <summary>
        /// Gets or Sets TagSetId
        /// </summary>
        [DataMember(Name="tagSetId", EmitDefaultValue=false)]
        public int? TagSetId { get; set; }

        /// <summary>
        /// Gets or Sets TagChoiceIds
        /// </summary>
        [DataMember(Name="tagChoiceIds", EmitDefaultValue=false)]
        public List<int?> TagChoiceIds { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreDocumentSecurity
        /// </summary>
        [DataMember(Name="ignoreDocumentSecurity", EmitDefaultValue=false)]
        public bool? IgnoreDocumentSecurity { get; set; }

        /// <summary>
        /// Gets or Sets SearchProfileIds
        /// </summary>
        [DataMember(Name="searchProfileIds", EmitDefaultValue=false)]
        public List<int?> SearchProfileIds { get; set; }

        /// <summary>
        /// Gets or Sets TotalCount
        /// </summary>
        [DataMember(Name="totalCount", EmitDefaultValue=false)]
        public int? TotalCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TagCountQuery {\n");
            sb.Append("  QueryType: ").Append(QueryType).Append("\n");
            sb.Append("  QueryString: ").Append(QueryString).Append("\n");
            sb.Append("  SortByString: ").Append(SortByString).Append("\n");
            sb.Append("  TagSetId: ").Append(TagSetId).Append("\n");
            sb.Append("  TagChoiceIds: ").Append(TagChoiceIds).Append("\n");
            sb.Append("  IgnoreDocumentSecurity: ").Append(IgnoreDocumentSecurity).Append("\n");
            sb.Append("  SearchProfileIds: ").Append(SearchProfileIds).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TagCountQuery);
        }

        /// <summary>
        /// Returns true if TagCountQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of TagCountQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TagCountQuery input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QueryType == input.QueryType ||
                    (this.QueryType != null &&
                    this.QueryType.Equals(input.QueryType))
                ) && 
                (
                    this.QueryString == input.QueryString ||
                    (this.QueryString != null &&
                    this.QueryString.Equals(input.QueryString))
                ) && 
                (
                    this.SortByString == input.SortByString ||
                    (this.SortByString != null &&
                    this.SortByString.Equals(input.SortByString))
                ) && 
                (
                    this.TagSetId == input.TagSetId ||
                    (this.TagSetId != null &&
                    this.TagSetId.Equals(input.TagSetId))
                ) && 
                (
                    this.TagChoiceIds == input.TagChoiceIds ||
                    this.TagChoiceIds != null &&
                    this.TagChoiceIds.SequenceEqual(input.TagChoiceIds)
                ) && 
                (
                    this.IgnoreDocumentSecurity == input.IgnoreDocumentSecurity ||
                    (this.IgnoreDocumentSecurity != null &&
                    this.IgnoreDocumentSecurity.Equals(input.IgnoreDocumentSecurity))
                ) && 
                (
                    this.SearchProfileIds == input.SearchProfileIds ||
                    this.SearchProfileIds != null &&
                    this.SearchProfileIds.SequenceEqual(input.SearchProfileIds)
                ) && 
                (
                    this.TotalCount == input.TotalCount ||
                    (this.TotalCount != null &&
                    this.TotalCount.Equals(input.TotalCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueryType != null)
                    hashCode = hashCode * 59 + this.QueryType.GetHashCode();
                if (this.QueryString != null)
                    hashCode = hashCode * 59 + this.QueryString.GetHashCode();
                if (this.SortByString != null)
                    hashCode = hashCode * 59 + this.SortByString.GetHashCode();
                if (this.TagSetId != null)
                    hashCode = hashCode * 59 + this.TagSetId.GetHashCode();
                if (this.TagChoiceIds != null)
                    hashCode = hashCode * 59 + this.TagChoiceIds.GetHashCode();
                if (this.IgnoreDocumentSecurity != null)
                    hashCode = hashCode * 59 + this.IgnoreDocumentSecurity.GetHashCode();
                if (this.SearchProfileIds != null)
                    hashCode = hashCode * 59 + this.SearchProfileIds.GetHashCode();
                if (this.TotalCount != null)
                    hashCode = hashCode * 59 + this.TotalCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
