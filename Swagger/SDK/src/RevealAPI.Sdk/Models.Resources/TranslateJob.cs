/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.Sdk.Client.SwaggerDateConverter;

namespace RevealAPI.Sdk.Models.Resources
{
    /// <summary>
    /// TranslateJob
    /// </summary>
    [DataContract]
    public partial class TranslateJob :  IEquatable<TranslateJob>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TranslateJob" /> class.
        /// </summary>
        /// <param name="isDeleted">isDeleted.</param>
        /// <param name="id">id.</param>
        /// <param name="createdByUserId">createdByUserId.</param>
        /// <param name="totalDocuments">totalDocuments.</param>
        /// <param name="name">name.</param>
        /// <param name="languageSource">languageSource.</param>
        /// <param name="languageDest">languageDest.</param>
        /// <param name="textSetSourceId">textSetSourceId.</param>
        /// <param name="textSetDestId">textSetDestId.</param>
        /// <param name="destLanguageFieldId">destLanguageFieldId.</param>
        public TranslateJob(bool? isDeleted = default(bool?), int? id = default(int?), int? createdByUserId = default(int?), int? totalDocuments = default(int?), string name = default(string), string languageSource = default(string), string languageDest = default(string), int? textSetSourceId = default(int?), int? textSetDestId = default(int?), int? destLanguageFieldId = default(int?))
        {
            this.IsDeleted = isDeleted;
            this.Id = id;
            this.CreatedByUserId = createdByUserId;
            this.TotalDocuments = totalDocuments;
            this.Name = name;
            this.LanguageSource = languageSource;
            this.LanguageDest = languageDest;
            this.TextSetSourceId = textSetSourceId;
            this.TextSetDestId = textSetDestId;
            this.DestLanguageFieldId = destLanguageFieldId;
        }
        
        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUserId
        /// </summary>
        [DataMember(Name="createdByUserId", EmitDefaultValue=false)]
        public int? CreatedByUserId { get; set; }

        /// <summary>
        /// Gets or Sets TotalDocuments
        /// </summary>
        [DataMember(Name="totalDocuments", EmitDefaultValue=false)]
        public int? TotalDocuments { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets LanguageSource
        /// </summary>
        [DataMember(Name="languageSource", EmitDefaultValue=false)]
        public string LanguageSource { get; set; }

        /// <summary>
        /// Gets or Sets LanguageDest
        /// </summary>
        [DataMember(Name="languageDest", EmitDefaultValue=false)]
        public string LanguageDest { get; set; }

        /// <summary>
        /// Gets or Sets TextSetSourceId
        /// </summary>
        [DataMember(Name="textSetSourceId", EmitDefaultValue=false)]
        public int? TextSetSourceId { get; set; }

        /// <summary>
        /// Gets or Sets TextSetDestId
        /// </summary>
        [DataMember(Name="textSetDestId", EmitDefaultValue=false)]
        public int? TextSetDestId { get; set; }

        /// <summary>
        /// Gets or Sets DestLanguageFieldId
        /// </summary>
        [DataMember(Name="destLanguageFieldId", EmitDefaultValue=false)]
        public int? DestLanguageFieldId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TranslateJob {\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  TotalDocuments: ").Append(TotalDocuments).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LanguageSource: ").Append(LanguageSource).Append("\n");
            sb.Append("  LanguageDest: ").Append(LanguageDest).Append("\n");
            sb.Append("  TextSetSourceId: ").Append(TextSetSourceId).Append("\n");
            sb.Append("  TextSetDestId: ").Append(TextSetDestId).Append("\n");
            sb.Append("  DestLanguageFieldId: ").Append(DestLanguageFieldId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TranslateJob);
        }

        /// <summary>
        /// Returns true if TranslateJob instances are equal
        /// </summary>
        /// <param name="input">Instance of TranslateJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranslateJob input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedByUserId == input.CreatedByUserId ||
                    (this.CreatedByUserId != null &&
                    this.CreatedByUserId.Equals(input.CreatedByUserId))
                ) && 
                (
                    this.TotalDocuments == input.TotalDocuments ||
                    (this.TotalDocuments != null &&
                    this.TotalDocuments.Equals(input.TotalDocuments))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LanguageSource == input.LanguageSource ||
                    (this.LanguageSource != null &&
                    this.LanguageSource.Equals(input.LanguageSource))
                ) && 
                (
                    this.LanguageDest == input.LanguageDest ||
                    (this.LanguageDest != null &&
                    this.LanguageDest.Equals(input.LanguageDest))
                ) && 
                (
                    this.TextSetSourceId == input.TextSetSourceId ||
                    (this.TextSetSourceId != null &&
                    this.TextSetSourceId.Equals(input.TextSetSourceId))
                ) && 
                (
                    this.TextSetDestId == input.TextSetDestId ||
                    (this.TextSetDestId != null &&
                    this.TextSetDestId.Equals(input.TextSetDestId))
                ) && 
                (
                    this.DestLanguageFieldId == input.DestLanguageFieldId ||
                    (this.DestLanguageFieldId != null &&
                    this.DestLanguageFieldId.Equals(input.DestLanguageFieldId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreatedByUserId != null)
                    hashCode = hashCode * 59 + this.CreatedByUserId.GetHashCode();
                if (this.TotalDocuments != null)
                    hashCode = hashCode * 59 + this.TotalDocuments.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.LanguageSource != null)
                    hashCode = hashCode * 59 + this.LanguageSource.GetHashCode();
                if (this.LanguageDest != null)
                    hashCode = hashCode * 59 + this.LanguageDest.GetHashCode();
                if (this.TextSetSourceId != null)
                    hashCode = hashCode * 59 + this.TextSetSourceId.GetHashCode();
                if (this.TextSetDestId != null)
                    hashCode = hashCode * 59 + this.TextSetDestId.GetHashCode();
                if (this.DestLanguageFieldId != null)
                    hashCode = hashCode * 59 + this.DestLanguageFieldId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
