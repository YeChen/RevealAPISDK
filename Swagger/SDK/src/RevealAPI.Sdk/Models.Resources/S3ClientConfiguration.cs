/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.Sdk.Client.SwaggerDateConverter;

namespace RevealAPI.Sdk.Models.Resources
{
    /// <summary>
    /// S3ClientConfiguration
    /// </summary>
    [DataContract]
    public partial class S3ClientConfiguration :  IEquatable<S3ClientConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="S3ClientConfiguration" /> class.
        /// </summary>
        /// <param name="signerUrl">signerUrl.</param>
        /// <param name="key">key.</param>
        /// <param name="region">region.</param>
        /// <param name="bucket">bucket.</param>
        /// <param name="sekmsKeyHeader">sekmsKeyHeader.</param>
        public S3ClientConfiguration(string signerUrl = default(string), string key = default(string), string region = default(string), string bucket = default(string), string sekmsKeyHeader = default(string))
        {
            this.SignerUrl = signerUrl;
            this.Key = key;
            this.Region = region;
            this.Bucket = bucket;
            this.SekmsKeyHeader = sekmsKeyHeader;
        }
        
        /// <summary>
        /// Gets or Sets SignerUrl
        /// </summary>
        [DataMember(Name="signerUrl", EmitDefaultValue=false)]
        public string SignerUrl { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets Bucket
        /// </summary>
        [DataMember(Name="bucket", EmitDefaultValue=false)]
        public string Bucket { get; set; }

        /// <summary>
        /// Gets or Sets SekmsKeyHeader
        /// </summary>
        [DataMember(Name="sekmsKeyHeader", EmitDefaultValue=false)]
        public string SekmsKeyHeader { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class S3ClientConfiguration {\n");
            sb.Append("  SignerUrl: ").Append(SignerUrl).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Bucket: ").Append(Bucket).Append("\n");
            sb.Append("  SekmsKeyHeader: ").Append(SekmsKeyHeader).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as S3ClientConfiguration);
        }

        /// <summary>
        /// Returns true if S3ClientConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of S3ClientConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(S3ClientConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SignerUrl == input.SignerUrl ||
                    (this.SignerUrl != null &&
                    this.SignerUrl.Equals(input.SignerUrl))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Bucket == input.Bucket ||
                    (this.Bucket != null &&
                    this.Bucket.Equals(input.Bucket))
                ) && 
                (
                    this.SekmsKeyHeader == input.SekmsKeyHeader ||
                    (this.SekmsKeyHeader != null &&
                    this.SekmsKeyHeader.Equals(input.SekmsKeyHeader))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SignerUrl != null)
                    hashCode = hashCode * 59 + this.SignerUrl.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                if (this.Bucket != null)
                    hashCode = hashCode * 59 + this.Bucket.GetHashCode();
                if (this.SekmsKeyHeader != null)
                    hashCode = hashCode * 59 + this.SekmsKeyHeader.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
