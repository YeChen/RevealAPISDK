/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.Sdk.Client.SwaggerDateConverter;

namespace RevealAPI.Sdk.Models.Resources
{
    /// <summary>
    /// SearchResults
    /// </summary>
    [DataContract]
    public partial class SearchResults :  IEquatable<SearchResults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResults" /> class.
        /// </summary>
        /// <param name="tracingId">tracingId.</param>
        /// <param name="hasErrors">hasErrors.</param>
        /// <param name="documentBodyTerms">documentBodyTerms.</param>
        /// <param name="documentResults">documentResults.</param>
        /// <param name="documentFieldFillRateResults">documentFieldFillRateResults.</param>
        /// <param name="aggregations">aggregations.</param>
        /// <param name="dateHistograms">dateHistograms.</param>
        /// <param name="numberHistograms">numberHistograms.</param>
        public SearchResults(string tracingId = default(string), bool? hasErrors = default(bool?), List<string> documentBodyTerms = default(List<string>), DocumentSearchResults documentResults = default(DocumentSearchResults), List<DocumentFieldsFillRateResult> documentFieldFillRateResults = default(List<DocumentFieldsFillRateResult>), List<AggregationSearchResult> aggregations = default(List<AggregationSearchResult>), List<DateHistogramSearchResult> dateHistograms = default(List<DateHistogramSearchResult>), List<NumberHistogramSearchResult> numberHistograms = default(List<NumberHistogramSearchResult>))
        {
            this.TracingId = tracingId;
            this.HasErrors = hasErrors;
            this.DocumentBodyTerms = documentBodyTerms;
            this.DocumentResults = documentResults;
            this.DocumentFieldFillRateResults = documentFieldFillRateResults;
            this.Aggregations = aggregations;
            this.DateHistograms = dateHistograms;
            this.NumberHistograms = numberHistograms;
        }
        
        /// <summary>
        /// Gets or Sets TracingId
        /// </summary>
        [DataMember(Name="tracingId", EmitDefaultValue=false)]
        public string TracingId { get; set; }

        /// <summary>
        /// Gets or Sets HasErrors
        /// </summary>
        [DataMember(Name="hasErrors", EmitDefaultValue=false)]
        public bool? HasErrors { get; set; }

        /// <summary>
        /// Gets or Sets DocumentBodyTerms
        /// </summary>
        [DataMember(Name="documentBodyTerms", EmitDefaultValue=false)]
        public List<string> DocumentBodyTerms { get; set; }

        /// <summary>
        /// Gets or Sets DocumentResults
        /// </summary>
        [DataMember(Name="documentResults", EmitDefaultValue=false)]
        public DocumentSearchResults DocumentResults { get; set; }

        /// <summary>
        /// Gets or Sets DocumentFieldFillRateResults
        /// </summary>
        [DataMember(Name="documentFieldFillRateResults", EmitDefaultValue=false)]
        public List<DocumentFieldsFillRateResult> DocumentFieldFillRateResults { get; set; }

        /// <summary>
        /// Gets or Sets Aggregations
        /// </summary>
        [DataMember(Name="aggregations", EmitDefaultValue=false)]
        public List<AggregationSearchResult> Aggregations { get; set; }

        /// <summary>
        /// Gets or Sets DateHistograms
        /// </summary>
        [DataMember(Name="dateHistograms", EmitDefaultValue=false)]
        public List<DateHistogramSearchResult> DateHistograms { get; set; }

        /// <summary>
        /// Gets or Sets NumberHistograms
        /// </summary>
        [DataMember(Name="numberHistograms", EmitDefaultValue=false)]
        public List<NumberHistogramSearchResult> NumberHistograms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchResults {\n");
            sb.Append("  TracingId: ").Append(TracingId).Append("\n");
            sb.Append("  HasErrors: ").Append(HasErrors).Append("\n");
            sb.Append("  DocumentBodyTerms: ").Append(DocumentBodyTerms).Append("\n");
            sb.Append("  DocumentResults: ").Append(DocumentResults).Append("\n");
            sb.Append("  DocumentFieldFillRateResults: ").Append(DocumentFieldFillRateResults).Append("\n");
            sb.Append("  Aggregations: ").Append(Aggregations).Append("\n");
            sb.Append("  DateHistograms: ").Append(DateHistograms).Append("\n");
            sb.Append("  NumberHistograms: ").Append(NumberHistograms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchResults);
        }

        /// <summary>
        /// Returns true if SearchResults instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchResults input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TracingId == input.TracingId ||
                    (this.TracingId != null &&
                    this.TracingId.Equals(input.TracingId))
                ) && 
                (
                    this.HasErrors == input.HasErrors ||
                    (this.HasErrors != null &&
                    this.HasErrors.Equals(input.HasErrors))
                ) && 
                (
                    this.DocumentBodyTerms == input.DocumentBodyTerms ||
                    this.DocumentBodyTerms != null &&
                    this.DocumentBodyTerms.SequenceEqual(input.DocumentBodyTerms)
                ) && 
                (
                    this.DocumentResults == input.DocumentResults ||
                    (this.DocumentResults != null &&
                    this.DocumentResults.Equals(input.DocumentResults))
                ) && 
                (
                    this.DocumentFieldFillRateResults == input.DocumentFieldFillRateResults ||
                    this.DocumentFieldFillRateResults != null &&
                    this.DocumentFieldFillRateResults.SequenceEqual(input.DocumentFieldFillRateResults)
                ) && 
                (
                    this.Aggregations == input.Aggregations ||
                    this.Aggregations != null &&
                    this.Aggregations.SequenceEqual(input.Aggregations)
                ) && 
                (
                    this.DateHistograms == input.DateHistograms ||
                    this.DateHistograms != null &&
                    this.DateHistograms.SequenceEqual(input.DateHistograms)
                ) && 
                (
                    this.NumberHistograms == input.NumberHistograms ||
                    this.NumberHistograms != null &&
                    this.NumberHistograms.SequenceEqual(input.NumberHistograms)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TracingId != null)
                    hashCode = hashCode * 59 + this.TracingId.GetHashCode();
                if (this.HasErrors != null)
                    hashCode = hashCode * 59 + this.HasErrors.GetHashCode();
                if (this.DocumentBodyTerms != null)
                    hashCode = hashCode * 59 + this.DocumentBodyTerms.GetHashCode();
                if (this.DocumentResults != null)
                    hashCode = hashCode * 59 + this.DocumentResults.GetHashCode();
                if (this.DocumentFieldFillRateResults != null)
                    hashCode = hashCode * 59 + this.DocumentFieldFillRateResults.GetHashCode();
                if (this.Aggregations != null)
                    hashCode = hashCode * 59 + this.Aggregations.GetHashCode();
                if (this.DateHistograms != null)
                    hashCode = hashCode * 59 + this.DateHistograms.GetHashCode();
                if (this.NumberHistograms != null)
                    hashCode = hashCode * 59 + this.NumberHistograms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
