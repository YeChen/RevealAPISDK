/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.Sdk.Client.SwaggerDateConverter;

namespace RevealAPI.Sdk.Models.Resources
{
    /// <summary>
    /// DocumentFieldsFillRateResult
    /// </summary>
    [DataContract]
    public partial class DocumentFieldsFillRateResult :  IEquatable<DocumentFieldsFillRateResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentFieldsFillRateResult" /> class.
        /// </summary>
        /// <param name="componentKey">componentKey.</param>
        /// <param name="fieldNames">fieldNames.</param>
        /// <param name="fieldsExist">fieldsExist.</param>
        /// <param name="percentDocsHavingFields">percentDocsHavingFields.</param>
        /// <param name="percentDocsMissingFields">percentDocsMissingFields.</param>
        /// <param name="totalDocsHavingFields">totalDocsHavingFields.</param>
        /// <param name="totalDocsMissingFields">totalDocsMissingFields.</param>
        public DocumentFieldsFillRateResult(string componentKey = default(string), List<string> fieldNames = default(List<string>), bool? fieldsExist = default(bool?), double? percentDocsHavingFields = default(double?), double? percentDocsMissingFields = default(double?), int? totalDocsHavingFields = default(int?), int? totalDocsMissingFields = default(int?))
        {
            this.ComponentKey = componentKey;
            this.FieldNames = fieldNames;
            this.FieldsExist = fieldsExist;
            this.PercentDocsHavingFields = percentDocsHavingFields;
            this.PercentDocsMissingFields = percentDocsMissingFields;
            this.TotalDocsHavingFields = totalDocsHavingFields;
            this.TotalDocsMissingFields = totalDocsMissingFields;
        }
        
        /// <summary>
        /// Gets or Sets ComponentKey
        /// </summary>
        [DataMember(Name="componentKey", EmitDefaultValue=false)]
        public string ComponentKey { get; set; }

        /// <summary>
        /// Gets or Sets FieldNames
        /// </summary>
        [DataMember(Name="fieldNames", EmitDefaultValue=false)]
        public List<string> FieldNames { get; set; }

        /// <summary>
        /// Gets or Sets FieldsExist
        /// </summary>
        [DataMember(Name="fieldsExist", EmitDefaultValue=false)]
        public bool? FieldsExist { get; set; }

        /// <summary>
        /// Gets or Sets PercentDocsHavingFields
        /// </summary>
        [DataMember(Name="percentDocsHavingFields", EmitDefaultValue=false)]
        public double? PercentDocsHavingFields { get; set; }

        /// <summary>
        /// Gets or Sets PercentDocsMissingFields
        /// </summary>
        [DataMember(Name="percentDocsMissingFields", EmitDefaultValue=false)]
        public double? PercentDocsMissingFields { get; set; }

        /// <summary>
        /// Gets or Sets TotalDocsHavingFields
        /// </summary>
        [DataMember(Name="totalDocsHavingFields", EmitDefaultValue=false)]
        public int? TotalDocsHavingFields { get; set; }

        /// <summary>
        /// Gets or Sets TotalDocsMissingFields
        /// </summary>
        [DataMember(Name="totalDocsMissingFields", EmitDefaultValue=false)]
        public int? TotalDocsMissingFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentFieldsFillRateResult {\n");
            sb.Append("  ComponentKey: ").Append(ComponentKey).Append("\n");
            sb.Append("  FieldNames: ").Append(FieldNames).Append("\n");
            sb.Append("  FieldsExist: ").Append(FieldsExist).Append("\n");
            sb.Append("  PercentDocsHavingFields: ").Append(PercentDocsHavingFields).Append("\n");
            sb.Append("  PercentDocsMissingFields: ").Append(PercentDocsMissingFields).Append("\n");
            sb.Append("  TotalDocsHavingFields: ").Append(TotalDocsHavingFields).Append("\n");
            sb.Append("  TotalDocsMissingFields: ").Append(TotalDocsMissingFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentFieldsFillRateResult);
        }

        /// <summary>
        /// Returns true if DocumentFieldsFillRateResult instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentFieldsFillRateResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentFieldsFillRateResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ComponentKey == input.ComponentKey ||
                    (this.ComponentKey != null &&
                    this.ComponentKey.Equals(input.ComponentKey))
                ) && 
                (
                    this.FieldNames == input.FieldNames ||
                    this.FieldNames != null &&
                    this.FieldNames.SequenceEqual(input.FieldNames)
                ) && 
                (
                    this.FieldsExist == input.FieldsExist ||
                    (this.FieldsExist != null &&
                    this.FieldsExist.Equals(input.FieldsExist))
                ) && 
                (
                    this.PercentDocsHavingFields == input.PercentDocsHavingFields ||
                    (this.PercentDocsHavingFields != null &&
                    this.PercentDocsHavingFields.Equals(input.PercentDocsHavingFields))
                ) && 
                (
                    this.PercentDocsMissingFields == input.PercentDocsMissingFields ||
                    (this.PercentDocsMissingFields != null &&
                    this.PercentDocsMissingFields.Equals(input.PercentDocsMissingFields))
                ) && 
                (
                    this.TotalDocsHavingFields == input.TotalDocsHavingFields ||
                    (this.TotalDocsHavingFields != null &&
                    this.TotalDocsHavingFields.Equals(input.TotalDocsHavingFields))
                ) && 
                (
                    this.TotalDocsMissingFields == input.TotalDocsMissingFields ||
                    (this.TotalDocsMissingFields != null &&
                    this.TotalDocsMissingFields.Equals(input.TotalDocsMissingFields))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ComponentKey != null)
                    hashCode = hashCode * 59 + this.ComponentKey.GetHashCode();
                if (this.FieldNames != null)
                    hashCode = hashCode * 59 + this.FieldNames.GetHashCode();
                if (this.FieldsExist != null)
                    hashCode = hashCode * 59 + this.FieldsExist.GetHashCode();
                if (this.PercentDocsHavingFields != null)
                    hashCode = hashCode * 59 + this.PercentDocsHavingFields.GetHashCode();
                if (this.PercentDocsMissingFields != null)
                    hashCode = hashCode * 59 + this.PercentDocsMissingFields.GetHashCode();
                if (this.TotalDocsHavingFields != null)
                    hashCode = hashCode * 59 + this.TotalDocsHavingFields.GetHashCode();
                if (this.TotalDocsMissingFields != null)
                    hashCode = hashCode * 59 + this.TotalDocsMissingFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
