/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.Sdk.Client.SwaggerDateConverter;

namespace RevealAPI.Sdk.Models.Resources
{
    /// <summary>
    /// AssignmentJobCreate
    /// </summary>
    [DataContract]
    public partial class AssignmentJobCreate :  IEquatable<AssignmentJobCreate>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DocumentSelectionType
        /// </summary>
        [DataMember(Name="documentSelectionType", EmitDefaultValue=false)]
        public DocumentSelection? DocumentSelectionType { get; set; }
        /// <summary>
        /// Gets or Sets AssignTo
        /// </summary>
        [DataMember(Name="assignTo", EmitDefaultValue=false)]
        public AssignToType? AssignTo { get; set; }
        /// <summary>
        /// Gets or Sets RelatedType
        /// </summary>
        [DataMember(Name="relatedType", EmitDefaultValue=false)]
        public RelatedType? RelatedType { get; set; }
        /// <summary>
        /// Gets or Sets SampleType
        /// </summary>
        [DataMember(Name="sampleType", EmitDefaultValue=false)]
        public RandomSampleType? SampleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssignmentJobCreate" /> class.
        /// </summary>
        /// <param name="documentSelectionType">documentSelectionType.</param>
        /// <param name="selectedDocumentItemIds">selectedDocumentItemIds.</param>
        /// <param name="searchJobId">searchJobId.</param>
        /// <param name="searchCriteria">searchCriteria.</param>
        /// <param name="newFolderName">newFolderName.</param>
        /// <param name="assignTo">assignTo.</param>
        /// <param name="suppressTPWarning">suppressTPWarning.</param>
        /// <param name="searchId">searchId.</param>
        /// <param name="userDescription">userDescription.</param>
        /// <param name="isFolderNew">isFolderNew.</param>
        /// <param name="folderName">folderName.</param>
        /// <param name="folderLimit">folderLimit.</param>
        /// <param name="keepRelatedTogether">keepRelatedTogether.</param>
        /// <param name="relatedType">relatedType.</param>
        /// <param name="customRelationshipField">customRelationshipField.</param>
        /// <param name="limitAdditionalDocsInAFolder">limitAdditionalDocsInAFolder.</param>
        /// <param name="maxRelationshipDocCount">maxRelationshipDocCount.</param>
        /// <param name="assignedTeamId">assignedTeamId.</param>
        /// <param name="assignedUserIds">assignedUserIds.</param>
        /// <param name="sortOrderedFields">sortOrderedFields.</param>
        /// <param name="documentSecurtyTeamId">documentSecurtyTeamId.</param>
        /// <param name="tagProfileId">tagProfileId.</param>
        /// <param name="name">name.</param>
        /// <param name="sampleType">sampleType.</param>
        /// <param name="sampleDocumentCount">sampleDocumentCount.</param>
        /// <param name="samplePercent">samplePercent.</param>
        /// <param name="sampleConfidence">sampleConfidence.</param>
        /// <param name="sampleMarginOfError">sampleMarginOfError.</param>
        public AssignmentJobCreate(DocumentSelection? documentSelectionType = default(DocumentSelection?), List<long?> selectedDocumentItemIds = default(List<long?>), long? searchJobId = default(long?), BulkActionSearchCriteria searchCriteria = default(BulkActionSearchCriteria), string newFolderName = default(string), AssignToType? assignTo = default(AssignToType?), bool? suppressTPWarning = default(bool?), long? searchId = default(long?), string userDescription = default(string), bool? isFolderNew = default(bool?), string folderName = default(string), int? folderLimit = default(int?), bool? keepRelatedTogether = default(bool?), RelatedType? relatedType = default(RelatedType?), string customRelationshipField = default(string), bool? limitAdditionalDocsInAFolder = default(bool?), int? maxRelationshipDocCount = default(int?), int? assignedTeamId = default(int?), List<long?> assignedUserIds = default(List<long?>), List<ExportJobSortedFieldItem> sortOrderedFields = default(List<ExportJobSortedFieldItem>), int? documentSecurtyTeamId = default(int?), int? tagProfileId = default(int?), string name = default(string), RandomSampleType? sampleType = default(RandomSampleType?), int? sampleDocumentCount = default(int?), int? samplePercent = default(int?), int? sampleConfidence = default(int?), int? sampleMarginOfError = default(int?))
        {
            this.DocumentSelectionType = documentSelectionType;
            this.SelectedDocumentItemIds = selectedDocumentItemIds;
            this.SearchJobId = searchJobId;
            this.SearchCriteria = searchCriteria;
            this.NewFolderName = newFolderName;
            this.AssignTo = assignTo;
            this.SuppressTPWarning = suppressTPWarning;
            this.SearchId = searchId;
            this.UserDescription = userDescription;
            this.IsFolderNew = isFolderNew;
            this.FolderName = folderName;
            this.FolderLimit = folderLimit;
            this.KeepRelatedTogether = keepRelatedTogether;
            this.RelatedType = relatedType;
            this.CustomRelationshipField = customRelationshipField;
            this.LimitAdditionalDocsInAFolder = limitAdditionalDocsInAFolder;
            this.MaxRelationshipDocCount = maxRelationshipDocCount;
            this.AssignedTeamId = assignedTeamId;
            this.AssignedUserIds = assignedUserIds;
            this.SortOrderedFields = sortOrderedFields;
            this.DocumentSecurtyTeamId = documentSecurtyTeamId;
            this.TagProfileId = tagProfileId;
            this.Name = name;
            this.SampleType = sampleType;
            this.SampleDocumentCount = sampleDocumentCount;
            this.SamplePercent = samplePercent;
            this.SampleConfidence = sampleConfidence;
            this.SampleMarginOfError = sampleMarginOfError;
        }
        

        /// <summary>
        /// Gets or Sets SelectedDocumentItemIds
        /// </summary>
        [DataMember(Name="selectedDocumentItemIds", EmitDefaultValue=false)]
        public List<long?> SelectedDocumentItemIds { get; set; }

        /// <summary>
        /// Gets or Sets SearchJobId
        /// </summary>
        [DataMember(Name="searchJobId", EmitDefaultValue=false)]
        public long? SearchJobId { get; set; }

        /// <summary>
        /// Gets or Sets SearchCriteria
        /// </summary>
        [DataMember(Name="searchCriteria", EmitDefaultValue=false)]
        public BulkActionSearchCriteria SearchCriteria { get; set; }

        /// <summary>
        /// Gets or Sets NewFolderName
        /// </summary>
        [DataMember(Name="newFolderName", EmitDefaultValue=false)]
        public string NewFolderName { get; set; }


        /// <summary>
        /// Gets or Sets SuppressTPWarning
        /// </summary>
        [DataMember(Name="suppressTPWarning", EmitDefaultValue=false)]
        public bool? SuppressTPWarning { get; set; }

        /// <summary>
        /// Gets or Sets SearchId
        /// </summary>
        [DataMember(Name="searchId", EmitDefaultValue=false)]
        public long? SearchId { get; set; }

        /// <summary>
        /// Gets or Sets UserDescription
        /// </summary>
        [DataMember(Name="userDescription", EmitDefaultValue=false)]
        public string UserDescription { get; set; }

        /// <summary>
        /// Gets or Sets IsFolderNew
        /// </summary>
        [DataMember(Name="isFolderNew", EmitDefaultValue=false)]
        public bool? IsFolderNew { get; set; }

        /// <summary>
        /// Gets or Sets FolderName
        /// </summary>
        [DataMember(Name="folderName", EmitDefaultValue=false)]
        public string FolderName { get; set; }

        /// <summary>
        /// Gets or Sets FolderLimit
        /// </summary>
        [DataMember(Name="folderLimit", EmitDefaultValue=false)]
        public int? FolderLimit { get; set; }

        /// <summary>
        /// Gets or Sets KeepRelatedTogether
        /// </summary>
        [DataMember(Name="keepRelatedTogether", EmitDefaultValue=false)]
        public bool? KeepRelatedTogether { get; set; }


        /// <summary>
        /// Gets or Sets CustomRelationshipField
        /// </summary>
        [DataMember(Name="customRelationshipField", EmitDefaultValue=false)]
        public string CustomRelationshipField { get; set; }

        /// <summary>
        /// Gets or Sets LimitAdditionalDocsInAFolder
        /// </summary>
        [DataMember(Name="limitAdditionalDocsInAFolder", EmitDefaultValue=false)]
        public bool? LimitAdditionalDocsInAFolder { get; set; }

        /// <summary>
        /// Gets or Sets MaxRelationshipDocCount
        /// </summary>
        [DataMember(Name="maxRelationshipDocCount", EmitDefaultValue=false)]
        public int? MaxRelationshipDocCount { get; set; }

        /// <summary>
        /// Gets or Sets AssignedTeamId
        /// </summary>
        [DataMember(Name="assignedTeamId", EmitDefaultValue=false)]
        public int? AssignedTeamId { get; set; }

        /// <summary>
        /// Gets or Sets AssignedUserIds
        /// </summary>
        [DataMember(Name="assignedUserIds", EmitDefaultValue=false)]
        public List<long?> AssignedUserIds { get; set; }

        /// <summary>
        /// Gets or Sets SortOrderedFields
        /// </summary>
        [DataMember(Name="sortOrderedFields", EmitDefaultValue=false)]
        public List<ExportJobSortedFieldItem> SortOrderedFields { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSecurtyTeamId
        /// </summary>
        [DataMember(Name="documentSecurtyTeamId", EmitDefaultValue=false)]
        public int? DocumentSecurtyTeamId { get; set; }

        /// <summary>
        /// Gets or Sets TagProfileId
        /// </summary>
        [DataMember(Name="tagProfileId", EmitDefaultValue=false)]
        public int? TagProfileId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Gets or Sets SampleDocumentCount
        /// </summary>
        [DataMember(Name="sampleDocumentCount", EmitDefaultValue=false)]
        public int? SampleDocumentCount { get; set; }

        /// <summary>
        /// Gets or Sets SamplePercent
        /// </summary>
        [DataMember(Name="samplePercent", EmitDefaultValue=false)]
        public int? SamplePercent { get; set; }

        /// <summary>
        /// Gets or Sets SampleConfidence
        /// </summary>
        [DataMember(Name="sampleConfidence", EmitDefaultValue=false)]
        public int? SampleConfidence { get; set; }

        /// <summary>
        /// Gets or Sets SampleMarginOfError
        /// </summary>
        [DataMember(Name="sampleMarginOfError", EmitDefaultValue=false)]
        public int? SampleMarginOfError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssignmentJobCreate {\n");
            sb.Append("  DocumentSelectionType: ").Append(DocumentSelectionType).Append("\n");
            sb.Append("  SelectedDocumentItemIds: ").Append(SelectedDocumentItemIds).Append("\n");
            sb.Append("  SearchJobId: ").Append(SearchJobId).Append("\n");
            sb.Append("  SearchCriteria: ").Append(SearchCriteria).Append("\n");
            sb.Append("  NewFolderName: ").Append(NewFolderName).Append("\n");
            sb.Append("  AssignTo: ").Append(AssignTo).Append("\n");
            sb.Append("  SuppressTPWarning: ").Append(SuppressTPWarning).Append("\n");
            sb.Append("  SearchId: ").Append(SearchId).Append("\n");
            sb.Append("  UserDescription: ").Append(UserDescription).Append("\n");
            sb.Append("  IsFolderNew: ").Append(IsFolderNew).Append("\n");
            sb.Append("  FolderName: ").Append(FolderName).Append("\n");
            sb.Append("  FolderLimit: ").Append(FolderLimit).Append("\n");
            sb.Append("  KeepRelatedTogether: ").Append(KeepRelatedTogether).Append("\n");
            sb.Append("  RelatedType: ").Append(RelatedType).Append("\n");
            sb.Append("  CustomRelationshipField: ").Append(CustomRelationshipField).Append("\n");
            sb.Append("  LimitAdditionalDocsInAFolder: ").Append(LimitAdditionalDocsInAFolder).Append("\n");
            sb.Append("  MaxRelationshipDocCount: ").Append(MaxRelationshipDocCount).Append("\n");
            sb.Append("  AssignedTeamId: ").Append(AssignedTeamId).Append("\n");
            sb.Append("  AssignedUserIds: ").Append(AssignedUserIds).Append("\n");
            sb.Append("  SortOrderedFields: ").Append(SortOrderedFields).Append("\n");
            sb.Append("  DocumentSecurtyTeamId: ").Append(DocumentSecurtyTeamId).Append("\n");
            sb.Append("  TagProfileId: ").Append(TagProfileId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SampleType: ").Append(SampleType).Append("\n");
            sb.Append("  SampleDocumentCount: ").Append(SampleDocumentCount).Append("\n");
            sb.Append("  SamplePercent: ").Append(SamplePercent).Append("\n");
            sb.Append("  SampleConfidence: ").Append(SampleConfidence).Append("\n");
            sb.Append("  SampleMarginOfError: ").Append(SampleMarginOfError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssignmentJobCreate);
        }

        /// <summary>
        /// Returns true if AssignmentJobCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of AssignmentJobCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssignmentJobCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentSelectionType == input.DocumentSelectionType ||
                    (this.DocumentSelectionType != null &&
                    this.DocumentSelectionType.Equals(input.DocumentSelectionType))
                ) && 
                (
                    this.SelectedDocumentItemIds == input.SelectedDocumentItemIds ||
                    this.SelectedDocumentItemIds != null &&
                    this.SelectedDocumentItemIds.SequenceEqual(input.SelectedDocumentItemIds)
                ) && 
                (
                    this.SearchJobId == input.SearchJobId ||
                    (this.SearchJobId != null &&
                    this.SearchJobId.Equals(input.SearchJobId))
                ) && 
                (
                    this.SearchCriteria == input.SearchCriteria ||
                    (this.SearchCriteria != null &&
                    this.SearchCriteria.Equals(input.SearchCriteria))
                ) && 
                (
                    this.NewFolderName == input.NewFolderName ||
                    (this.NewFolderName != null &&
                    this.NewFolderName.Equals(input.NewFolderName))
                ) && 
                (
                    this.AssignTo == input.AssignTo ||
                    (this.AssignTo != null &&
                    this.AssignTo.Equals(input.AssignTo))
                ) && 
                (
                    this.SuppressTPWarning == input.SuppressTPWarning ||
                    (this.SuppressTPWarning != null &&
                    this.SuppressTPWarning.Equals(input.SuppressTPWarning))
                ) && 
                (
                    this.SearchId == input.SearchId ||
                    (this.SearchId != null &&
                    this.SearchId.Equals(input.SearchId))
                ) && 
                (
                    this.UserDescription == input.UserDescription ||
                    (this.UserDescription != null &&
                    this.UserDescription.Equals(input.UserDescription))
                ) && 
                (
                    this.IsFolderNew == input.IsFolderNew ||
                    (this.IsFolderNew != null &&
                    this.IsFolderNew.Equals(input.IsFolderNew))
                ) && 
                (
                    this.FolderName == input.FolderName ||
                    (this.FolderName != null &&
                    this.FolderName.Equals(input.FolderName))
                ) && 
                (
                    this.FolderLimit == input.FolderLimit ||
                    (this.FolderLimit != null &&
                    this.FolderLimit.Equals(input.FolderLimit))
                ) && 
                (
                    this.KeepRelatedTogether == input.KeepRelatedTogether ||
                    (this.KeepRelatedTogether != null &&
                    this.KeepRelatedTogether.Equals(input.KeepRelatedTogether))
                ) && 
                (
                    this.RelatedType == input.RelatedType ||
                    (this.RelatedType != null &&
                    this.RelatedType.Equals(input.RelatedType))
                ) && 
                (
                    this.CustomRelationshipField == input.CustomRelationshipField ||
                    (this.CustomRelationshipField != null &&
                    this.CustomRelationshipField.Equals(input.CustomRelationshipField))
                ) && 
                (
                    this.LimitAdditionalDocsInAFolder == input.LimitAdditionalDocsInAFolder ||
                    (this.LimitAdditionalDocsInAFolder != null &&
                    this.LimitAdditionalDocsInAFolder.Equals(input.LimitAdditionalDocsInAFolder))
                ) && 
                (
                    this.MaxRelationshipDocCount == input.MaxRelationshipDocCount ||
                    (this.MaxRelationshipDocCount != null &&
                    this.MaxRelationshipDocCount.Equals(input.MaxRelationshipDocCount))
                ) && 
                (
                    this.AssignedTeamId == input.AssignedTeamId ||
                    (this.AssignedTeamId != null &&
                    this.AssignedTeamId.Equals(input.AssignedTeamId))
                ) && 
                (
                    this.AssignedUserIds == input.AssignedUserIds ||
                    this.AssignedUserIds != null &&
                    this.AssignedUserIds.SequenceEqual(input.AssignedUserIds)
                ) && 
                (
                    this.SortOrderedFields == input.SortOrderedFields ||
                    this.SortOrderedFields != null &&
                    this.SortOrderedFields.SequenceEqual(input.SortOrderedFields)
                ) && 
                (
                    this.DocumentSecurtyTeamId == input.DocumentSecurtyTeamId ||
                    (this.DocumentSecurtyTeamId != null &&
                    this.DocumentSecurtyTeamId.Equals(input.DocumentSecurtyTeamId))
                ) && 
                (
                    this.TagProfileId == input.TagProfileId ||
                    (this.TagProfileId != null &&
                    this.TagProfileId.Equals(input.TagProfileId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SampleType == input.SampleType ||
                    (this.SampleType != null &&
                    this.SampleType.Equals(input.SampleType))
                ) && 
                (
                    this.SampleDocumentCount == input.SampleDocumentCount ||
                    (this.SampleDocumentCount != null &&
                    this.SampleDocumentCount.Equals(input.SampleDocumentCount))
                ) && 
                (
                    this.SamplePercent == input.SamplePercent ||
                    (this.SamplePercent != null &&
                    this.SamplePercent.Equals(input.SamplePercent))
                ) && 
                (
                    this.SampleConfidence == input.SampleConfidence ||
                    (this.SampleConfidence != null &&
                    this.SampleConfidence.Equals(input.SampleConfidence))
                ) && 
                (
                    this.SampleMarginOfError == input.SampleMarginOfError ||
                    (this.SampleMarginOfError != null &&
                    this.SampleMarginOfError.Equals(input.SampleMarginOfError))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentSelectionType != null)
                    hashCode = hashCode * 59 + this.DocumentSelectionType.GetHashCode();
                if (this.SelectedDocumentItemIds != null)
                    hashCode = hashCode * 59 + this.SelectedDocumentItemIds.GetHashCode();
                if (this.SearchJobId != null)
                    hashCode = hashCode * 59 + this.SearchJobId.GetHashCode();
                if (this.SearchCriteria != null)
                    hashCode = hashCode * 59 + this.SearchCriteria.GetHashCode();
                if (this.NewFolderName != null)
                    hashCode = hashCode * 59 + this.NewFolderName.GetHashCode();
                if (this.AssignTo != null)
                    hashCode = hashCode * 59 + this.AssignTo.GetHashCode();
                if (this.SuppressTPWarning != null)
                    hashCode = hashCode * 59 + this.SuppressTPWarning.GetHashCode();
                if (this.SearchId != null)
                    hashCode = hashCode * 59 + this.SearchId.GetHashCode();
                if (this.UserDescription != null)
                    hashCode = hashCode * 59 + this.UserDescription.GetHashCode();
                if (this.IsFolderNew != null)
                    hashCode = hashCode * 59 + this.IsFolderNew.GetHashCode();
                if (this.FolderName != null)
                    hashCode = hashCode * 59 + this.FolderName.GetHashCode();
                if (this.FolderLimit != null)
                    hashCode = hashCode * 59 + this.FolderLimit.GetHashCode();
                if (this.KeepRelatedTogether != null)
                    hashCode = hashCode * 59 + this.KeepRelatedTogether.GetHashCode();
                if (this.RelatedType != null)
                    hashCode = hashCode * 59 + this.RelatedType.GetHashCode();
                if (this.CustomRelationshipField != null)
                    hashCode = hashCode * 59 + this.CustomRelationshipField.GetHashCode();
                if (this.LimitAdditionalDocsInAFolder != null)
                    hashCode = hashCode * 59 + this.LimitAdditionalDocsInAFolder.GetHashCode();
                if (this.MaxRelationshipDocCount != null)
                    hashCode = hashCode * 59 + this.MaxRelationshipDocCount.GetHashCode();
                if (this.AssignedTeamId != null)
                    hashCode = hashCode * 59 + this.AssignedTeamId.GetHashCode();
                if (this.AssignedUserIds != null)
                    hashCode = hashCode * 59 + this.AssignedUserIds.GetHashCode();
                if (this.SortOrderedFields != null)
                    hashCode = hashCode * 59 + this.SortOrderedFields.GetHashCode();
                if (this.DocumentSecurtyTeamId != null)
                    hashCode = hashCode * 59 + this.DocumentSecurtyTeamId.GetHashCode();
                if (this.TagProfileId != null)
                    hashCode = hashCode * 59 + this.TagProfileId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SampleType != null)
                    hashCode = hashCode * 59 + this.SampleType.GetHashCode();
                if (this.SampleDocumentCount != null)
                    hashCode = hashCode * 59 + this.SampleDocumentCount.GetHashCode();
                if (this.SamplePercent != null)
                    hashCode = hashCode * 59 + this.SamplePercent.GetHashCode();
                if (this.SampleConfidence != null)
                    hashCode = hashCode * 59 + this.SampleConfidence.GetHashCode();
                if (this.SampleMarginOfError != null)
                    hashCode = hashCode * 59 + this.SampleMarginOfError.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
