/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.Sdk.Client.SwaggerDateConverter;

namespace RevealAPI.Sdk.Models.Resources
{
    /// <summary>
    /// ExportJobCreate
    /// </summary>
    [DataContract]
    public partial class ExportJobCreate :  IEquatable<ExportJobCreate>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DocumentSelectionType
        /// </summary>
        [DataMember(Name="documentSelectionType", EmitDefaultValue=false)]
        public DocumentSelection? DocumentSelectionType { get; set; }
        /// <summary>
        /// Gets or Sets ExportAs
        /// </summary>
        [DataMember(Name="exportAs", EmitDefaultValue=false)]
        public ExportJobFileType? ExportAs { get; set; }
        /// <summary>
        /// Gets or Sets FileNamingType
        /// </summary>
        [DataMember(Name="fileNamingType", EmitDefaultValue=false)]
        public ExportJobFileNamingConvention? FileNamingType { get; set; }
        /// <summary>
        /// Gets or Sets FileNameOrder
        /// </summary>
        [DataMember(Name="fileNameOrder", EmitDefaultValue=false)]
        public FileOrderSetting? FileNameOrder { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportJobCreate" /> class.
        /// </summary>
        /// <param name="documentSelectionType">documentSelectionType.</param>
        /// <param name="selectedDocumentItemIds">selectedDocumentItemIds.</param>
        /// <param name="searchJobId">Required when DocumentSelectionType &#x3D; AllFromSearchContext.</param>
        /// <param name="searchCriteria">searchCriteria.</param>
        /// <param name="displayOrderedFields">displayOrderedFields.</param>
        /// <param name="sortOrderedFields">sortOrderedFields.</param>
        /// <param name="tagProfileId">Used in conjunction with InControl.RestAPI.V2.Models.Jobs.Export.ExportJobCreate.SortOrderedFields to order by document tags.</param>
        /// <param name="name">name.</param>
        /// <param name="importProfileId">importProfileId.</param>
        /// <param name="imageSetId">imageSetId.</param>
        /// <param name="exportAs">exportAs.</param>
        /// <param name="includeNativeFiles">includeNativeFiles.</param>
        /// <param name="fileNamingType">fileNamingType.</param>
        /// <param name="volumePrefix">volumePrefix.</param>
        /// <param name="volumeStartNumber">volumeStartNumber.</param>
        /// <param name="volumeNumberDigits">volumeNumberDigits.</param>
        /// <param name="volumeMaxSize">volumeMaxSize.</param>
        /// <param name="fileNameOrder">fileNameOrder.</param>
        /// <param name="nativeFileFields">nativeFileFields.</param>
        public ExportJobCreate(DocumentSelection? documentSelectionType = default(DocumentSelection?), List<long?> selectedDocumentItemIds = default(List<long?>), long? searchJobId = default(long?), BulkActionSearchCriteria searchCriteria = default(BulkActionSearchCriteria), List<ExportJobOrderedFieldItem> displayOrderedFields = default(List<ExportJobOrderedFieldItem>), List<ExportJobSortedFieldItem> sortOrderedFields = default(List<ExportJobSortedFieldItem>), int? tagProfileId = default(int?), string name = default(string), int? importProfileId = default(int?), int? imageSetId = default(int?), ExportJobFileType? exportAs = default(ExportJobFileType?), bool? includeNativeFiles = default(bool?), ExportJobFileNamingConvention? fileNamingType = default(ExportJobFileNamingConvention?), string volumePrefix = default(string), int? volumeStartNumber = default(int?), int? volumeNumberDigits = default(int?), int? volumeMaxSize = default(int?), FileOrderSetting? fileNameOrder = default(FileOrderSetting?), List<string> nativeFileFields = default(List<string>))
        {
            this.DocumentSelectionType = documentSelectionType;
            this.SelectedDocumentItemIds = selectedDocumentItemIds;
            this.SearchJobId = searchJobId;
            this.SearchCriteria = searchCriteria;
            this.DisplayOrderedFields = displayOrderedFields;
            this.SortOrderedFields = sortOrderedFields;
            this.TagProfileId = tagProfileId;
            this.Name = name;
            this.ImportProfileId = importProfileId;
            this.ImageSetId = imageSetId;
            this.ExportAs = exportAs;
            this.IncludeNativeFiles = includeNativeFiles;
            this.FileNamingType = fileNamingType;
            this.VolumePrefix = volumePrefix;
            this.VolumeStartNumber = volumeStartNumber;
            this.VolumeNumberDigits = volumeNumberDigits;
            this.VolumeMaxSize = volumeMaxSize;
            this.FileNameOrder = fileNameOrder;
            this.NativeFileFields = nativeFileFields;
        }
        

        /// <summary>
        /// Gets or Sets SelectedDocumentItemIds
        /// </summary>
        [DataMember(Name="selectedDocumentItemIds", EmitDefaultValue=false)]
        public List<long?> SelectedDocumentItemIds { get; set; }

        /// <summary>
        /// Required when DocumentSelectionType &#x3D; AllFromSearchContext
        /// </summary>
        /// <value>Required when DocumentSelectionType &#x3D; AllFromSearchContext</value>
        [DataMember(Name="searchJobId", EmitDefaultValue=false)]
        public long? SearchJobId { get; set; }

        /// <summary>
        /// Gets or Sets SearchCriteria
        /// </summary>
        [DataMember(Name="searchCriteria", EmitDefaultValue=false)]
        public BulkActionSearchCriteria SearchCriteria { get; set; }

        /// <summary>
        /// Gets or Sets DisplayOrderedFields
        /// </summary>
        [DataMember(Name="displayOrderedFields", EmitDefaultValue=false)]
        public List<ExportJobOrderedFieldItem> DisplayOrderedFields { get; set; }

        /// <summary>
        /// Gets or Sets SortOrderedFields
        /// </summary>
        [DataMember(Name="sortOrderedFields", EmitDefaultValue=false)]
        public List<ExportJobSortedFieldItem> SortOrderedFields { get; set; }

        /// <summary>
        /// Used in conjunction with InControl.RestAPI.V2.Models.Jobs.Export.ExportJobCreate.SortOrderedFields to order by document tags
        /// </summary>
        /// <value>Used in conjunction with InControl.RestAPI.V2.Models.Jobs.Export.ExportJobCreate.SortOrderedFields to order by document tags</value>
        [DataMember(Name="tagProfileId", EmitDefaultValue=false)]
        public int? TagProfileId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ImportProfileId
        /// </summary>
        [DataMember(Name="importProfileId", EmitDefaultValue=false)]
        public int? ImportProfileId { get; set; }

        /// <summary>
        /// Gets or Sets ImageSetId
        /// </summary>
        [DataMember(Name="imageSetId", EmitDefaultValue=false)]
        public int? ImageSetId { get; set; }


        /// <summary>
        /// Gets or Sets IncludeNativeFiles
        /// </summary>
        [DataMember(Name="includeNativeFiles", EmitDefaultValue=false)]
        public bool? IncludeNativeFiles { get; set; }


        /// <summary>
        /// Gets or Sets VolumePrefix
        /// </summary>
        [DataMember(Name="volumePrefix", EmitDefaultValue=false)]
        public string VolumePrefix { get; set; }

        /// <summary>
        /// Gets or Sets VolumeStartNumber
        /// </summary>
        [DataMember(Name="volumeStartNumber", EmitDefaultValue=false)]
        public int? VolumeStartNumber { get; set; }

        /// <summary>
        /// Gets or Sets VolumeNumberDigits
        /// </summary>
        [DataMember(Name="volumeNumberDigits", EmitDefaultValue=false)]
        public int? VolumeNumberDigits { get; set; }

        /// <summary>
        /// Gets or Sets VolumeMaxSize
        /// </summary>
        [DataMember(Name="volumeMaxSize", EmitDefaultValue=false)]
        public int? VolumeMaxSize { get; set; }


        /// <summary>
        /// Gets or Sets NativeFileFields
        /// </summary>
        [DataMember(Name="nativeFileFields", EmitDefaultValue=false)]
        public List<string> NativeFileFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExportJobCreate {\n");
            sb.Append("  DocumentSelectionType: ").Append(DocumentSelectionType).Append("\n");
            sb.Append("  SelectedDocumentItemIds: ").Append(SelectedDocumentItemIds).Append("\n");
            sb.Append("  SearchJobId: ").Append(SearchJobId).Append("\n");
            sb.Append("  SearchCriteria: ").Append(SearchCriteria).Append("\n");
            sb.Append("  DisplayOrderedFields: ").Append(DisplayOrderedFields).Append("\n");
            sb.Append("  SortOrderedFields: ").Append(SortOrderedFields).Append("\n");
            sb.Append("  TagProfileId: ").Append(TagProfileId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ImportProfileId: ").Append(ImportProfileId).Append("\n");
            sb.Append("  ImageSetId: ").Append(ImageSetId).Append("\n");
            sb.Append("  ExportAs: ").Append(ExportAs).Append("\n");
            sb.Append("  IncludeNativeFiles: ").Append(IncludeNativeFiles).Append("\n");
            sb.Append("  FileNamingType: ").Append(FileNamingType).Append("\n");
            sb.Append("  VolumePrefix: ").Append(VolumePrefix).Append("\n");
            sb.Append("  VolumeStartNumber: ").Append(VolumeStartNumber).Append("\n");
            sb.Append("  VolumeNumberDigits: ").Append(VolumeNumberDigits).Append("\n");
            sb.Append("  VolumeMaxSize: ").Append(VolumeMaxSize).Append("\n");
            sb.Append("  FileNameOrder: ").Append(FileNameOrder).Append("\n");
            sb.Append("  NativeFileFields: ").Append(NativeFileFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExportJobCreate);
        }

        /// <summary>
        /// Returns true if ExportJobCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of ExportJobCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportJobCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentSelectionType == input.DocumentSelectionType ||
                    (this.DocumentSelectionType != null &&
                    this.DocumentSelectionType.Equals(input.DocumentSelectionType))
                ) && 
                (
                    this.SelectedDocumentItemIds == input.SelectedDocumentItemIds ||
                    this.SelectedDocumentItemIds != null &&
                    this.SelectedDocumentItemIds.SequenceEqual(input.SelectedDocumentItemIds)
                ) && 
                (
                    this.SearchJobId == input.SearchJobId ||
                    (this.SearchJobId != null &&
                    this.SearchJobId.Equals(input.SearchJobId))
                ) && 
                (
                    this.SearchCriteria == input.SearchCriteria ||
                    (this.SearchCriteria != null &&
                    this.SearchCriteria.Equals(input.SearchCriteria))
                ) && 
                (
                    this.DisplayOrderedFields == input.DisplayOrderedFields ||
                    this.DisplayOrderedFields != null &&
                    this.DisplayOrderedFields.SequenceEqual(input.DisplayOrderedFields)
                ) && 
                (
                    this.SortOrderedFields == input.SortOrderedFields ||
                    this.SortOrderedFields != null &&
                    this.SortOrderedFields.SequenceEqual(input.SortOrderedFields)
                ) && 
                (
                    this.TagProfileId == input.TagProfileId ||
                    (this.TagProfileId != null &&
                    this.TagProfileId.Equals(input.TagProfileId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ImportProfileId == input.ImportProfileId ||
                    (this.ImportProfileId != null &&
                    this.ImportProfileId.Equals(input.ImportProfileId))
                ) && 
                (
                    this.ImageSetId == input.ImageSetId ||
                    (this.ImageSetId != null &&
                    this.ImageSetId.Equals(input.ImageSetId))
                ) && 
                (
                    this.ExportAs == input.ExportAs ||
                    (this.ExportAs != null &&
                    this.ExportAs.Equals(input.ExportAs))
                ) && 
                (
                    this.IncludeNativeFiles == input.IncludeNativeFiles ||
                    (this.IncludeNativeFiles != null &&
                    this.IncludeNativeFiles.Equals(input.IncludeNativeFiles))
                ) && 
                (
                    this.FileNamingType == input.FileNamingType ||
                    (this.FileNamingType != null &&
                    this.FileNamingType.Equals(input.FileNamingType))
                ) && 
                (
                    this.VolumePrefix == input.VolumePrefix ||
                    (this.VolumePrefix != null &&
                    this.VolumePrefix.Equals(input.VolumePrefix))
                ) && 
                (
                    this.VolumeStartNumber == input.VolumeStartNumber ||
                    (this.VolumeStartNumber != null &&
                    this.VolumeStartNumber.Equals(input.VolumeStartNumber))
                ) && 
                (
                    this.VolumeNumberDigits == input.VolumeNumberDigits ||
                    (this.VolumeNumberDigits != null &&
                    this.VolumeNumberDigits.Equals(input.VolumeNumberDigits))
                ) && 
                (
                    this.VolumeMaxSize == input.VolumeMaxSize ||
                    (this.VolumeMaxSize != null &&
                    this.VolumeMaxSize.Equals(input.VolumeMaxSize))
                ) && 
                (
                    this.FileNameOrder == input.FileNameOrder ||
                    (this.FileNameOrder != null &&
                    this.FileNameOrder.Equals(input.FileNameOrder))
                ) && 
                (
                    this.NativeFileFields == input.NativeFileFields ||
                    this.NativeFileFields != null &&
                    this.NativeFileFields.SequenceEqual(input.NativeFileFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentSelectionType != null)
                    hashCode = hashCode * 59 + this.DocumentSelectionType.GetHashCode();
                if (this.SelectedDocumentItemIds != null)
                    hashCode = hashCode * 59 + this.SelectedDocumentItemIds.GetHashCode();
                if (this.SearchJobId != null)
                    hashCode = hashCode * 59 + this.SearchJobId.GetHashCode();
                if (this.SearchCriteria != null)
                    hashCode = hashCode * 59 + this.SearchCriteria.GetHashCode();
                if (this.DisplayOrderedFields != null)
                    hashCode = hashCode * 59 + this.DisplayOrderedFields.GetHashCode();
                if (this.SortOrderedFields != null)
                    hashCode = hashCode * 59 + this.SortOrderedFields.GetHashCode();
                if (this.TagProfileId != null)
                    hashCode = hashCode * 59 + this.TagProfileId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ImportProfileId != null)
                    hashCode = hashCode * 59 + this.ImportProfileId.GetHashCode();
                if (this.ImageSetId != null)
                    hashCode = hashCode * 59 + this.ImageSetId.GetHashCode();
                if (this.ExportAs != null)
                    hashCode = hashCode * 59 + this.ExportAs.GetHashCode();
                if (this.IncludeNativeFiles != null)
                    hashCode = hashCode * 59 + this.IncludeNativeFiles.GetHashCode();
                if (this.FileNamingType != null)
                    hashCode = hashCode * 59 + this.FileNamingType.GetHashCode();
                if (this.VolumePrefix != null)
                    hashCode = hashCode * 59 + this.VolumePrefix.GetHashCode();
                if (this.VolumeStartNumber != null)
                    hashCode = hashCode * 59 + this.VolumeStartNumber.GetHashCode();
                if (this.VolumeNumberDigits != null)
                    hashCode = hashCode * 59 + this.VolumeNumberDigits.GetHashCode();
                if (this.VolumeMaxSize != null)
                    hashCode = hashCode * 59 + this.VolumeMaxSize.GetHashCode();
                if (this.FileNameOrder != null)
                    hashCode = hashCode * 59 + this.FileNameOrder.GetHashCode();
                if (this.NativeFileFields != null)
                    hashCode = hashCode * 59 + this.NativeFileFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ImportProfileId (int?) maximum
            if(this.ImportProfileId > (int?)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImportProfileId, must be a value less than or equal to 2147483647.", new [] { "ImportProfileId" });
            }

            // ImportProfileId (int?) minimum
            if(this.ImportProfileId < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImportProfileId, must be a value greater than or equal to 0.", new [] { "ImportProfileId" });
            }

            // VolumeStartNumber (int?) maximum
            if(this.VolumeStartNumber > (int?)32767)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VolumeStartNumber, must be a value less than or equal to 32767.", new [] { "VolumeStartNumber" });
            }

            // VolumeStartNumber (int?) minimum
            if(this.VolumeStartNumber < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VolumeStartNumber, must be a value greater than or equal to 1.", new [] { "VolumeStartNumber" });
            }

            // VolumeNumberDigits (int?) maximum
            if(this.VolumeNumberDigits > (int?)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VolumeNumberDigits, must be a value less than or equal to 2147483647.", new [] { "VolumeNumberDigits" });
            }

            // VolumeNumberDigits (int?) minimum
            if(this.VolumeNumberDigits < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VolumeNumberDigits, must be a value greater than or equal to 1.", new [] { "VolumeNumberDigits" });
            }

            // VolumeMaxSize (int?) maximum
            if(this.VolumeMaxSize > (int?)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VolumeMaxSize, must be a value less than or equal to 2147483647.", new [] { "VolumeMaxSize" });
            }

            // VolumeMaxSize (int?) minimum
            if(this.VolumeMaxSize < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VolumeMaxSize, must be a value greater than or equal to 1.", new [] { "VolumeMaxSize" });
            }

            yield break;
        }
    }

}
