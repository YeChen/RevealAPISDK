/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.Sdk.Client.SwaggerDateConverter;

namespace RevealAPI.Sdk.Models.Resources
{
    /// <summary>
    /// PrintJobCreate
    /// </summary>
    [DataContract]
    public partial class PrintJobCreate :  IEquatable<PrintJobCreate>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DocumentSelectionType
        /// </summary>
        [DataMember(Name="documentSelectionType", EmitDefaultValue=false)]
        public DocumentSelection? DocumentSelectionType { get; set; }
        /// <summary>
        /// Gets or Sets Orientation
        /// </summary>
        [DataMember(Name="orientation", EmitDefaultValue=false)]
        public PrintJobOrientation? Orientation { get; set; }
        /// <summary>
        /// Gets or Sets PrintFormat
        /// </summary>
        [DataMember(Name="printFormat", EmitDefaultValue=false)]
        public PrintPDFFormat? PrintFormat { get; set; }
        /// <summary>
        /// Gets or Sets FileNameOrder
        /// </summary>
        [DataMember(Name="fileNameOrder", EmitDefaultValue=false)]
        public FileOrderSetting? FileNameOrder { get; set; }
        /// <summary>
        /// Gets or Sets StampingChoice
        /// </summary>
        [DataMember(Name="stampingChoice", EmitDefaultValue=false)]
        public StampingChoice? StampingChoice { get; set; }
        /// <summary>
        /// Gets or Sets IncludeRedactions
        /// </summary>
        [DataMember(Name="includeRedactions", EmitDefaultValue=false)]
        public PrintIncludeRedactions? IncludeRedactions { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrintJobCreate" /> class.
        /// </summary>
        /// <param name="documentSelectionType">documentSelectionType.</param>
        /// <param name="selectedDocumentItemIds">Required when DocumentSelectionType &#x3D; Subset.</param>
        /// <param name="searchJobId">Required when DocumentSelectionType &#x3D; AllFromSearchContext.</param>
        /// <param name="searchCriteria">searchCriteria.</param>
        /// <param name="displayOrderedFields">displayOrderedFields.</param>
        /// <param name="sortOrderedFields">sortOrderedFields.</param>
        /// <param name="tagProfileId">tagProfileId.</param>
        /// <param name="name">name.</param>
        /// <param name="includeSlipsheet">includeSlipsheet.</param>
        /// <param name="includeTranscriptWordList">includeTranscriptWordList.</param>
        /// <param name="orientation">orientation.</param>
        /// <param name="printFormat">printFormat.</param>
        /// <param name="fileNameOrder">fileNameOrder.</param>
        /// <param name="imageSetId">imageSetId.</param>
        /// <param name="useOriginalImageIfMissing">useOriginalImageIfMissing.</param>
        /// <param name="colorDetectionSettings">colorDetectionSettings.</param>
        /// <param name="imagingTemplateId">imagingTemplateId.</param>
        /// <param name="searchablePDFs">searchablePDFs.</param>
        /// <param name="stampingChoice">stampingChoice.</param>
        /// <param name="stamping">stamping.</param>
        /// <param name="includeRedactions">includeRedactions.</param>
        /// <param name="annotationsToInclude">annotationsToInclude.</param>
        /// <param name="redactionsProfiles">redactionsProfiles.</param>
        public PrintJobCreate(DocumentSelection? documentSelectionType = default(DocumentSelection?), List<long?> selectedDocumentItemIds = default(List<long?>), long? searchJobId = default(long?), BulkActionSearchCriteria searchCriteria = default(BulkActionSearchCriteria), List<ExportJobOrderedFieldItem> displayOrderedFields = default(List<ExportJobOrderedFieldItem>), List<ExportJobSortedFieldItem> sortOrderedFields = default(List<ExportJobSortedFieldItem>), int? tagProfileId = default(int?), string name = default(string), bool? includeSlipsheet = default(bool?), bool? includeTranscriptWordList = default(bool?), PrintJobOrientation? orientation = default(PrintJobOrientation?), PrintPDFFormat? printFormat = default(PrintPDFFormat?), FileOrderSetting? fileNameOrder = default(FileOrderSetting?), int? imageSetId = default(int?), bool? useOriginalImageIfMissing = default(bool?), ColorDetectionSettings colorDetectionSettings = default(ColorDetectionSettings), int? imagingTemplateId = default(int?), bool? searchablePDFs = default(bool?), StampingChoice? stampingChoice = default(StampingChoice?), StampingSpec stamping = default(StampingSpec), PrintIncludeRedactions? includeRedactions = default(PrintIncludeRedactions?), List<AnnotationType> annotationsToInclude = default(List<AnnotationType>), List<int?> redactionsProfiles = default(List<int?>))
        {
            this.DocumentSelectionType = documentSelectionType;
            this.SelectedDocumentItemIds = selectedDocumentItemIds;
            this.SearchJobId = searchJobId;
            this.SearchCriteria = searchCriteria;
            this.DisplayOrderedFields = displayOrderedFields;
            this.SortOrderedFields = sortOrderedFields;
            this.TagProfileId = tagProfileId;
            this.Name = name;
            this.IncludeSlipsheet = includeSlipsheet;
            this.IncludeTranscriptWordList = includeTranscriptWordList;
            this.Orientation = orientation;
            this.PrintFormat = printFormat;
            this.FileNameOrder = fileNameOrder;
            this.ImageSetId = imageSetId;
            this.UseOriginalImageIfMissing = useOriginalImageIfMissing;
            this.ColorDetectionSettings = colorDetectionSettings;
            this.ImagingTemplateId = imagingTemplateId;
            this.SearchablePDFs = searchablePDFs;
            this.StampingChoice = stampingChoice;
            this.Stamping = stamping;
            this.IncludeRedactions = includeRedactions;
            this.AnnotationsToInclude = annotationsToInclude;
            this.RedactionsProfiles = redactionsProfiles;
        }
        

        /// <summary>
        /// Required when DocumentSelectionType &#x3D; Subset
        /// </summary>
        /// <value>Required when DocumentSelectionType &#x3D; Subset</value>
        [DataMember(Name="selectedDocumentItemIds", EmitDefaultValue=false)]
        public List<long?> SelectedDocumentItemIds { get; set; }

        /// <summary>
        /// Required when DocumentSelectionType &#x3D; AllFromSearchContext
        /// </summary>
        /// <value>Required when DocumentSelectionType &#x3D; AllFromSearchContext</value>
        [DataMember(Name="searchJobId", EmitDefaultValue=false)]
        public long? SearchJobId { get; set; }

        /// <summary>
        /// Gets or Sets SearchCriteria
        /// </summary>
        [DataMember(Name="searchCriteria", EmitDefaultValue=false)]
        public BulkActionSearchCriteria SearchCriteria { get; set; }

        /// <summary>
        /// Gets or Sets DisplayOrderedFields
        /// </summary>
        [DataMember(Name="displayOrderedFields", EmitDefaultValue=false)]
        public List<ExportJobOrderedFieldItem> DisplayOrderedFields { get; set; }

        /// <summary>
        /// Gets or Sets SortOrderedFields
        /// </summary>
        [DataMember(Name="sortOrderedFields", EmitDefaultValue=false)]
        public List<ExportJobSortedFieldItem> SortOrderedFields { get; set; }

        /// <summary>
        /// Gets or Sets TagProfileId
        /// </summary>
        [DataMember(Name="tagProfileId", EmitDefaultValue=false)]
        public int? TagProfileId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IncludeSlipsheet
        /// </summary>
        [DataMember(Name="includeSlipsheet", EmitDefaultValue=false)]
        public bool? IncludeSlipsheet { get; set; }

        /// <summary>
        /// Gets or Sets IncludeTranscriptWordList
        /// </summary>
        [DataMember(Name="includeTranscriptWordList", EmitDefaultValue=false)]
        public bool? IncludeTranscriptWordList { get; set; }




        /// <summary>
        /// Gets or Sets ImageSetId
        /// </summary>
        [DataMember(Name="imageSetId", EmitDefaultValue=false)]
        public int? ImageSetId { get; set; }

        /// <summary>
        /// Gets or Sets UseOriginalImageIfMissing
        /// </summary>
        [DataMember(Name="useOriginalImageIfMissing", EmitDefaultValue=false)]
        public bool? UseOriginalImageIfMissing { get; set; }

        /// <summary>
        /// Gets or Sets ColorDetectionSettings
        /// </summary>
        [DataMember(Name="colorDetectionSettings", EmitDefaultValue=false)]
        public ColorDetectionSettings ColorDetectionSettings { get; set; }

        /// <summary>
        /// Gets or Sets ImagingTemplateId
        /// </summary>
        [DataMember(Name="imagingTemplateId", EmitDefaultValue=false)]
        public int? ImagingTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets SearchablePDFs
        /// </summary>
        [DataMember(Name="searchablePDFs", EmitDefaultValue=false)]
        public bool? SearchablePDFs { get; set; }


        /// <summary>
        /// Gets or Sets Stamping
        /// </summary>
        [DataMember(Name="stamping", EmitDefaultValue=false)]
        public StampingSpec Stamping { get; set; }


        /// <summary>
        /// Gets or Sets AnnotationsToInclude
        /// </summary>
        [DataMember(Name="annotationsToInclude", EmitDefaultValue=false)]
        public List<AnnotationType> AnnotationsToInclude { get; set; }

        /// <summary>
        /// Gets or Sets RedactionsProfiles
        /// </summary>
        [DataMember(Name="redactionsProfiles", EmitDefaultValue=false)]
        public List<int?> RedactionsProfiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrintJobCreate {\n");
            sb.Append("  DocumentSelectionType: ").Append(DocumentSelectionType).Append("\n");
            sb.Append("  SelectedDocumentItemIds: ").Append(SelectedDocumentItemIds).Append("\n");
            sb.Append("  SearchJobId: ").Append(SearchJobId).Append("\n");
            sb.Append("  SearchCriteria: ").Append(SearchCriteria).Append("\n");
            sb.Append("  DisplayOrderedFields: ").Append(DisplayOrderedFields).Append("\n");
            sb.Append("  SortOrderedFields: ").Append(SortOrderedFields).Append("\n");
            sb.Append("  TagProfileId: ").Append(TagProfileId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IncludeSlipsheet: ").Append(IncludeSlipsheet).Append("\n");
            sb.Append("  IncludeTranscriptWordList: ").Append(IncludeTranscriptWordList).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  PrintFormat: ").Append(PrintFormat).Append("\n");
            sb.Append("  FileNameOrder: ").Append(FileNameOrder).Append("\n");
            sb.Append("  ImageSetId: ").Append(ImageSetId).Append("\n");
            sb.Append("  UseOriginalImageIfMissing: ").Append(UseOriginalImageIfMissing).Append("\n");
            sb.Append("  ColorDetectionSettings: ").Append(ColorDetectionSettings).Append("\n");
            sb.Append("  ImagingTemplateId: ").Append(ImagingTemplateId).Append("\n");
            sb.Append("  SearchablePDFs: ").Append(SearchablePDFs).Append("\n");
            sb.Append("  StampingChoice: ").Append(StampingChoice).Append("\n");
            sb.Append("  Stamping: ").Append(Stamping).Append("\n");
            sb.Append("  IncludeRedactions: ").Append(IncludeRedactions).Append("\n");
            sb.Append("  AnnotationsToInclude: ").Append(AnnotationsToInclude).Append("\n");
            sb.Append("  RedactionsProfiles: ").Append(RedactionsProfiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrintJobCreate);
        }

        /// <summary>
        /// Returns true if PrintJobCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of PrintJobCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrintJobCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentSelectionType == input.DocumentSelectionType ||
                    (this.DocumentSelectionType != null &&
                    this.DocumentSelectionType.Equals(input.DocumentSelectionType))
                ) && 
                (
                    this.SelectedDocumentItemIds == input.SelectedDocumentItemIds ||
                    this.SelectedDocumentItemIds != null &&
                    this.SelectedDocumentItemIds.SequenceEqual(input.SelectedDocumentItemIds)
                ) && 
                (
                    this.SearchJobId == input.SearchJobId ||
                    (this.SearchJobId != null &&
                    this.SearchJobId.Equals(input.SearchJobId))
                ) && 
                (
                    this.SearchCriteria == input.SearchCriteria ||
                    (this.SearchCriteria != null &&
                    this.SearchCriteria.Equals(input.SearchCriteria))
                ) && 
                (
                    this.DisplayOrderedFields == input.DisplayOrderedFields ||
                    this.DisplayOrderedFields != null &&
                    this.DisplayOrderedFields.SequenceEqual(input.DisplayOrderedFields)
                ) && 
                (
                    this.SortOrderedFields == input.SortOrderedFields ||
                    this.SortOrderedFields != null &&
                    this.SortOrderedFields.SequenceEqual(input.SortOrderedFields)
                ) && 
                (
                    this.TagProfileId == input.TagProfileId ||
                    (this.TagProfileId != null &&
                    this.TagProfileId.Equals(input.TagProfileId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IncludeSlipsheet == input.IncludeSlipsheet ||
                    (this.IncludeSlipsheet != null &&
                    this.IncludeSlipsheet.Equals(input.IncludeSlipsheet))
                ) && 
                (
                    this.IncludeTranscriptWordList == input.IncludeTranscriptWordList ||
                    (this.IncludeTranscriptWordList != null &&
                    this.IncludeTranscriptWordList.Equals(input.IncludeTranscriptWordList))
                ) && 
                (
                    this.Orientation == input.Orientation ||
                    (this.Orientation != null &&
                    this.Orientation.Equals(input.Orientation))
                ) && 
                (
                    this.PrintFormat == input.PrintFormat ||
                    (this.PrintFormat != null &&
                    this.PrintFormat.Equals(input.PrintFormat))
                ) && 
                (
                    this.FileNameOrder == input.FileNameOrder ||
                    (this.FileNameOrder != null &&
                    this.FileNameOrder.Equals(input.FileNameOrder))
                ) && 
                (
                    this.ImageSetId == input.ImageSetId ||
                    (this.ImageSetId != null &&
                    this.ImageSetId.Equals(input.ImageSetId))
                ) && 
                (
                    this.UseOriginalImageIfMissing == input.UseOriginalImageIfMissing ||
                    (this.UseOriginalImageIfMissing != null &&
                    this.UseOriginalImageIfMissing.Equals(input.UseOriginalImageIfMissing))
                ) && 
                (
                    this.ColorDetectionSettings == input.ColorDetectionSettings ||
                    (this.ColorDetectionSettings != null &&
                    this.ColorDetectionSettings.Equals(input.ColorDetectionSettings))
                ) && 
                (
                    this.ImagingTemplateId == input.ImagingTemplateId ||
                    (this.ImagingTemplateId != null &&
                    this.ImagingTemplateId.Equals(input.ImagingTemplateId))
                ) && 
                (
                    this.SearchablePDFs == input.SearchablePDFs ||
                    (this.SearchablePDFs != null &&
                    this.SearchablePDFs.Equals(input.SearchablePDFs))
                ) && 
                (
                    this.StampingChoice == input.StampingChoice ||
                    (this.StampingChoice != null &&
                    this.StampingChoice.Equals(input.StampingChoice))
                ) && 
                (
                    this.Stamping == input.Stamping ||
                    (this.Stamping != null &&
                    this.Stamping.Equals(input.Stamping))
                ) && 
                (
                    this.IncludeRedactions == input.IncludeRedactions ||
                    (this.IncludeRedactions != null &&
                    this.IncludeRedactions.Equals(input.IncludeRedactions))
                ) && 
                (
                    this.AnnotationsToInclude == input.AnnotationsToInclude ||
                    this.AnnotationsToInclude != null &&
                    this.AnnotationsToInclude.SequenceEqual(input.AnnotationsToInclude)
                ) && 
                (
                    this.RedactionsProfiles == input.RedactionsProfiles ||
                    this.RedactionsProfiles != null &&
                    this.RedactionsProfiles.SequenceEqual(input.RedactionsProfiles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentSelectionType != null)
                    hashCode = hashCode * 59 + this.DocumentSelectionType.GetHashCode();
                if (this.SelectedDocumentItemIds != null)
                    hashCode = hashCode * 59 + this.SelectedDocumentItemIds.GetHashCode();
                if (this.SearchJobId != null)
                    hashCode = hashCode * 59 + this.SearchJobId.GetHashCode();
                if (this.SearchCriteria != null)
                    hashCode = hashCode * 59 + this.SearchCriteria.GetHashCode();
                if (this.DisplayOrderedFields != null)
                    hashCode = hashCode * 59 + this.DisplayOrderedFields.GetHashCode();
                if (this.SortOrderedFields != null)
                    hashCode = hashCode * 59 + this.SortOrderedFields.GetHashCode();
                if (this.TagProfileId != null)
                    hashCode = hashCode * 59 + this.TagProfileId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.IncludeSlipsheet != null)
                    hashCode = hashCode * 59 + this.IncludeSlipsheet.GetHashCode();
                if (this.IncludeTranscriptWordList != null)
                    hashCode = hashCode * 59 + this.IncludeTranscriptWordList.GetHashCode();
                if (this.Orientation != null)
                    hashCode = hashCode * 59 + this.Orientation.GetHashCode();
                if (this.PrintFormat != null)
                    hashCode = hashCode * 59 + this.PrintFormat.GetHashCode();
                if (this.FileNameOrder != null)
                    hashCode = hashCode * 59 + this.FileNameOrder.GetHashCode();
                if (this.ImageSetId != null)
                    hashCode = hashCode * 59 + this.ImageSetId.GetHashCode();
                if (this.UseOriginalImageIfMissing != null)
                    hashCode = hashCode * 59 + this.UseOriginalImageIfMissing.GetHashCode();
                if (this.ColorDetectionSettings != null)
                    hashCode = hashCode * 59 + this.ColorDetectionSettings.GetHashCode();
                if (this.ImagingTemplateId != null)
                    hashCode = hashCode * 59 + this.ImagingTemplateId.GetHashCode();
                if (this.SearchablePDFs != null)
                    hashCode = hashCode * 59 + this.SearchablePDFs.GetHashCode();
                if (this.StampingChoice != null)
                    hashCode = hashCode * 59 + this.StampingChoice.GetHashCode();
                if (this.Stamping != null)
                    hashCode = hashCode * 59 + this.Stamping.GetHashCode();
                if (this.IncludeRedactions != null)
                    hashCode = hashCode * 59 + this.IncludeRedactions.GetHashCode();
                if (this.AnnotationsToInclude != null)
                    hashCode = hashCode * 59 + this.AnnotationsToInclude.GetHashCode();
                if (this.RedactionsProfiles != null)
                    hashCode = hashCode * 59 + this.RedactionsProfiles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
