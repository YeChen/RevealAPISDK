/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.Sdk.Client.SwaggerDateConverter;

namespace RevealAPI.Sdk.Models.Resources
{
    /// <summary>
    /// DocumentQuery
    /// </summary>
    [DataContract]
    public partial class DocumentQuery :  IEquatable<DocumentQuery>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets QueryType
        /// </summary>
        [DataMember(Name="queryType", EmitDefaultValue=false)]
        public QueryType? QueryType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentQuery" /> class.
        /// </summary>
        /// <param name="start">start.</param>
        /// <param name="count">count.</param>
        /// <param name="documentLevelSecurityUser">documentLevelSecurityUser.</param>
        /// <param name="tagProfileId">tagProfileId.</param>
        /// <param name="getItemIdsOnly">getItemIdsOnly.</param>
        /// <param name="sort">sort.</param>
        /// <param name="metadataFieldFilter">metadataFieldFilter.</param>
        /// <param name="queryType">queryType.</param>
        /// <param name="searchJobQuery">searchJobQuery.</param>
        public DocumentQuery(int? start = default(int?), int? count = default(int?), int? documentLevelSecurityUser = default(int?), int? tagProfileId = default(int?), bool? getItemIdsOnly = default(bool?), string sort = default(string), List<MetadataFieldFilter> metadataFieldFilter = default(List<MetadataFieldFilter>), QueryType? queryType = default(QueryType?), SearchJobQuery searchJobQuery = default(SearchJobQuery))
        {
            this.Start = start;
            this.Count = count;
            this.DocumentLevelSecurityUser = documentLevelSecurityUser;
            this.TagProfileId = tagProfileId;
            this.GetItemIdsOnly = getItemIdsOnly;
            this.Sort = sort;
            this.MetadataFieldFilter = metadataFieldFilter;
            this.QueryType = queryType;
            this.SearchJobQuery = searchJobQuery;
        }
        
        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public int? Start { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }

        /// <summary>
        /// Gets or Sets DocumentLevelSecurityUser
        /// </summary>
        [DataMember(Name="documentLevelSecurityUser", EmitDefaultValue=false)]
        public int? DocumentLevelSecurityUser { get; set; }

        /// <summary>
        /// Gets or Sets TagProfileId
        /// </summary>
        [DataMember(Name="tagProfileId", EmitDefaultValue=false)]
        public int? TagProfileId { get; set; }

        /// <summary>
        /// Gets or Sets GetItemIdsOnly
        /// </summary>
        [DataMember(Name="getItemIdsOnly", EmitDefaultValue=false)]
        public bool? GetItemIdsOnly { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public string Sort { get; set; }

        /// <summary>
        /// Gets or Sets MetadataFieldFilter
        /// </summary>
        [DataMember(Name="metadataFieldFilter", EmitDefaultValue=false)]
        public List<MetadataFieldFilter> MetadataFieldFilter { get; set; }


        /// <summary>
        /// Gets or Sets SearchJobQuery
        /// </summary>
        [DataMember(Name="searchJobQuery", EmitDefaultValue=false)]
        public SearchJobQuery SearchJobQuery { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentQuery {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  DocumentLevelSecurityUser: ").Append(DocumentLevelSecurityUser).Append("\n");
            sb.Append("  TagProfileId: ").Append(TagProfileId).Append("\n");
            sb.Append("  GetItemIdsOnly: ").Append(GetItemIdsOnly).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  MetadataFieldFilter: ").Append(MetadataFieldFilter).Append("\n");
            sb.Append("  QueryType: ").Append(QueryType).Append("\n");
            sb.Append("  SearchJobQuery: ").Append(SearchJobQuery).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentQuery);
        }

        /// <summary>
        /// Returns true if DocumentQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentQuery input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.DocumentLevelSecurityUser == input.DocumentLevelSecurityUser ||
                    (this.DocumentLevelSecurityUser != null &&
                    this.DocumentLevelSecurityUser.Equals(input.DocumentLevelSecurityUser))
                ) && 
                (
                    this.TagProfileId == input.TagProfileId ||
                    (this.TagProfileId != null &&
                    this.TagProfileId.Equals(input.TagProfileId))
                ) && 
                (
                    this.GetItemIdsOnly == input.GetItemIdsOnly ||
                    (this.GetItemIdsOnly != null &&
                    this.GetItemIdsOnly.Equals(input.GetItemIdsOnly))
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.MetadataFieldFilter == input.MetadataFieldFilter ||
                    this.MetadataFieldFilter != null &&
                    this.MetadataFieldFilter.SequenceEqual(input.MetadataFieldFilter)
                ) && 
                (
                    this.QueryType == input.QueryType ||
                    (this.QueryType != null &&
                    this.QueryType.Equals(input.QueryType))
                ) && 
                (
                    this.SearchJobQuery == input.SearchJobQuery ||
                    (this.SearchJobQuery != null &&
                    this.SearchJobQuery.Equals(input.SearchJobQuery))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.DocumentLevelSecurityUser != null)
                    hashCode = hashCode * 59 + this.DocumentLevelSecurityUser.GetHashCode();
                if (this.TagProfileId != null)
                    hashCode = hashCode * 59 + this.TagProfileId.GetHashCode();
                if (this.GetItemIdsOnly != null)
                    hashCode = hashCode * 59 + this.GetItemIdsOnly.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                if (this.MetadataFieldFilter != null)
                    hashCode = hashCode * 59 + this.MetadataFieldFilter.GetHashCode();
                if (this.QueryType != null)
                    hashCode = hashCode * 59 + this.QueryType.GetHashCode();
                if (this.SearchJobQuery != null)
                    hashCode = hashCode * 59 + this.SearchJobQuery.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Start (int?) maximum
            if(this.Start > (int?)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Start, must be a value less than or equal to 2147483647.", new [] { "Start" });
            }

            // Start (int?) minimum
            if(this.Start < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Start, must be a value greater than or equal to 0.", new [] { "Start" });
            }

            // Count (int?) maximum
            if(this.Count > (int?)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Count, must be a value less than or equal to 2147483647.", new [] { "Count" });
            }

            // Count (int?) minimum
            if(this.Count < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Count, must be a value greater than or equal to 1.", new [] { "Count" });
            }

            // TagProfileId (int?) maximum
            if(this.TagProfileId > (int?)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TagProfileId, must be a value less than or equal to 2147483647.", new [] { "TagProfileId" });
            }

            // TagProfileId (int?) minimum
            if(this.TagProfileId < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TagProfileId, must be a value greater than or equal to 0.", new [] { "TagProfileId" });
            }

            yield break;
        }
    }

}
