/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.Sdk.Client.SwaggerDateConverter;

namespace RevealAPI.Sdk.Models.Resources
{
    /// <summary>
    /// MemberStatus
    /// </summary>
    [DataContract]
    public partial class MemberStatus :  IEquatable<MemberStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberStatus" /> class.
        /// </summary>
        /// <param name="userId">userId.</param>
        /// <param name="isAddedRemoved">isAddedRemoved.</param>
        public MemberStatus(int? userId = default(int?), bool? isAddedRemoved = default(bool?))
        {
            this.UserId = userId;
            this.IsAddedRemoved = isAddedRemoved;
        }
        
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or Sets IsAddedRemoved
        /// </summary>
        [DataMember(Name="isAddedRemoved", EmitDefaultValue=false)]
        public bool? IsAddedRemoved { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MemberStatus {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  IsAddedRemoved: ").Append(IsAddedRemoved).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MemberStatus);
        }

        /// <summary>
        /// Returns true if MemberStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of MemberStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MemberStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.IsAddedRemoved == input.IsAddedRemoved ||
                    (this.IsAddedRemoved != null &&
                    this.IsAddedRemoved.Equals(input.IsAddedRemoved))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.IsAddedRemoved != null)
                    hashCode = hashCode * 59 + this.IsAddedRemoved.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
