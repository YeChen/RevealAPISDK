/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using RevealAPI.Sdk.Client;
using RevealAPI.Sdk.Models.Resources;

namespace RevealAPI.Sdk.Api.Resources
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersassignmentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void AssignmentFoldersV2Delete (int? caseId, List<int?> body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssignmentFoldersV2DeleteWithHttpInfo (int? caseId, List<int?> body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        void AssignmentFoldersV2DeleteSingle (int? caseId, int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssignmentFoldersV2DeleteSingleWithHttpInfo (int? caseId, int? id);
        /// <summary>
        /// Get assignment batch folders  filters available:  1) Title - IS_LIKE / IS_NOT_LIKE  2) Date - GREATER_THAN_OR_EQAUL_TO / LESS_THAN_OR_EQUAL_TO  3) Reviews - GREATER_THAN_OR_EQAUL_TO / LESS_THAN_OR_EQUAL_TO
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="filterOption"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <param name="body">Run with one filter with filterType error to run original batch call (optional)</param>
        /// <returns>PaginatedOfIEnumerableOfAssignmentBatchFolder</returns>
        PaginatedOfIEnumerableOfAssignmentBatchFolder AssignmentFoldersV2Get (int? caseId, Object filterOption = null, int? start = null, int? count = null, AssignmentBatchQuery body = null);

        /// <summary>
        /// Get assignment batch folders  filters available:  1) Title - IS_LIKE / IS_NOT_LIKE  2) Date - GREATER_THAN_OR_EQAUL_TO / LESS_THAN_OR_EQUAL_TO  3) Reviews - GREATER_THAN_OR_EQAUL_TO / LESS_THAN_OR_EQUAL_TO
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="filterOption"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <param name="body">Run with one filter with filterType error to run original batch call (optional)</param>
        /// <returns>ApiResponse of PaginatedOfIEnumerableOfAssignmentBatchFolder</returns>
        ApiResponse<PaginatedOfIEnumerableOfAssignmentBatchFolder> AssignmentFoldersV2GetWithHttpInfo (int? caseId, Object filterOption = null, int? start = null, int? count = null, AssignmentBatchQuery body = null);
        /// <summary>
        /// Get assignment folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="userId">User to get assignment folders for (optional)</param>
        /// <param name="getWithDetails">Return reviewed count information (optional, default to false)</param>
        /// <param name="uniqueId"> (optional)</param>
        /// <returns>List&lt;FolderItem&gt;</returns>
        List<FolderItem> AssignmentFoldersV2GetAssignmentFolders (int? caseId, int? folderId, int? userId = null, bool? getWithDetails = null, string uniqueId = null);

        /// <summary>
        /// Get assignment folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="userId">User to get assignment folders for (optional)</param>
        /// <param name="getWithDetails">Return reviewed count information (optional, default to false)</param>
        /// <param name="uniqueId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;FolderItem&gt;</returns>
        ApiResponse<List<FolderItem>> AssignmentFoldersV2GetAssignmentFoldersWithHttpInfo (int? caseId, int? folderId, int? userId = null, bool? getWithDetails = null, string uniqueId = null);
        /// <summary>
        /// Get top level assignment folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="start">0 based first record to return (optional)</param>
        /// <param name="count">number of records to return (optional)</param>
        /// <param name="filter">part of folder name (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> AssignmentFoldersV2GetTopLevelAssignmentFolders (int? caseId, int? start = null, int? count = null, string filter = null);

        /// <summary>
        /// Get top level assignment folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="start">0 based first record to return (optional)</param>
        /// <param name="count">number of records to return (optional)</param>
        /// <param name="filter">part of folder name (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> AssignmentFoldersV2GetTopLevelAssignmentFoldersWithHttpInfo (int? caseId, int? start = null, int? count = null, string filter = null);
        /// <summary>
        /// Assign, unassign, or complete assignment batches in bulk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void AssignmentFoldersV2UpadateUserAssignment (int? caseId, AssignmentBatchFoldersAssignment body = null);

        /// <summary>
        /// Assign, unassign, or complete assignment batches in bulk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssignmentFoldersV2UpadateUserAssignmentWithHttpInfo (int? caseId, AssignmentBatchFoldersAssignment body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssignmentFoldersV2DeleteAsync (int? caseId, List<int?> body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssignmentFoldersV2DeleteAsyncWithHttpInfo (int? caseId, List<int?> body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssignmentFoldersV2DeleteSingleAsync (int? caseId, int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssignmentFoldersV2DeleteSingleAsyncWithHttpInfo (int? caseId, int? id);
        /// <summary>
        /// Get assignment batch folders  filters available:  1) Title - IS_LIKE / IS_NOT_LIKE  2) Date - GREATER_THAN_OR_EQAUL_TO / LESS_THAN_OR_EQUAL_TO  3) Reviews - GREATER_THAN_OR_EQAUL_TO / LESS_THAN_OR_EQUAL_TO
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="filterOption"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <param name="body">Run with one filter with filterType error to run original batch call (optional)</param>
        /// <returns>Task of PaginatedOfIEnumerableOfAssignmentBatchFolder</returns>
        System.Threading.Tasks.Task<PaginatedOfIEnumerableOfAssignmentBatchFolder> AssignmentFoldersV2GetAsync (int? caseId, Object filterOption = null, int? start = null, int? count = null, AssignmentBatchQuery body = null);

        /// <summary>
        /// Get assignment batch folders  filters available:  1) Title - IS_LIKE / IS_NOT_LIKE  2) Date - GREATER_THAN_OR_EQAUL_TO / LESS_THAN_OR_EQUAL_TO  3) Reviews - GREATER_THAN_OR_EQAUL_TO / LESS_THAN_OR_EQUAL_TO
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="filterOption"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <param name="body">Run with one filter with filterType error to run original batch call (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedOfIEnumerableOfAssignmentBatchFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedOfIEnumerableOfAssignmentBatchFolder>> AssignmentFoldersV2GetAsyncWithHttpInfo (int? caseId, Object filterOption = null, int? start = null, int? count = null, AssignmentBatchQuery body = null);
        /// <summary>
        /// Get assignment folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="userId">User to get assignment folders for (optional)</param>
        /// <param name="getWithDetails">Return reviewed count information (optional, default to false)</param>
        /// <param name="uniqueId"> (optional)</param>
        /// <returns>Task of List&lt;FolderItem&gt;</returns>
        System.Threading.Tasks.Task<List<FolderItem>> AssignmentFoldersV2GetAssignmentFoldersAsync (int? caseId, int? folderId, int? userId = null, bool? getWithDetails = null, string uniqueId = null);

        /// <summary>
        /// Get assignment folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="userId">User to get assignment folders for (optional)</param>
        /// <param name="getWithDetails">Return reviewed count information (optional, default to false)</param>
        /// <param name="uniqueId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FolderItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FolderItem>>> AssignmentFoldersV2GetAssignmentFoldersAsyncWithHttpInfo (int? caseId, int? folderId, int? userId = null, bool? getWithDetails = null, string uniqueId = null);
        /// <summary>
        /// Get top level assignment folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="start">0 based first record to return (optional)</param>
        /// <param name="count">number of records to return (optional)</param>
        /// <param name="filter">part of folder name (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> AssignmentFoldersV2GetTopLevelAssignmentFoldersAsync (int? caseId, int? start = null, int? count = null, string filter = null);

        /// <summary>
        /// Get top level assignment folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="start">0 based first record to return (optional)</param>
        /// <param name="count">number of records to return (optional)</param>
        /// <param name="filter">part of folder name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> AssignmentFoldersV2GetTopLevelAssignmentFoldersAsyncWithHttpInfo (int? caseId, int? start = null, int? count = null, string filter = null);
        /// <summary>
        /// Assign, unassign, or complete assignment batches in bulk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssignmentFoldersV2UpadateUserAssignmentAsync (int? caseId, AssignmentBatchFoldersAssignment body = null);

        /// <summary>
        /// Assign, unassign, or complete assignment batches in bulk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssignmentFoldersV2UpadateUserAssignmentAsyncWithHttpInfo (int? caseId, AssignmentBatchFoldersAssignment body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FoldersassignmentApi : IFoldersassignmentApi
    {
        private RevealAPI.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersassignmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersassignmentApi(String basePath)
        {
            this.Configuration = new RevealAPI.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RevealAPI.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersassignmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FoldersassignmentApi(RevealAPI.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RevealAPI.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RevealAPI.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RevealAPI.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RevealAPI.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void AssignmentFoldersV2Delete (int? caseId, List<int?> body = null)
        {
             AssignmentFoldersV2DeleteWithHttpInfo(caseId, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssignmentFoldersV2DeleteWithHttpInfo (int? caseId, List<int?> body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersassignmentApi->AssignmentFoldersV2Delete");

            var localVarPath = "/api/v2/{caseId}/folders/assignment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", this.Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignmentFoldersV2Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssignmentFoldersV2DeleteAsync (int? caseId, List<int?> body = null)
        {
             await AssignmentFoldersV2DeleteAsyncWithHttpInfo(caseId, body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssignmentFoldersV2DeleteAsyncWithHttpInfo (int? caseId, List<int?> body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersassignmentApi->AssignmentFoldersV2Delete");

            var localVarPath = "/api/v2/{caseId}/folders/assignment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", this.Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignmentFoldersV2Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void AssignmentFoldersV2DeleteSingle (int? caseId, int? id)
        {
             AssignmentFoldersV2DeleteSingleWithHttpInfo(caseId, id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssignmentFoldersV2DeleteSingleWithHttpInfo (int? caseId, int? id)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersassignmentApi->AssignmentFoldersV2DeleteSingle");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersassignmentApi->AssignmentFoldersV2DeleteSingle");

            var localVarPath = "/api/v2/{caseId}/folders/assignment/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", this.Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignmentFoldersV2DeleteSingle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssignmentFoldersV2DeleteSingleAsync (int? caseId, int? id)
        {
             await AssignmentFoldersV2DeleteSingleAsyncWithHttpInfo(caseId, id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssignmentFoldersV2DeleteSingleAsyncWithHttpInfo (int? caseId, int? id)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersassignmentApi->AssignmentFoldersV2DeleteSingle");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersassignmentApi->AssignmentFoldersV2DeleteSingle");

            var localVarPath = "/api/v2/{caseId}/folders/assignment/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", this.Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignmentFoldersV2DeleteSingle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get assignment batch folders  filters available:  1) Title - IS_LIKE / IS_NOT_LIKE  2) Date - GREATER_THAN_OR_EQAUL_TO / LESS_THAN_OR_EQUAL_TO  3) Reviews - GREATER_THAN_OR_EQAUL_TO / LESS_THAN_OR_EQUAL_TO 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="filterOption"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <param name="body">Run with one filter with filterType error to run original batch call (optional)</param>
        /// <returns>PaginatedOfIEnumerableOfAssignmentBatchFolder</returns>
        public PaginatedOfIEnumerableOfAssignmentBatchFolder AssignmentFoldersV2Get (int? caseId, Object filterOption = null, int? start = null, int? count = null, AssignmentBatchQuery body = null)
        {
             ApiResponse<PaginatedOfIEnumerableOfAssignmentBatchFolder> localVarResponse = AssignmentFoldersV2GetWithHttpInfo(caseId, filterOption, start, count, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get assignment batch folders  filters available:  1) Title - IS_LIKE / IS_NOT_LIKE  2) Date - GREATER_THAN_OR_EQAUL_TO / LESS_THAN_OR_EQUAL_TO  3) Reviews - GREATER_THAN_OR_EQAUL_TO / LESS_THAN_OR_EQUAL_TO 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="filterOption"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <param name="body">Run with one filter with filterType error to run original batch call (optional)</param>
        /// <returns>ApiResponse of PaginatedOfIEnumerableOfAssignmentBatchFolder</returns>
        public ApiResponse< PaginatedOfIEnumerableOfAssignmentBatchFolder > AssignmentFoldersV2GetWithHttpInfo (int? caseId, Object filterOption = null, int? start = null, int? count = null, AssignmentBatchQuery body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersassignmentApi->AssignmentFoldersV2Get");

            var localVarPath = "/api/v2/{caseId}/folders/assignment/batches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", this.Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (filterOption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterOption", filterOption)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignmentFoldersV2Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedOfIEnumerableOfAssignmentBatchFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaginatedOfIEnumerableOfAssignmentBatchFolder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedOfIEnumerableOfAssignmentBatchFolder)));
        }

        /// <summary>
        /// Get assignment batch folders  filters available:  1) Title - IS_LIKE / IS_NOT_LIKE  2) Date - GREATER_THAN_OR_EQAUL_TO / LESS_THAN_OR_EQUAL_TO  3) Reviews - GREATER_THAN_OR_EQAUL_TO / LESS_THAN_OR_EQUAL_TO 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="filterOption"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <param name="body">Run with one filter with filterType error to run original batch call (optional)</param>
        /// <returns>Task of PaginatedOfIEnumerableOfAssignmentBatchFolder</returns>
        public async System.Threading.Tasks.Task<PaginatedOfIEnumerableOfAssignmentBatchFolder> AssignmentFoldersV2GetAsync (int? caseId, Object filterOption = null, int? start = null, int? count = null, AssignmentBatchQuery body = null)
        {
             ApiResponse<PaginatedOfIEnumerableOfAssignmentBatchFolder> localVarResponse = await AssignmentFoldersV2GetAsyncWithHttpInfo(caseId, filterOption, start, count, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get assignment batch folders  filters available:  1) Title - IS_LIKE / IS_NOT_LIKE  2) Date - GREATER_THAN_OR_EQAUL_TO / LESS_THAN_OR_EQUAL_TO  3) Reviews - GREATER_THAN_OR_EQAUL_TO / LESS_THAN_OR_EQUAL_TO 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="filterOption"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <param name="body">Run with one filter with filterType error to run original batch call (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedOfIEnumerableOfAssignmentBatchFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaginatedOfIEnumerableOfAssignmentBatchFolder>> AssignmentFoldersV2GetAsyncWithHttpInfo (int? caseId, Object filterOption = null, int? start = null, int? count = null, AssignmentBatchQuery body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersassignmentApi->AssignmentFoldersV2Get");

            var localVarPath = "/api/v2/{caseId}/folders/assignment/batches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", this.Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (filterOption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterOption", filterOption)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignmentFoldersV2Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedOfIEnumerableOfAssignmentBatchFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaginatedOfIEnumerableOfAssignmentBatchFolder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedOfIEnumerableOfAssignmentBatchFolder)));
        }

        /// <summary>
        /// Get assignment folders 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="userId">User to get assignment folders for (optional)</param>
        /// <param name="getWithDetails">Return reviewed count information (optional, default to false)</param>
        /// <param name="uniqueId"> (optional)</param>
        /// <returns>List&lt;FolderItem&gt;</returns>
        public List<FolderItem> AssignmentFoldersV2GetAssignmentFolders (int? caseId, int? folderId, int? userId = null, bool? getWithDetails = null, string uniqueId = null)
        {
             ApiResponse<List<FolderItem>> localVarResponse = AssignmentFoldersV2GetAssignmentFoldersWithHttpInfo(caseId, folderId, userId, getWithDetails, uniqueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get assignment folders 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="userId">User to get assignment folders for (optional)</param>
        /// <param name="getWithDetails">Return reviewed count information (optional, default to false)</param>
        /// <param name="uniqueId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;FolderItem&gt;</returns>
        public ApiResponse< List<FolderItem> > AssignmentFoldersV2GetAssignmentFoldersWithHttpInfo (int? caseId, int? folderId, int? userId = null, bool? getWithDetails = null, string uniqueId = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersassignmentApi->AssignmentFoldersV2GetAssignmentFolders");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FoldersassignmentApi->AssignmentFoldersV2GetAssignmentFolders");

            var localVarPath = "/api/v2/{caseId}/folders/assignment/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", this.Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (getWithDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "getWithDetails", getWithDetails)); // query parameter
            if (uniqueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uniqueId", uniqueId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignmentFoldersV2GetAssignmentFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderItem>)));
        }

        /// <summary>
        /// Get assignment folders 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="userId">User to get assignment folders for (optional)</param>
        /// <param name="getWithDetails">Return reviewed count information (optional, default to false)</param>
        /// <param name="uniqueId"> (optional)</param>
        /// <returns>Task of List&lt;FolderItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<FolderItem>> AssignmentFoldersV2GetAssignmentFoldersAsync (int? caseId, int? folderId, int? userId = null, bool? getWithDetails = null, string uniqueId = null)
        {
             ApiResponse<List<FolderItem>> localVarResponse = await AssignmentFoldersV2GetAssignmentFoldersAsyncWithHttpInfo(caseId, folderId, userId, getWithDetails, uniqueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get assignment folders 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="userId">User to get assignment folders for (optional)</param>
        /// <param name="getWithDetails">Return reviewed count information (optional, default to false)</param>
        /// <param name="uniqueId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FolderItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FolderItem>>> AssignmentFoldersV2GetAssignmentFoldersAsyncWithHttpInfo (int? caseId, int? folderId, int? userId = null, bool? getWithDetails = null, string uniqueId = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersassignmentApi->AssignmentFoldersV2GetAssignmentFolders");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FoldersassignmentApi->AssignmentFoldersV2GetAssignmentFolders");

            var localVarPath = "/api/v2/{caseId}/folders/assignment/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", this.Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (getWithDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "getWithDetails", getWithDetails)); // query parameter
            if (uniqueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uniqueId", uniqueId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignmentFoldersV2GetAssignmentFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderItem>)));
        }

        /// <summary>
        /// Get top level assignment folders 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="start">0 based first record to return (optional)</param>
        /// <param name="count">number of records to return (optional)</param>
        /// <param name="filter">part of folder name (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> AssignmentFoldersV2GetTopLevelAssignmentFolders (int? caseId, int? start = null, int? count = null, string filter = null)
        {
             ApiResponse<List<string>> localVarResponse = AssignmentFoldersV2GetTopLevelAssignmentFoldersWithHttpInfo(caseId, start, count, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get top level assignment folders 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="start">0 based first record to return (optional)</param>
        /// <param name="count">number of records to return (optional)</param>
        /// <param name="filter">part of folder name (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > AssignmentFoldersV2GetTopLevelAssignmentFoldersWithHttpInfo (int? caseId, int? start = null, int? count = null, string filter = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersassignmentApi->AssignmentFoldersV2GetTopLevelAssignmentFolders");

            var localVarPath = "/api/v2/{caseId}/folders/assignment/toplevel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", this.Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignmentFoldersV2GetTopLevelAssignmentFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Get top level assignment folders 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="start">0 based first record to return (optional)</param>
        /// <param name="count">number of records to return (optional)</param>
        /// <param name="filter">part of folder name (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> AssignmentFoldersV2GetTopLevelAssignmentFoldersAsync (int? caseId, int? start = null, int? count = null, string filter = null)
        {
             ApiResponse<List<string>> localVarResponse = await AssignmentFoldersV2GetTopLevelAssignmentFoldersAsyncWithHttpInfo(caseId, start, count, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get top level assignment folders 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="start">0 based first record to return (optional)</param>
        /// <param name="count">number of records to return (optional)</param>
        /// <param name="filter">part of folder name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> AssignmentFoldersV2GetTopLevelAssignmentFoldersAsyncWithHttpInfo (int? caseId, int? start = null, int? count = null, string filter = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersassignmentApi->AssignmentFoldersV2GetTopLevelAssignmentFolders");

            var localVarPath = "/api/v2/{caseId}/folders/assignment/toplevel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", this.Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignmentFoldersV2GetTopLevelAssignmentFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Assign, unassign, or complete assignment batches in bulk 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void AssignmentFoldersV2UpadateUserAssignment (int? caseId, AssignmentBatchFoldersAssignment body = null)
        {
             AssignmentFoldersV2UpadateUserAssignmentWithHttpInfo(caseId, body);
        }

        /// <summary>
        /// Assign, unassign, or complete assignment batches in bulk 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssignmentFoldersV2UpadateUserAssignmentWithHttpInfo (int? caseId, AssignmentBatchFoldersAssignment body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersassignmentApi->AssignmentFoldersV2UpadateUserAssignment");

            var localVarPath = "/api/v2/{caseId}/folders/assignment/batches/assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", this.Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignmentFoldersV2UpadateUserAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Assign, unassign, or complete assignment batches in bulk 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssignmentFoldersV2UpadateUserAssignmentAsync (int? caseId, AssignmentBatchFoldersAssignment body = null)
        {
             await AssignmentFoldersV2UpadateUserAssignmentAsyncWithHttpInfo(caseId, body);

        }

        /// <summary>
        /// Assign, unassign, or complete assignment batches in bulk 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssignmentFoldersV2UpadateUserAssignmentAsyncWithHttpInfo (int? caseId, AssignmentBatchFoldersAssignment body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersassignmentApi->AssignmentFoldersV2UpadateUserAssignment");

            var localVarPath = "/api/v2/{caseId}/folders/assignment/batches/assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", this.Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignmentFoldersV2UpadateUserAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
