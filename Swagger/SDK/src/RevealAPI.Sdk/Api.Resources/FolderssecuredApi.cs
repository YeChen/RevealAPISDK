/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using RevealAPI.Sdk.Client;
using RevealAPI.Sdk.Models.Resources;

namespace RevealAPI.Sdk.Api.Resources
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFolderssecuredApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a list of secured folders which are things like \&quot;by user\&quot;, \&quot;by team\&quot; or unsecured
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId">-2 by team, -3, by user</param>
        /// <param name="userId">Specify 0 to ignore folder security for document counts (optional)</param>
        /// <param name="uniqueId">The parent unique id (optional)</param>
        /// <param name="isAdminView"> (optional, default to true)</param>
        /// <returns>List&lt;FolderItem&gt;</returns>
        List<FolderItem> SecuredFoldersV2GetFolders (int? caseId, int? folderId, int? userId = null, string uniqueId = null, bool? isAdminView = null);

        /// <summary>
        /// Get a list of secured folders which are things like \&quot;by user\&quot;, \&quot;by team\&quot; or unsecured
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId">-2 by team, -3, by user</param>
        /// <param name="userId">Specify 0 to ignore folder security for document counts (optional)</param>
        /// <param name="uniqueId">The parent unique id (optional)</param>
        /// <param name="isAdminView"> (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;FolderItem&gt;</returns>
        ApiResponse<List<FolderItem>> SecuredFoldersV2GetFoldersWithHttpInfo (int? caseId, int? folderId, int? userId = null, string uniqueId = null, bool? isAdminView = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a list of secured folders which are things like \&quot;by user\&quot;, \&quot;by team\&quot; or unsecured
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId">-2 by team, -3, by user</param>
        /// <param name="userId">Specify 0 to ignore folder security for document counts (optional)</param>
        /// <param name="uniqueId">The parent unique id (optional)</param>
        /// <param name="isAdminView"> (optional, default to true)</param>
        /// <returns>Task of List&lt;FolderItem&gt;</returns>
        System.Threading.Tasks.Task<List<FolderItem>> SecuredFoldersV2GetFoldersAsync (int? caseId, int? folderId, int? userId = null, string uniqueId = null, bool? isAdminView = null);

        /// <summary>
        /// Get a list of secured folders which are things like \&quot;by user\&quot;, \&quot;by team\&quot; or unsecured
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId">-2 by team, -3, by user</param>
        /// <param name="userId">Specify 0 to ignore folder security for document counts (optional)</param>
        /// <param name="uniqueId">The parent unique id (optional)</param>
        /// <param name="isAdminView"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;FolderItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FolderItem>>> SecuredFoldersV2GetFoldersAsyncWithHttpInfo (int? caseId, int? folderId, int? userId = null, string uniqueId = null, bool? isAdminView = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FolderssecuredApi : IFolderssecuredApi
    {
        private RevealAPI.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FolderssecuredApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FolderssecuredApi(String basePath)
        {
            this.Configuration = new RevealAPI.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RevealAPI.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FolderssecuredApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FolderssecuredApi(RevealAPI.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RevealAPI.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RevealAPI.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RevealAPI.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RevealAPI.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a list of secured folders which are things like \&quot;by user\&quot;, \&quot;by team\&quot; or unsecured 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId">-2 by team, -3, by user</param>
        /// <param name="userId">Specify 0 to ignore folder security for document counts (optional)</param>
        /// <param name="uniqueId">The parent unique id (optional)</param>
        /// <param name="isAdminView"> (optional, default to true)</param>
        /// <returns>List&lt;FolderItem&gt;</returns>
        public List<FolderItem> SecuredFoldersV2GetFolders (int? caseId, int? folderId, int? userId = null, string uniqueId = null, bool? isAdminView = null)
        {
             ApiResponse<List<FolderItem>> localVarResponse = SecuredFoldersV2GetFoldersWithHttpInfo(caseId, folderId, userId, uniqueId, isAdminView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of secured folders which are things like \&quot;by user\&quot;, \&quot;by team\&quot; or unsecured 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId">-2 by team, -3, by user</param>
        /// <param name="userId">Specify 0 to ignore folder security for document counts (optional)</param>
        /// <param name="uniqueId">The parent unique id (optional)</param>
        /// <param name="isAdminView"> (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;FolderItem&gt;</returns>
        public ApiResponse< List<FolderItem> > SecuredFoldersV2GetFoldersWithHttpInfo (int? caseId, int? folderId, int? userId = null, string uniqueId = null, bool? isAdminView = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FolderssecuredApi->SecuredFoldersV2GetFolders");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FolderssecuredApi->SecuredFoldersV2GetFolders");

            var localVarPath = "/api/v2/{caseId}/folders/secured/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", this.Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (uniqueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uniqueId", uniqueId)); // query parameter
            if (isAdminView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isAdminView", isAdminView)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecuredFoldersV2GetFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderItem>)));
        }

        /// <summary>
        /// Get a list of secured folders which are things like \&quot;by user\&quot;, \&quot;by team\&quot; or unsecured 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId">-2 by team, -3, by user</param>
        /// <param name="userId">Specify 0 to ignore folder security for document counts (optional)</param>
        /// <param name="uniqueId">The parent unique id (optional)</param>
        /// <param name="isAdminView"> (optional, default to true)</param>
        /// <returns>Task of List&lt;FolderItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<FolderItem>> SecuredFoldersV2GetFoldersAsync (int? caseId, int? folderId, int? userId = null, string uniqueId = null, bool? isAdminView = null)
        {
             ApiResponse<List<FolderItem>> localVarResponse = await SecuredFoldersV2GetFoldersAsyncWithHttpInfo(caseId, folderId, userId, uniqueId, isAdminView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of secured folders which are things like \&quot;by user\&quot;, \&quot;by team\&quot; or unsecured 
        /// </summary>
        /// <exception cref="RevealAPI.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId">-2 by team, -3, by user</param>
        /// <param name="userId">Specify 0 to ignore folder security for document counts (optional)</param>
        /// <param name="uniqueId">The parent unique id (optional)</param>
        /// <param name="isAdminView"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;FolderItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FolderItem>>> SecuredFoldersV2GetFoldersAsyncWithHttpInfo (int? caseId, int? folderId, int? userId = null, string uniqueId = null, bool? isAdminView = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FolderssecuredApi->SecuredFoldersV2GetFolders");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FolderssecuredApi->SecuredFoldersV2GetFolders");

            var localVarPath = "/api/v2/{caseId}/folders/secured/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", this.Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (uniqueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uniqueId", uniqueId)); // query parameter
            if (isAdminView != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isAdminView", isAdminView)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecuredFoldersV2GetFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderItem>)));
        }

    }
}
