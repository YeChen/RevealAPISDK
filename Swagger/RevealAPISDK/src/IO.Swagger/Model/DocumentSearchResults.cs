/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DocumentSearchResults
    /// </summary>
    [DataContract]
    public partial class DocumentSearchResults :  IEquatable<DocumentSearchResults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSearchResults" /> class.
        /// </summary>
        /// <param name="TracingId">TracingId.</param>
        /// <param name="Documents">Documents.</param>
        /// <param name="TotalResults">TotalResults.</param>
        /// <param name="HasErrors">HasErrors.</param>
        /// <param name="Start">The amount of results to skip.</param>
        /// <param name="Count">The amount of results to retrieve.</param>
        public DocumentSearchResults(string TracingId = default(string), List<Document> Documents = default(List<Document>), int? TotalResults = default(int?), bool? HasErrors = default(bool?), int? Start = default(int?), int? Count = default(int?))
        {
            this.TracingId = TracingId;
            this.Documents = Documents;
            this.TotalResults = TotalResults;
            this.HasErrors = HasErrors;
            this.Start = Start;
            this.Count = Count;
        }
        
        /// <summary>
        /// Gets or Sets TracingId
        /// </summary>
        [DataMember(Name="tracingId", EmitDefaultValue=false)]
        public string TracingId { get; set; }

        /// <summary>
        /// Gets or Sets Documents
        /// </summary>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public List<Document> Documents { get; set; }

        /// <summary>
        /// Gets or Sets TotalResults
        /// </summary>
        [DataMember(Name="totalResults", EmitDefaultValue=false)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Gets or Sets HasErrors
        /// </summary>
        [DataMember(Name="hasErrors", EmitDefaultValue=false)]
        public bool? HasErrors { get; set; }

        /// <summary>
        /// The amount of results to skip
        /// </summary>
        /// <value>The amount of results to skip</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public int? Start { get; set; }

        /// <summary>
        /// The amount of results to retrieve
        /// </summary>
        /// <value>The amount of results to retrieve</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentSearchResults {\n");
            sb.Append("  TracingId: ").Append(TracingId).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  TotalResults: ").Append(TotalResults).Append("\n");
            sb.Append("  HasErrors: ").Append(HasErrors).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentSearchResults);
        }

        /// <summary>
        /// Returns true if DocumentSearchResults instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentSearchResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentSearchResults input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TracingId == input.TracingId ||
                    (this.TracingId != null &&
                    this.TracingId.Equals(input.TracingId))
                ) && 
                (
                    this.Documents == input.Documents ||
                    this.Documents != null &&
                    this.Documents.SequenceEqual(input.Documents)
                ) && 
                (
                    this.TotalResults == input.TotalResults ||
                    (this.TotalResults != null &&
                    this.TotalResults.Equals(input.TotalResults))
                ) && 
                (
                    this.HasErrors == input.HasErrors ||
                    (this.HasErrors != null &&
                    this.HasErrors.Equals(input.HasErrors))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TracingId != null)
                    hashCode = hashCode * 59 + this.TracingId.GetHashCode();
                if (this.Documents != null)
                    hashCode = hashCode * 59 + this.Documents.GetHashCode();
                if (this.TotalResults != null)
                    hashCode = hashCode * 59 + this.TotalResults.GetHashCode();
                if (this.HasErrors != null)
                    hashCode = hashCode * 59 + this.HasErrors.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
