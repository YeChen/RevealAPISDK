/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AIModelTagSet
    /// </summary>
    [DataContract]
    public partial class AIModelTagSet :  IEquatable<AIModelTagSet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AIModelTagSet" /> class.
        /// </summary>
        /// <param name="TagSetType">TagSetType.</param>
        /// <param name="TagSetName">TagSetName.</param>
        /// <param name="TagId">TagId.</param>
        /// <param name="TagName">TagName.</param>
        /// <param name="AiModelId">AiModelId.</param>
        /// <param name="Prediction">Prediction.</param>
        public AIModelTagSet(int? TagSetType = default(int?), string TagSetName = default(string), int? TagId = default(int?), string TagName = default(string), int? AiModelId = default(int?), int? Prediction = default(int?))
        {
            this.TagSetType = TagSetType;
            this.TagSetName = TagSetName;
            this.TagId = TagId;
            this.TagName = TagName;
            this.AiModelId = AiModelId;
            this.Prediction = Prediction;
        }
        
        /// <summary>
        /// Gets or Sets TagSetType
        /// </summary>
        [DataMember(Name="tagSetType", EmitDefaultValue=false)]
        public int? TagSetType { get; set; }

        /// <summary>
        /// Gets or Sets TagSetName
        /// </summary>
        [DataMember(Name="tagSetName", EmitDefaultValue=false)]
        public string TagSetName { get; set; }

        /// <summary>
        /// Gets or Sets TagId
        /// </summary>
        [DataMember(Name="tagId", EmitDefaultValue=false)]
        public int? TagId { get; set; }

        /// <summary>
        /// Gets or Sets TagName
        /// </summary>
        [DataMember(Name="tagName", EmitDefaultValue=false)]
        public string TagName { get; set; }

        /// <summary>
        /// Gets or Sets AiModelId
        /// </summary>
        [DataMember(Name="aiModelId", EmitDefaultValue=false)]
        public int? AiModelId { get; set; }

        /// <summary>
        /// Gets or Sets Prediction
        /// </summary>
        [DataMember(Name="prediction", EmitDefaultValue=false)]
        public int? Prediction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AIModelTagSet {\n");
            sb.Append("  TagSetType: ").Append(TagSetType).Append("\n");
            sb.Append("  TagSetName: ").Append(TagSetName).Append("\n");
            sb.Append("  TagId: ").Append(TagId).Append("\n");
            sb.Append("  TagName: ").Append(TagName).Append("\n");
            sb.Append("  AiModelId: ").Append(AiModelId).Append("\n");
            sb.Append("  Prediction: ").Append(Prediction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AIModelTagSet);
        }

        /// <summary>
        /// Returns true if AIModelTagSet instances are equal
        /// </summary>
        /// <param name="input">Instance of AIModelTagSet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AIModelTagSet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TagSetType == input.TagSetType ||
                    (this.TagSetType != null &&
                    this.TagSetType.Equals(input.TagSetType))
                ) && 
                (
                    this.TagSetName == input.TagSetName ||
                    (this.TagSetName != null &&
                    this.TagSetName.Equals(input.TagSetName))
                ) && 
                (
                    this.TagId == input.TagId ||
                    (this.TagId != null &&
                    this.TagId.Equals(input.TagId))
                ) && 
                (
                    this.TagName == input.TagName ||
                    (this.TagName != null &&
                    this.TagName.Equals(input.TagName))
                ) && 
                (
                    this.AiModelId == input.AiModelId ||
                    (this.AiModelId != null &&
                    this.AiModelId.Equals(input.AiModelId))
                ) && 
                (
                    this.Prediction == input.Prediction ||
                    (this.Prediction != null &&
                    this.Prediction.Equals(input.Prediction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TagSetType != null)
                    hashCode = hashCode * 59 + this.TagSetType.GetHashCode();
                if (this.TagSetName != null)
                    hashCode = hashCode * 59 + this.TagSetName.GetHashCode();
                if (this.TagId != null)
                    hashCode = hashCode * 59 + this.TagId.GetHashCode();
                if (this.TagName != null)
                    hashCode = hashCode * 59 + this.TagName.GetHashCode();
                if (this.AiModelId != null)
                    hashCode = hashCode * 59 + this.AiModelId.GetHashCode();
                if (this.Prediction != null)
                    hashCode = hashCode * 59 + this.Prediction.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
