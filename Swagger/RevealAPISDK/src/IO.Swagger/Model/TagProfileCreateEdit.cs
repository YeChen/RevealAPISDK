/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TagProfileCreateEdit
    /// </summary>
    [DataContract]
    public partial class TagProfileCreateEdit :  IEquatable<TagProfileCreateEdit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TagProfileCreateEdit" /> class.
        /// </summary>
        /// <param name="TagProfileId">TagProfileId.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Description">Description.</param>
        /// <param name="DisplayOrder">DisplayOrder.</param>
        /// <param name="AcLs">AcLs.</param>
        public TagProfileCreateEdit(int? TagProfileId = default(int?), string Name = default(string), string Description = default(string), int? DisplayOrder = default(int?), List<AccessControlTagProfile> AcLs = default(List<AccessControlTagProfile>))
        {
            this.TagProfileId = TagProfileId;
            this.Name = Name;
            this.Description = Description;
            this.DisplayOrder = DisplayOrder;
            this.AcLs = AcLs;
        }
        
        /// <summary>
        /// Gets or Sets TagProfileId
        /// </summary>
        [DataMember(Name="tagProfileId", EmitDefaultValue=false)]
        public int? TagProfileId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayOrder
        /// </summary>
        [DataMember(Name="displayOrder", EmitDefaultValue=false)]
        public int? DisplayOrder { get; set; }

        /// <summary>
        /// Gets or Sets AcLs
        /// </summary>
        [DataMember(Name="acLs", EmitDefaultValue=false)]
        public List<AccessControlTagProfile> AcLs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TagProfileCreateEdit {\n");
            sb.Append("  TagProfileId: ").Append(TagProfileId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  AcLs: ").Append(AcLs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TagProfileCreateEdit);
        }

        /// <summary>
        /// Returns true if TagProfileCreateEdit instances are equal
        /// </summary>
        /// <param name="input">Instance of TagProfileCreateEdit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TagProfileCreateEdit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TagProfileId == input.TagProfileId ||
                    (this.TagProfileId != null &&
                    this.TagProfileId.Equals(input.TagProfileId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    (this.DisplayOrder != null &&
                    this.DisplayOrder.Equals(input.DisplayOrder))
                ) && 
                (
                    this.AcLs == input.AcLs ||
                    this.AcLs != null &&
                    this.AcLs.SequenceEqual(input.AcLs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TagProfileId != null)
                    hashCode = hashCode * 59 + this.TagProfileId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayOrder != null)
                    hashCode = hashCode * 59 + this.DisplayOrder.GetHashCode();
                if (this.AcLs != null)
                    hashCode = hashCode * 59 + this.AcLs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
