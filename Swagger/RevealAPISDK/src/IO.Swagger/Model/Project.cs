/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Project
    /// </summary>
    [DataContract]
    public partial class Project :  IEquatable<Project>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DeletionStatus
        /// </summary>
        [DataMember(Name="deletionStatus", EmitDefaultValue=false)]
        public DeletionStatus? DeletionStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Project" /> class.
        /// </summary>
        /// <param name="ProjectId">ProjectId.</param>
        /// <param name="ProjectName">ProjectName.</param>
        /// <param name="CompanyId">CompanyId.</param>
        /// <param name="CompanyName">CompanyName.</param>
        /// <param name="TotalNumberOfDocs">TotalNumberOfDocs.</param>
        /// <param name="CreatedDateTime">CreatedDateTime.</param>
        /// <param name="LastUpdatedDateTime">LastUpdatedDateTime.</param>
        /// <param name="IsDocumentLevelSecurityEnabled">IsDocumentLevelSecurityEnabled.</param>
        /// <param name="DeletionStatus">DeletionStatus.</param>
        /// <param name="Timezone">Timezone.</param>
        /// <param name="AreStatisticsAvailable">AreStatisticsAvailable.</param>
        /// <param name="BrainspaceDatasetIds">BrainspaceDatasetIds.</param>
        /// <param name="IsIndexed">IsIndexed.</param>
        public Project(int? ProjectId = default(int?), string ProjectName = default(string), int? CompanyId = default(int?), string CompanyName = default(string), long? TotalNumberOfDocs = default(long?), DateTime? CreatedDateTime = default(DateTime?), DateTime? LastUpdatedDateTime = default(DateTime?), bool? IsDocumentLevelSecurityEnabled = default(bool?), DeletionStatus? DeletionStatus = default(DeletionStatus?), string Timezone = default(string), bool? AreStatisticsAvailable = default(bool?), List<int?> BrainspaceDatasetIds = default(List<int?>), bool? IsIndexed = default(bool?))
        {
            this.ProjectId = ProjectId;
            this.ProjectName = ProjectName;
            this.CompanyId = CompanyId;
            this.CompanyName = CompanyName;
            this.TotalNumberOfDocs = TotalNumberOfDocs;
            this.CreatedDateTime = CreatedDateTime;
            this.LastUpdatedDateTime = LastUpdatedDateTime;
            this.IsDocumentLevelSecurityEnabled = IsDocumentLevelSecurityEnabled;
            this.DeletionStatus = DeletionStatus;
            this.Timezone = Timezone;
            this.AreStatisticsAvailable = AreStatisticsAvailable;
            this.BrainspaceDatasetIds = BrainspaceDatasetIds;
            this.IsIndexed = IsIndexed;
        }
        
        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="projectId", EmitDefaultValue=false)]
        public int? ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets ProjectName
        /// </summary>
        [DataMember(Name="projectName", EmitDefaultValue=false)]
        public string ProjectName { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name="companyId", EmitDefaultValue=false)]
        public int? CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name="companyName", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets TotalNumberOfDocs
        /// </summary>
        [DataMember(Name="totalNumberOfDocs", EmitDefaultValue=false)]
        public long? TotalNumberOfDocs { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="createdDateTime", EmitDefaultValue=false)]
        public DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdatedDateTime
        /// </summary>
        [DataMember(Name="lastUpdatedDateTime", EmitDefaultValue=false)]
        public DateTime? LastUpdatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets IsDocumentLevelSecurityEnabled
        /// </summary>
        [DataMember(Name="isDocumentLevelSecurityEnabled", EmitDefaultValue=false)]
        public bool? IsDocumentLevelSecurityEnabled { get; set; }


        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets AreStatisticsAvailable
        /// </summary>
        [DataMember(Name="areStatisticsAvailable", EmitDefaultValue=false)]
        public bool? AreStatisticsAvailable { get; set; }

        /// <summary>
        /// Gets or Sets BrainspaceDatasetIds
        /// </summary>
        [DataMember(Name="brainspaceDatasetIds", EmitDefaultValue=false)]
        public List<int?> BrainspaceDatasetIds { get; set; }

        /// <summary>
        /// Gets or Sets IsIndexed
        /// </summary>
        [DataMember(Name="isIndexed", EmitDefaultValue=false)]
        public bool? IsIndexed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Project {\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  TotalNumberOfDocs: ").Append(TotalNumberOfDocs).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  LastUpdatedDateTime: ").Append(LastUpdatedDateTime).Append("\n");
            sb.Append("  IsDocumentLevelSecurityEnabled: ").Append(IsDocumentLevelSecurityEnabled).Append("\n");
            sb.Append("  DeletionStatus: ").Append(DeletionStatus).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  AreStatisticsAvailable: ").Append(AreStatisticsAvailable).Append("\n");
            sb.Append("  BrainspaceDatasetIds: ").Append(BrainspaceDatasetIds).Append("\n");
            sb.Append("  IsIndexed: ").Append(IsIndexed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Project);
        }

        /// <summary>
        /// Returns true if Project instances are equal
        /// </summary>
        /// <param name="input">Instance of Project to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Project input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.ProjectName == input.ProjectName ||
                    (this.ProjectName != null &&
                    this.ProjectName.Equals(input.ProjectName))
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    (this.CompanyId != null &&
                    this.CompanyId.Equals(input.CompanyId))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.TotalNumberOfDocs == input.TotalNumberOfDocs ||
                    (this.TotalNumberOfDocs != null &&
                    this.TotalNumberOfDocs.Equals(input.TotalNumberOfDocs))
                ) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && 
                (
                    this.LastUpdatedDateTime == input.LastUpdatedDateTime ||
                    (this.LastUpdatedDateTime != null &&
                    this.LastUpdatedDateTime.Equals(input.LastUpdatedDateTime))
                ) && 
                (
                    this.IsDocumentLevelSecurityEnabled == input.IsDocumentLevelSecurityEnabled ||
                    (this.IsDocumentLevelSecurityEnabled != null &&
                    this.IsDocumentLevelSecurityEnabled.Equals(input.IsDocumentLevelSecurityEnabled))
                ) && 
                (
                    this.DeletionStatus == input.DeletionStatus ||
                    (this.DeletionStatus != null &&
                    this.DeletionStatus.Equals(input.DeletionStatus))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.AreStatisticsAvailable == input.AreStatisticsAvailable ||
                    (this.AreStatisticsAvailable != null &&
                    this.AreStatisticsAvailable.Equals(input.AreStatisticsAvailable))
                ) && 
                (
                    this.BrainspaceDatasetIds == input.BrainspaceDatasetIds ||
                    this.BrainspaceDatasetIds != null &&
                    this.BrainspaceDatasetIds.SequenceEqual(input.BrainspaceDatasetIds)
                ) && 
                (
                    this.IsIndexed == input.IsIndexed ||
                    (this.IsIndexed != null &&
                    this.IsIndexed.Equals(input.IsIndexed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.ProjectName != null)
                    hashCode = hashCode * 59 + this.ProjectName.GetHashCode();
                if (this.CompanyId != null)
                    hashCode = hashCode * 59 + this.CompanyId.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.TotalNumberOfDocs != null)
                    hashCode = hashCode * 59 + this.TotalNumberOfDocs.GetHashCode();
                if (this.CreatedDateTime != null)
                    hashCode = hashCode * 59 + this.CreatedDateTime.GetHashCode();
                if (this.LastUpdatedDateTime != null)
                    hashCode = hashCode * 59 + this.LastUpdatedDateTime.GetHashCode();
                if (this.IsDocumentLevelSecurityEnabled != null)
                    hashCode = hashCode * 59 + this.IsDocumentLevelSecurityEnabled.GetHashCode();
                if (this.DeletionStatus != null)
                    hashCode = hashCode * 59 + this.DeletionStatus.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.AreStatisticsAvailable != null)
                    hashCode = hashCode * 59 + this.AreStatisticsAvailable.GetHashCode();
                if (this.BrainspaceDatasetIds != null)
                    hashCode = hashCode * 59 + this.BrainspaceDatasetIds.GetHashCode();
                if (this.IsIndexed != null)
                    hashCode = hashCode * 59 + this.IsIndexed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
