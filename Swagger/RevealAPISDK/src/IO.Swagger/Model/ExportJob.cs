/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ExportJob
    /// </summary>
    [DataContract]
    public partial class ExportJob :  IEquatable<ExportJob>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ExportAs
        /// </summary>
        [DataMember(Name="exportAs", EmitDefaultValue=false)]
        public ExportJobFileType? ExportAs { get; set; }
        /// <summary>
        /// Gets or Sets FileNamingType
        /// </summary>
        [DataMember(Name="fileNamingType", EmitDefaultValue=false)]
        public ExportJobFileNamingConvention? FileNamingType { get; set; }
        /// <summary>
        /// Gets or Sets FileNameOrder
        /// </summary>
        [DataMember(Name="fileNameOrder", EmitDefaultValue=false)]
        public FileOrderSetting? FileNameOrder { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportJob" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="NumberOfDocuments">NumberOfDocuments.</param>
        /// <param name="NumberOfErrors">NumberOfErrors.</param>
        /// <param name="NumberOfDocumentsProcessed">NumberOfDocumentsProcessed.</param>
        /// <param name="CreatedByUserId">CreatedByUserId.</param>
        /// <param name="CreatedByUserName">CreatedByUserName.</param>
        /// <param name="ExportRequestDateTime">ExportRequestDateTime.</param>
        /// <param name="Status">Status.</param>
        /// <param name="ExportJobStatusDateTime">ExportJobStatusDateTime.</param>
        /// <param name="IsDeleted">IsDeleted.</param>
        /// <param name="TagProfileId">TagProfileId.</param>
        /// <param name="FileName">FileName.</param>
        /// <param name="FileSize">FileSize.</param>
        /// <param name="Name">Name.</param>
        /// <param name="ImportProfileId">ImportProfileId.</param>
        /// <param name="ImageSetId">ImageSetId.</param>
        /// <param name="ExportAs">ExportAs.</param>
        /// <param name="IncludeNativeFiles">IncludeNativeFiles.</param>
        /// <param name="FileNamingType">FileNamingType.</param>
        /// <param name="VolumePrefix">VolumePrefix.</param>
        /// <param name="VolumeStartNumber">VolumeStartNumber.</param>
        /// <param name="VolumeNumberDigits">VolumeNumberDigits.</param>
        /// <param name="VolumeMaxSize">VolumeMaxSize.</param>
        /// <param name="FileNameOrder">FileNameOrder.</param>
        /// <param name="NativeFileFields">NativeFileFields.</param>
        public ExportJob(int? Id = default(int?), int? NumberOfDocuments = default(int?), int? NumberOfErrors = default(int?), int? NumberOfDocumentsProcessed = default(int?), long? CreatedByUserId = default(long?), string CreatedByUserName = default(string), DateTime? ExportRequestDateTime = default(DateTime?), int? Status = default(int?), DateTime? ExportJobStatusDateTime = default(DateTime?), bool? IsDeleted = default(bool?), int? TagProfileId = default(int?), string FileName = default(string), long? FileSize = default(long?), string Name = default(string), int? ImportProfileId = default(int?), int? ImageSetId = default(int?), ExportJobFileType? ExportAs = default(ExportJobFileType?), bool? IncludeNativeFiles = default(bool?), ExportJobFileNamingConvention? FileNamingType = default(ExportJobFileNamingConvention?), string VolumePrefix = default(string), int? VolumeStartNumber = default(int?), int? VolumeNumberDigits = default(int?), int? VolumeMaxSize = default(int?), FileOrderSetting? FileNameOrder = default(FileOrderSetting?), List<string> NativeFileFields = default(List<string>))
        {
            this.Id = Id;
            this.NumberOfDocuments = NumberOfDocuments;
            this.NumberOfErrors = NumberOfErrors;
            this.NumberOfDocumentsProcessed = NumberOfDocumentsProcessed;
            this.CreatedByUserId = CreatedByUserId;
            this.CreatedByUserName = CreatedByUserName;
            this.ExportRequestDateTime = ExportRequestDateTime;
            this.Status = Status;
            this.ExportJobStatusDateTime = ExportJobStatusDateTime;
            this.IsDeleted = IsDeleted;
            this.TagProfileId = TagProfileId;
            this.FileName = FileName;
            this.FileSize = FileSize;
            this.Name = Name;
            this.ImportProfileId = ImportProfileId;
            this.ImageSetId = ImageSetId;
            this.ExportAs = ExportAs;
            this.IncludeNativeFiles = IncludeNativeFiles;
            this.FileNamingType = FileNamingType;
            this.VolumePrefix = VolumePrefix;
            this.VolumeStartNumber = VolumeStartNumber;
            this.VolumeNumberDigits = VolumeNumberDigits;
            this.VolumeMaxSize = VolumeMaxSize;
            this.FileNameOrder = FileNameOrder;
            this.NativeFileFields = NativeFileFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfDocuments
        /// </summary>
        [DataMember(Name="numberOfDocuments", EmitDefaultValue=false)]
        public int? NumberOfDocuments { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfErrors
        /// </summary>
        [DataMember(Name="numberOfErrors", EmitDefaultValue=false)]
        public int? NumberOfErrors { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfDocumentsProcessed
        /// </summary>
        [DataMember(Name="numberOfDocumentsProcessed", EmitDefaultValue=false)]
        public int? NumberOfDocumentsProcessed { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUserId
        /// </summary>
        [DataMember(Name="createdByUserId", EmitDefaultValue=false)]
        public long? CreatedByUserId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUserName
        /// </summary>
        [DataMember(Name="createdByUserName", EmitDefaultValue=false)]
        public string CreatedByUserName { get; set; }

        /// <summary>
        /// Gets or Sets ExportRequestDateTime
        /// </summary>
        [DataMember(Name="exportRequestDateTime", EmitDefaultValue=false)]
        public DateTime? ExportRequestDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets ExportJobStatusDateTime
        /// </summary>
        [DataMember(Name="exportJobStatusDateTime", EmitDefaultValue=false)]
        public DateTime? ExportJobStatusDateTime { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets TagProfileId
        /// </summary>
        [DataMember(Name="tagProfileId", EmitDefaultValue=false)]
        public int? TagProfileId { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets FileSize
        /// </summary>
        [DataMember(Name="fileSize", EmitDefaultValue=false)]
        public long? FileSize { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ImportProfileId
        /// </summary>
        [DataMember(Name="importProfileId", EmitDefaultValue=false)]
        public int? ImportProfileId { get; set; }

        /// <summary>
        /// Gets or Sets ImageSetId
        /// </summary>
        [DataMember(Name="imageSetId", EmitDefaultValue=false)]
        public int? ImageSetId { get; set; }


        /// <summary>
        /// Gets or Sets IncludeNativeFiles
        /// </summary>
        [DataMember(Name="includeNativeFiles", EmitDefaultValue=false)]
        public bool? IncludeNativeFiles { get; set; }


        /// <summary>
        /// Gets or Sets VolumePrefix
        /// </summary>
        [DataMember(Name="volumePrefix", EmitDefaultValue=false)]
        public string VolumePrefix { get; set; }

        /// <summary>
        /// Gets or Sets VolumeStartNumber
        /// </summary>
        [DataMember(Name="volumeStartNumber", EmitDefaultValue=false)]
        public int? VolumeStartNumber { get; set; }

        /// <summary>
        /// Gets or Sets VolumeNumberDigits
        /// </summary>
        [DataMember(Name="volumeNumberDigits", EmitDefaultValue=false)]
        public int? VolumeNumberDigits { get; set; }

        /// <summary>
        /// Gets or Sets VolumeMaxSize
        /// </summary>
        [DataMember(Name="volumeMaxSize", EmitDefaultValue=false)]
        public int? VolumeMaxSize { get; set; }


        /// <summary>
        /// Gets or Sets NativeFileFields
        /// </summary>
        [DataMember(Name="nativeFileFields", EmitDefaultValue=false)]
        public List<string> NativeFileFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExportJob {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NumberOfDocuments: ").Append(NumberOfDocuments).Append("\n");
            sb.Append("  NumberOfErrors: ").Append(NumberOfErrors).Append("\n");
            sb.Append("  NumberOfDocumentsProcessed: ").Append(NumberOfDocumentsProcessed).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  CreatedByUserName: ").Append(CreatedByUserName).Append("\n");
            sb.Append("  ExportRequestDateTime: ").Append(ExportRequestDateTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ExportJobStatusDateTime: ").Append(ExportJobStatusDateTime).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  TagProfileId: ").Append(TagProfileId).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ImportProfileId: ").Append(ImportProfileId).Append("\n");
            sb.Append("  ImageSetId: ").Append(ImageSetId).Append("\n");
            sb.Append("  ExportAs: ").Append(ExportAs).Append("\n");
            sb.Append("  IncludeNativeFiles: ").Append(IncludeNativeFiles).Append("\n");
            sb.Append("  FileNamingType: ").Append(FileNamingType).Append("\n");
            sb.Append("  VolumePrefix: ").Append(VolumePrefix).Append("\n");
            sb.Append("  VolumeStartNumber: ").Append(VolumeStartNumber).Append("\n");
            sb.Append("  VolumeNumberDigits: ").Append(VolumeNumberDigits).Append("\n");
            sb.Append("  VolumeMaxSize: ").Append(VolumeMaxSize).Append("\n");
            sb.Append("  FileNameOrder: ").Append(FileNameOrder).Append("\n");
            sb.Append("  NativeFileFields: ").Append(NativeFileFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExportJob);
        }

        /// <summary>
        /// Returns true if ExportJob instances are equal
        /// </summary>
        /// <param name="input">Instance of ExportJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportJob input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.NumberOfDocuments == input.NumberOfDocuments ||
                    (this.NumberOfDocuments != null &&
                    this.NumberOfDocuments.Equals(input.NumberOfDocuments))
                ) && 
                (
                    this.NumberOfErrors == input.NumberOfErrors ||
                    (this.NumberOfErrors != null &&
                    this.NumberOfErrors.Equals(input.NumberOfErrors))
                ) && 
                (
                    this.NumberOfDocumentsProcessed == input.NumberOfDocumentsProcessed ||
                    (this.NumberOfDocumentsProcessed != null &&
                    this.NumberOfDocumentsProcessed.Equals(input.NumberOfDocumentsProcessed))
                ) && 
                (
                    this.CreatedByUserId == input.CreatedByUserId ||
                    (this.CreatedByUserId != null &&
                    this.CreatedByUserId.Equals(input.CreatedByUserId))
                ) && 
                (
                    this.CreatedByUserName == input.CreatedByUserName ||
                    (this.CreatedByUserName != null &&
                    this.CreatedByUserName.Equals(input.CreatedByUserName))
                ) && 
                (
                    this.ExportRequestDateTime == input.ExportRequestDateTime ||
                    (this.ExportRequestDateTime != null &&
                    this.ExportRequestDateTime.Equals(input.ExportRequestDateTime))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ExportJobStatusDateTime == input.ExportJobStatusDateTime ||
                    (this.ExportJobStatusDateTime != null &&
                    this.ExportJobStatusDateTime.Equals(input.ExportJobStatusDateTime))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.TagProfileId == input.TagProfileId ||
                    (this.TagProfileId != null &&
                    this.TagProfileId.Equals(input.TagProfileId))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ImportProfileId == input.ImportProfileId ||
                    (this.ImportProfileId != null &&
                    this.ImportProfileId.Equals(input.ImportProfileId))
                ) && 
                (
                    this.ImageSetId == input.ImageSetId ||
                    (this.ImageSetId != null &&
                    this.ImageSetId.Equals(input.ImageSetId))
                ) && 
                (
                    this.ExportAs == input.ExportAs ||
                    (this.ExportAs != null &&
                    this.ExportAs.Equals(input.ExportAs))
                ) && 
                (
                    this.IncludeNativeFiles == input.IncludeNativeFiles ||
                    (this.IncludeNativeFiles != null &&
                    this.IncludeNativeFiles.Equals(input.IncludeNativeFiles))
                ) && 
                (
                    this.FileNamingType == input.FileNamingType ||
                    (this.FileNamingType != null &&
                    this.FileNamingType.Equals(input.FileNamingType))
                ) && 
                (
                    this.VolumePrefix == input.VolumePrefix ||
                    (this.VolumePrefix != null &&
                    this.VolumePrefix.Equals(input.VolumePrefix))
                ) && 
                (
                    this.VolumeStartNumber == input.VolumeStartNumber ||
                    (this.VolumeStartNumber != null &&
                    this.VolumeStartNumber.Equals(input.VolumeStartNumber))
                ) && 
                (
                    this.VolumeNumberDigits == input.VolumeNumberDigits ||
                    (this.VolumeNumberDigits != null &&
                    this.VolumeNumberDigits.Equals(input.VolumeNumberDigits))
                ) && 
                (
                    this.VolumeMaxSize == input.VolumeMaxSize ||
                    (this.VolumeMaxSize != null &&
                    this.VolumeMaxSize.Equals(input.VolumeMaxSize))
                ) && 
                (
                    this.FileNameOrder == input.FileNameOrder ||
                    (this.FileNameOrder != null &&
                    this.FileNameOrder.Equals(input.FileNameOrder))
                ) && 
                (
                    this.NativeFileFields == input.NativeFileFields ||
                    this.NativeFileFields != null &&
                    this.NativeFileFields.SequenceEqual(input.NativeFileFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.NumberOfDocuments != null)
                    hashCode = hashCode * 59 + this.NumberOfDocuments.GetHashCode();
                if (this.NumberOfErrors != null)
                    hashCode = hashCode * 59 + this.NumberOfErrors.GetHashCode();
                if (this.NumberOfDocumentsProcessed != null)
                    hashCode = hashCode * 59 + this.NumberOfDocumentsProcessed.GetHashCode();
                if (this.CreatedByUserId != null)
                    hashCode = hashCode * 59 + this.CreatedByUserId.GetHashCode();
                if (this.CreatedByUserName != null)
                    hashCode = hashCode * 59 + this.CreatedByUserName.GetHashCode();
                if (this.ExportRequestDateTime != null)
                    hashCode = hashCode * 59 + this.ExportRequestDateTime.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ExportJobStatusDateTime != null)
                    hashCode = hashCode * 59 + this.ExportJobStatusDateTime.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.TagProfileId != null)
                    hashCode = hashCode * 59 + this.TagProfileId.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.FileSize != null)
                    hashCode = hashCode * 59 + this.FileSize.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ImportProfileId != null)
                    hashCode = hashCode * 59 + this.ImportProfileId.GetHashCode();
                if (this.ImageSetId != null)
                    hashCode = hashCode * 59 + this.ImageSetId.GetHashCode();
                if (this.ExportAs != null)
                    hashCode = hashCode * 59 + this.ExportAs.GetHashCode();
                if (this.IncludeNativeFiles != null)
                    hashCode = hashCode * 59 + this.IncludeNativeFiles.GetHashCode();
                if (this.FileNamingType != null)
                    hashCode = hashCode * 59 + this.FileNamingType.GetHashCode();
                if (this.VolumePrefix != null)
                    hashCode = hashCode * 59 + this.VolumePrefix.GetHashCode();
                if (this.VolumeStartNumber != null)
                    hashCode = hashCode * 59 + this.VolumeStartNumber.GetHashCode();
                if (this.VolumeNumberDigits != null)
                    hashCode = hashCode * 59 + this.VolumeNumberDigits.GetHashCode();
                if (this.VolumeMaxSize != null)
                    hashCode = hashCode * 59 + this.VolumeMaxSize.GetHashCode();
                if (this.FileNameOrder != null)
                    hashCode = hashCode * 59 + this.FileNameOrder.GetHashCode();
                if (this.NativeFileFields != null)
                    hashCode = hashCode * 59 + this.NativeFileFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ImportProfileId (int?) maximum
            if(this.ImportProfileId > (int?)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImportProfileId, must be a value less than or equal to 2147483647.", new [] { "ImportProfileId" });
            }

            // ImportProfileId (int?) minimum
            if(this.ImportProfileId < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImportProfileId, must be a value greater than or equal to 0.", new [] { "ImportProfileId" });
            }

            // VolumeStartNumber (int?) maximum
            if(this.VolumeStartNumber > (int?)32767)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VolumeStartNumber, must be a value less than or equal to 32767.", new [] { "VolumeStartNumber" });
            }

            // VolumeStartNumber (int?) minimum
            if(this.VolumeStartNumber < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VolumeStartNumber, must be a value greater than or equal to 1.", new [] { "VolumeStartNumber" });
            }

            // VolumeNumberDigits (int?) maximum
            if(this.VolumeNumberDigits > (int?)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VolumeNumberDigits, must be a value less than or equal to 2147483647.", new [] { "VolumeNumberDigits" });
            }

            // VolumeNumberDigits (int?) minimum
            if(this.VolumeNumberDigits < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VolumeNumberDigits, must be a value greater than or equal to 1.", new [] { "VolumeNumberDigits" });
            }

            // VolumeMaxSize (int?) maximum
            if(this.VolumeMaxSize > (int?)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VolumeMaxSize, must be a value less than or equal to 2147483647.", new [] { "VolumeMaxSize" });
            }

            // VolumeMaxSize (int?) minimum
            if(this.VolumeMaxSize < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VolumeMaxSize, must be a value greater than or equal to 1.", new [] { "VolumeMaxSize" });
            }

            yield break;
        }
    }

}
