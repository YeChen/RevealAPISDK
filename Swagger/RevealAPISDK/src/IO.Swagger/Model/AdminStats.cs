/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AdminStats
    /// </summary>
    [DataContract]
    public partial class AdminStats :  IEquatable<AdminStats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminStats" /> class.
        /// </summary>
        /// <param name="NativeCount">NativeCount.</param>
        /// <param name="ImageCount">ImageCount.</param>
        /// <param name="NativeSize">NativeSize.</param>
        /// <param name="ImagesSize">ImagesSize.</param>
        /// <param name="DocumentsSize">DocumentsSize.</param>
        /// <param name="DatabaseSize">DatabaseSize.</param>
        /// <param name="ProductionSize">ProductionSize.</param>
        /// <param name="ProductionImageCount">ProductionImageCount.</param>
        /// <param name="IndexSize">IndexSize.</param>
        /// <param name="UserCount">UserCount.</param>
        /// <param name="LoggedInUserCount">LoggedInUserCount.</param>
        /// <param name="NativeErrorCount">NativeErrorCount.</param>
        /// <param name="ImageErrorCount">ImageErrorCount.</param>
        /// <param name="ProductionImageErrorCount">ProductionImageErrorCount.</param>
        /// <param name="EndDatetime">EndDatetime.</param>
        /// <param name="StartDatetime">StartDatetime.</param>
        /// <param name="CreatedBy">CreatedBy.</param>
        /// <param name="CreatedDateTime">CreatedDateTime.</param>
        /// <param name="LastModifiedBy">LastModifiedBy.</param>
        /// <param name="TagProfileId">TagProfileId.</param>
        /// <param name="LastModifiedDateTime">LastModifiedDateTime.</param>
        /// <param name="AllowPrivateNotes">AllowPrivateNotes.</param>
        /// <param name="Id">Id.</param>
        /// <param name="ObjectVersionNo">ObjectVersionNo.</param>
        /// <param name="IsValidated">IsValidated.</param>
        public AdminStats(long? NativeCount = default(long?), long? ImageCount = default(long?), double? NativeSize = default(double?), double? ImagesSize = default(double?), double? DocumentsSize = default(double?), double? DatabaseSize = default(double?), double? ProductionSize = default(double?), long? ProductionImageCount = default(long?), double? IndexSize = default(double?), long? UserCount = default(long?), long? LoggedInUserCount = default(long?), long? NativeErrorCount = default(long?), long? ImageErrorCount = default(long?), long? ProductionImageErrorCount = default(long?), DateTime? EndDatetime = default(DateTime?), DateTime? StartDatetime = default(DateTime?), int? CreatedBy = default(int?), DateTime? CreatedDateTime = default(DateTime?), int? LastModifiedBy = default(int?), int? TagProfileId = default(int?), DateTime? LastModifiedDateTime = default(DateTime?), bool? AllowPrivateNotes = default(bool?), int? Id = default(int?), int? ObjectVersionNo = default(int?), bool? IsValidated = default(bool?))
        {
            this.NativeCount = NativeCount;
            this.ImageCount = ImageCount;
            this.NativeSize = NativeSize;
            this.ImagesSize = ImagesSize;
            this.DocumentsSize = DocumentsSize;
            this.DatabaseSize = DatabaseSize;
            this.ProductionSize = ProductionSize;
            this.ProductionImageCount = ProductionImageCount;
            this.IndexSize = IndexSize;
            this.UserCount = UserCount;
            this.LoggedInUserCount = LoggedInUserCount;
            this.NativeErrorCount = NativeErrorCount;
            this.ImageErrorCount = ImageErrorCount;
            this.ProductionImageErrorCount = ProductionImageErrorCount;
            this.EndDatetime = EndDatetime;
            this.StartDatetime = StartDatetime;
            this.CreatedBy = CreatedBy;
            this.CreatedDateTime = CreatedDateTime;
            this.LastModifiedBy = LastModifiedBy;
            this.TagProfileId = TagProfileId;
            this.LastModifiedDateTime = LastModifiedDateTime;
            this.AllowPrivateNotes = AllowPrivateNotes;
            this.Id = Id;
            this.ObjectVersionNo = ObjectVersionNo;
            this.IsValidated = IsValidated;
        }
        
        /// <summary>
        /// Gets or Sets NativeCount
        /// </summary>
        [DataMember(Name="nativeCount", EmitDefaultValue=false)]
        public long? NativeCount { get; set; }

        /// <summary>
        /// Gets or Sets ImageCount
        /// </summary>
        [DataMember(Name="imageCount", EmitDefaultValue=false)]
        public long? ImageCount { get; set; }

        /// <summary>
        /// Gets or Sets NativeSize
        /// </summary>
        [DataMember(Name="nativeSize", EmitDefaultValue=false)]
        public double? NativeSize { get; set; }

        /// <summary>
        /// Gets or Sets ImagesSize
        /// </summary>
        [DataMember(Name="imagesSize", EmitDefaultValue=false)]
        public double? ImagesSize { get; set; }

        /// <summary>
        /// Gets or Sets DocumentsSize
        /// </summary>
        [DataMember(Name="documentsSize", EmitDefaultValue=false)]
        public double? DocumentsSize { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseSize
        /// </summary>
        [DataMember(Name="databaseSize", EmitDefaultValue=false)]
        public double? DatabaseSize { get; set; }

        /// <summary>
        /// Gets or Sets ProductionSize
        /// </summary>
        [DataMember(Name="productionSize", EmitDefaultValue=false)]
        public double? ProductionSize { get; set; }

        /// <summary>
        /// Gets or Sets ProductionImageCount
        /// </summary>
        [DataMember(Name="productionImageCount", EmitDefaultValue=false)]
        public long? ProductionImageCount { get; set; }

        /// <summary>
        /// Gets or Sets IndexSize
        /// </summary>
        [DataMember(Name="indexSize", EmitDefaultValue=false)]
        public double? IndexSize { get; set; }

        /// <summary>
        /// Gets or Sets UserCount
        /// </summary>
        [DataMember(Name="userCount", EmitDefaultValue=false)]
        public long? UserCount { get; set; }

        /// <summary>
        /// Gets or Sets LoggedInUserCount
        /// </summary>
        [DataMember(Name="loggedInUserCount", EmitDefaultValue=false)]
        public long? LoggedInUserCount { get; set; }

        /// <summary>
        /// Gets or Sets NativeErrorCount
        /// </summary>
        [DataMember(Name="nativeErrorCount", EmitDefaultValue=false)]
        public long? NativeErrorCount { get; set; }

        /// <summary>
        /// Gets or Sets ImageErrorCount
        /// </summary>
        [DataMember(Name="imageErrorCount", EmitDefaultValue=false)]
        public long? ImageErrorCount { get; set; }

        /// <summary>
        /// Gets or Sets ProductionImageErrorCount
        /// </summary>
        [DataMember(Name="productionImageErrorCount", EmitDefaultValue=false)]
        public long? ProductionImageErrorCount { get; set; }

        /// <summary>
        /// Gets or Sets EndDatetime
        /// </summary>
        [DataMember(Name="endDatetime", EmitDefaultValue=false)]
        public DateTime? EndDatetime { get; set; }

        /// <summary>
        /// Gets or Sets StartDatetime
        /// </summary>
        [DataMember(Name="startDatetime", EmitDefaultValue=false)]
        public DateTime? StartDatetime { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public int? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="createdDateTime", EmitDefaultValue=false)]
        public DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedBy
        /// </summary>
        [DataMember(Name="lastModifiedBy", EmitDefaultValue=false)]
        public int? LastModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets TagProfileId
        /// </summary>
        [DataMember(Name="tagProfileId", EmitDefaultValue=false)]
        public int? TagProfileId { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="lastModifiedDateTime", EmitDefaultValue=false)]
        public DateTime? LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets AllowPrivateNotes
        /// </summary>
        [DataMember(Name="allowPrivateNotes", EmitDefaultValue=false)]
        public bool? AllowPrivateNotes { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets ObjectVersionNo
        /// </summary>
        [DataMember(Name="objectVersionNo", EmitDefaultValue=false)]
        public int? ObjectVersionNo { get; set; }

        /// <summary>
        /// Gets or Sets IsValidated
        /// </summary>
        [DataMember(Name="isValidated", EmitDefaultValue=false)]
        public bool? IsValidated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminStats {\n");
            sb.Append("  NativeCount: ").Append(NativeCount).Append("\n");
            sb.Append("  ImageCount: ").Append(ImageCount).Append("\n");
            sb.Append("  NativeSize: ").Append(NativeSize).Append("\n");
            sb.Append("  ImagesSize: ").Append(ImagesSize).Append("\n");
            sb.Append("  DocumentsSize: ").Append(DocumentsSize).Append("\n");
            sb.Append("  DatabaseSize: ").Append(DatabaseSize).Append("\n");
            sb.Append("  ProductionSize: ").Append(ProductionSize).Append("\n");
            sb.Append("  ProductionImageCount: ").Append(ProductionImageCount).Append("\n");
            sb.Append("  IndexSize: ").Append(IndexSize).Append("\n");
            sb.Append("  UserCount: ").Append(UserCount).Append("\n");
            sb.Append("  LoggedInUserCount: ").Append(LoggedInUserCount).Append("\n");
            sb.Append("  NativeErrorCount: ").Append(NativeErrorCount).Append("\n");
            sb.Append("  ImageErrorCount: ").Append(ImageErrorCount).Append("\n");
            sb.Append("  ProductionImageErrorCount: ").Append(ProductionImageErrorCount).Append("\n");
            sb.Append("  EndDatetime: ").Append(EndDatetime).Append("\n");
            sb.Append("  StartDatetime: ").Append(StartDatetime).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  TagProfileId: ").Append(TagProfileId).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  AllowPrivateNotes: ").Append(AllowPrivateNotes).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ObjectVersionNo: ").Append(ObjectVersionNo).Append("\n");
            sb.Append("  IsValidated: ").Append(IsValidated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdminStats);
        }

        /// <summary>
        /// Returns true if AdminStats instances are equal
        /// </summary>
        /// <param name="input">Instance of AdminStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NativeCount == input.NativeCount ||
                    (this.NativeCount != null &&
                    this.NativeCount.Equals(input.NativeCount))
                ) && 
                (
                    this.ImageCount == input.ImageCount ||
                    (this.ImageCount != null &&
                    this.ImageCount.Equals(input.ImageCount))
                ) && 
                (
                    this.NativeSize == input.NativeSize ||
                    (this.NativeSize != null &&
                    this.NativeSize.Equals(input.NativeSize))
                ) && 
                (
                    this.ImagesSize == input.ImagesSize ||
                    (this.ImagesSize != null &&
                    this.ImagesSize.Equals(input.ImagesSize))
                ) && 
                (
                    this.DocumentsSize == input.DocumentsSize ||
                    (this.DocumentsSize != null &&
                    this.DocumentsSize.Equals(input.DocumentsSize))
                ) && 
                (
                    this.DatabaseSize == input.DatabaseSize ||
                    (this.DatabaseSize != null &&
                    this.DatabaseSize.Equals(input.DatabaseSize))
                ) && 
                (
                    this.ProductionSize == input.ProductionSize ||
                    (this.ProductionSize != null &&
                    this.ProductionSize.Equals(input.ProductionSize))
                ) && 
                (
                    this.ProductionImageCount == input.ProductionImageCount ||
                    (this.ProductionImageCount != null &&
                    this.ProductionImageCount.Equals(input.ProductionImageCount))
                ) && 
                (
                    this.IndexSize == input.IndexSize ||
                    (this.IndexSize != null &&
                    this.IndexSize.Equals(input.IndexSize))
                ) && 
                (
                    this.UserCount == input.UserCount ||
                    (this.UserCount != null &&
                    this.UserCount.Equals(input.UserCount))
                ) && 
                (
                    this.LoggedInUserCount == input.LoggedInUserCount ||
                    (this.LoggedInUserCount != null &&
                    this.LoggedInUserCount.Equals(input.LoggedInUserCount))
                ) && 
                (
                    this.NativeErrorCount == input.NativeErrorCount ||
                    (this.NativeErrorCount != null &&
                    this.NativeErrorCount.Equals(input.NativeErrorCount))
                ) && 
                (
                    this.ImageErrorCount == input.ImageErrorCount ||
                    (this.ImageErrorCount != null &&
                    this.ImageErrorCount.Equals(input.ImageErrorCount))
                ) && 
                (
                    this.ProductionImageErrorCount == input.ProductionImageErrorCount ||
                    (this.ProductionImageErrorCount != null &&
                    this.ProductionImageErrorCount.Equals(input.ProductionImageErrorCount))
                ) && 
                (
                    this.EndDatetime == input.EndDatetime ||
                    (this.EndDatetime != null &&
                    this.EndDatetime.Equals(input.EndDatetime))
                ) && 
                (
                    this.StartDatetime == input.StartDatetime ||
                    (this.StartDatetime != null &&
                    this.StartDatetime.Equals(input.StartDatetime))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.TagProfileId == input.TagProfileId ||
                    (this.TagProfileId != null &&
                    this.TagProfileId.Equals(input.TagProfileId))
                ) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && 
                (
                    this.AllowPrivateNotes == input.AllowPrivateNotes ||
                    (this.AllowPrivateNotes != null &&
                    this.AllowPrivateNotes.Equals(input.AllowPrivateNotes))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ObjectVersionNo == input.ObjectVersionNo ||
                    (this.ObjectVersionNo != null &&
                    this.ObjectVersionNo.Equals(input.ObjectVersionNo))
                ) && 
                (
                    this.IsValidated == input.IsValidated ||
                    (this.IsValidated != null &&
                    this.IsValidated.Equals(input.IsValidated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NativeCount != null)
                    hashCode = hashCode * 59 + this.NativeCount.GetHashCode();
                if (this.ImageCount != null)
                    hashCode = hashCode * 59 + this.ImageCount.GetHashCode();
                if (this.NativeSize != null)
                    hashCode = hashCode * 59 + this.NativeSize.GetHashCode();
                if (this.ImagesSize != null)
                    hashCode = hashCode * 59 + this.ImagesSize.GetHashCode();
                if (this.DocumentsSize != null)
                    hashCode = hashCode * 59 + this.DocumentsSize.GetHashCode();
                if (this.DatabaseSize != null)
                    hashCode = hashCode * 59 + this.DatabaseSize.GetHashCode();
                if (this.ProductionSize != null)
                    hashCode = hashCode * 59 + this.ProductionSize.GetHashCode();
                if (this.ProductionImageCount != null)
                    hashCode = hashCode * 59 + this.ProductionImageCount.GetHashCode();
                if (this.IndexSize != null)
                    hashCode = hashCode * 59 + this.IndexSize.GetHashCode();
                if (this.UserCount != null)
                    hashCode = hashCode * 59 + this.UserCount.GetHashCode();
                if (this.LoggedInUserCount != null)
                    hashCode = hashCode * 59 + this.LoggedInUserCount.GetHashCode();
                if (this.NativeErrorCount != null)
                    hashCode = hashCode * 59 + this.NativeErrorCount.GetHashCode();
                if (this.ImageErrorCount != null)
                    hashCode = hashCode * 59 + this.ImageErrorCount.GetHashCode();
                if (this.ProductionImageErrorCount != null)
                    hashCode = hashCode * 59 + this.ProductionImageErrorCount.GetHashCode();
                if (this.EndDatetime != null)
                    hashCode = hashCode * 59 + this.EndDatetime.GetHashCode();
                if (this.StartDatetime != null)
                    hashCode = hashCode * 59 + this.StartDatetime.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedDateTime != null)
                    hashCode = hashCode * 59 + this.CreatedDateTime.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.TagProfileId != null)
                    hashCode = hashCode * 59 + this.TagProfileId.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.AllowPrivateNotes != null)
                    hashCode = hashCode * 59 + this.AllowPrivateNotes.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ObjectVersionNo != null)
                    hashCode = hashCode * 59 + this.ObjectVersionNo.GetHashCode();
                if (this.IsValidated != null)
                    hashCode = hashCode * 59 + this.IsValidated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
