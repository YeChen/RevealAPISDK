/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UploadJobCreate
    /// </summary>
    [DataContract]
    public partial class UploadJobCreate :  IEquatable<UploadJobCreate>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets WorkFlow
        /// </summary>
        [DataMember(Name="workFlow", EmitDefaultValue=false)]
        public UploadJobWorkFlow? WorkFlow { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadJobCreate" /> class.
        /// </summary>
        /// <param name="JobGuid">JobGuid.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Custodian">Custodian.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Manifest">Manifest.</param>
        /// <param name="DuplicateDocuments">DuplicateDocuments.</param>
        /// <param name="WorkFlow">WorkFlow.</param>
        public UploadJobCreate(string JobGuid = default(string), string Name = default(string), string Custodian = default(string), string Description = default(string), S3Manifest Manifest = default(S3Manifest), bool? DuplicateDocuments = default(bool?), UploadJobWorkFlow? WorkFlow = default(UploadJobWorkFlow?))
        {
            this.JobGuid = JobGuid;
            this.Name = Name;
            this.Custodian = Custodian;
            this.Description = Description;
            this.Manifest = Manifest;
            this.DuplicateDocuments = DuplicateDocuments;
            this.WorkFlow = WorkFlow;
        }
        
        /// <summary>
        /// Gets or Sets JobGuid
        /// </summary>
        [DataMember(Name="jobGuid", EmitDefaultValue=false)]
        public string JobGuid { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Custodian
        /// </summary>
        [DataMember(Name="custodian", EmitDefaultValue=false)]
        public string Custodian { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Manifest
        /// </summary>
        [DataMember(Name="manifest", EmitDefaultValue=false)]
        public S3Manifest Manifest { get; set; }

        /// <summary>
        /// Gets or Sets DuplicateDocuments
        /// </summary>
        [DataMember(Name="duplicateDocuments", EmitDefaultValue=false)]
        public bool? DuplicateDocuments { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UploadJobCreate {\n");
            sb.Append("  JobGuid: ").Append(JobGuid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Custodian: ").Append(Custodian).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Manifest: ").Append(Manifest).Append("\n");
            sb.Append("  DuplicateDocuments: ").Append(DuplicateDocuments).Append("\n");
            sb.Append("  WorkFlow: ").Append(WorkFlow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadJobCreate);
        }

        /// <summary>
        /// Returns true if UploadJobCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadJobCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadJobCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JobGuid == input.JobGuid ||
                    (this.JobGuid != null &&
                    this.JobGuid.Equals(input.JobGuid))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Custodian == input.Custodian ||
                    (this.Custodian != null &&
                    this.Custodian.Equals(input.Custodian))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Manifest == input.Manifest ||
                    (this.Manifest != null &&
                    this.Manifest.Equals(input.Manifest))
                ) && 
                (
                    this.DuplicateDocuments == input.DuplicateDocuments ||
                    (this.DuplicateDocuments != null &&
                    this.DuplicateDocuments.Equals(input.DuplicateDocuments))
                ) && 
                (
                    this.WorkFlow == input.WorkFlow ||
                    (this.WorkFlow != null &&
                    this.WorkFlow.Equals(input.WorkFlow))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobGuid != null)
                    hashCode = hashCode * 59 + this.JobGuid.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Custodian != null)
                    hashCode = hashCode * 59 + this.Custodian.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Manifest != null)
                    hashCode = hashCode * 59 + this.Manifest.GetHashCode();
                if (this.DuplicateDocuments != null)
                    hashCode = hashCode * 59 + this.DuplicateDocuments.GetHashCode();
                if (this.WorkFlow != null)
                    hashCode = hashCode * 59 + this.WorkFlow.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
