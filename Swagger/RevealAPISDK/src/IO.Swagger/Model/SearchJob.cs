/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SearchJob
    /// </summary>
    [DataContract]
    public partial class SearchJob :  IEquatable<SearchJob>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public JobStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchJob" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="HistoryId">HistoryId.</param>
        /// <param name="Status">Status.</param>
        /// <param name="CreatedByUserId">CreatedByUserId.</param>
        /// <param name="SubmittedDateTime">SubmittedDateTime.</param>
        /// <param name="StartedDateTime">StartedDateTime.</param>
        /// <param name="EndDateTime">EndDateTime.</param>
        /// <param name="DocumentsFoundCount">DocumentsFoundCount.</param>
        /// <param name="InfoMessage">InfoMessage.</param>
        public SearchJob(long? Id = default(long?), long? HistoryId = default(long?), JobStatus? Status = default(JobStatus?), int? CreatedByUserId = default(int?), DateTime? SubmittedDateTime = default(DateTime?), DateTime? StartedDateTime = default(DateTime?), DateTime? EndDateTime = default(DateTime?), long? DocumentsFoundCount = default(long?), string InfoMessage = default(string))
        {
            this.Id = Id;
            this.HistoryId = HistoryId;
            this.Status = Status;
            this.CreatedByUserId = CreatedByUserId;
            this.SubmittedDateTime = SubmittedDateTime;
            this.StartedDateTime = StartedDateTime;
            this.EndDateTime = EndDateTime;
            this.DocumentsFoundCount = DocumentsFoundCount;
            this.InfoMessage = InfoMessage;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets HistoryId
        /// </summary>
        [DataMember(Name="historyId", EmitDefaultValue=false)]
        public long? HistoryId { get; set; }


        /// <summary>
        /// Gets or Sets CreatedByUserId
        /// </summary>
        [DataMember(Name="createdByUserId", EmitDefaultValue=false)]
        public int? CreatedByUserId { get; set; }

        /// <summary>
        /// Gets or Sets SubmittedDateTime
        /// </summary>
        [DataMember(Name="submittedDateTime", EmitDefaultValue=false)]
        public DateTime? SubmittedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets StartedDateTime
        /// </summary>
        [DataMember(Name="startedDateTime", EmitDefaultValue=false)]
        public DateTime? StartedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets EndDateTime
        /// </summary>
        [DataMember(Name="endDateTime", EmitDefaultValue=false)]
        public DateTime? EndDateTime { get; set; }

        /// <summary>
        /// Gets or Sets DocumentsFoundCount
        /// </summary>
        [DataMember(Name="documentsFoundCount", EmitDefaultValue=false)]
        public long? DocumentsFoundCount { get; set; }

        /// <summary>
        /// Gets or Sets InfoMessage
        /// </summary>
        [DataMember(Name="infoMessage", EmitDefaultValue=false)]
        public string InfoMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchJob {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  HistoryId: ").Append(HistoryId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  SubmittedDateTime: ").Append(SubmittedDateTime).Append("\n");
            sb.Append("  StartedDateTime: ").Append(StartedDateTime).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  DocumentsFoundCount: ").Append(DocumentsFoundCount).Append("\n");
            sb.Append("  InfoMessage: ").Append(InfoMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchJob);
        }

        /// <summary>
        /// Returns true if SearchJob instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchJob input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.HistoryId == input.HistoryId ||
                    (this.HistoryId != null &&
                    this.HistoryId.Equals(input.HistoryId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.CreatedByUserId == input.CreatedByUserId ||
                    (this.CreatedByUserId != null &&
                    this.CreatedByUserId.Equals(input.CreatedByUserId))
                ) && 
                (
                    this.SubmittedDateTime == input.SubmittedDateTime ||
                    (this.SubmittedDateTime != null &&
                    this.SubmittedDateTime.Equals(input.SubmittedDateTime))
                ) && 
                (
                    this.StartedDateTime == input.StartedDateTime ||
                    (this.StartedDateTime != null &&
                    this.StartedDateTime.Equals(input.StartedDateTime))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.DocumentsFoundCount == input.DocumentsFoundCount ||
                    (this.DocumentsFoundCount != null &&
                    this.DocumentsFoundCount.Equals(input.DocumentsFoundCount))
                ) && 
                (
                    this.InfoMessage == input.InfoMessage ||
                    (this.InfoMessage != null &&
                    this.InfoMessage.Equals(input.InfoMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.HistoryId != null)
                    hashCode = hashCode * 59 + this.HistoryId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.CreatedByUserId != null)
                    hashCode = hashCode * 59 + this.CreatedByUserId.GetHashCode();
                if (this.SubmittedDateTime != null)
                    hashCode = hashCode * 59 + this.SubmittedDateTime.GetHashCode();
                if (this.StartedDateTime != null)
                    hashCode = hashCode * 59 + this.StartedDateTime.GetHashCode();
                if (this.EndDateTime != null)
                    hashCode = hashCode * 59 + this.EndDateTime.GetHashCode();
                if (this.DocumentsFoundCount != null)
                    hashCode = hashCode * 59 + this.DocumentsFoundCount.GetHashCode();
                if (this.InfoMessage != null)
                    hashCode = hashCode * 59 + this.InfoMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
