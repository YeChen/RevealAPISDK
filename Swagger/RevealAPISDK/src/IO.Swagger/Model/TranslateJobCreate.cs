/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TranslateJobCreate
    /// </summary>
    [DataContract]
    public partial class TranslateJobCreate :  IEquatable<TranslateJobCreate>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DocumentSelectionType
        /// </summary>
        [DataMember(Name="documentSelectionType", EmitDefaultValue=false)]
        public DocumentSelection? DocumentSelectionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TranslateJobCreate" /> class.
        /// </summary>
        /// <param name="DocumentSelectionType">DocumentSelectionType.</param>
        /// <param name="SelectedDocumentItemIds">SelectedDocumentItemIds.</param>
        /// <param name="SearchJobId">SearchJobId.</param>
        /// <param name="SearchCriteria">SearchCriteria.</param>
        /// <param name="Name">Name.</param>
        /// <param name="LanguageSource">LanguageSource.</param>
        /// <param name="LanguageDest">LanguageDest.</param>
        /// <param name="TextSetSourceId">TextSetSourceId.</param>
        /// <param name="TextSetDestId">TextSetDestId.</param>
        /// <param name="DestLanguageFieldId">DestLanguageFieldId.</param>
        public TranslateJobCreate(DocumentSelection? DocumentSelectionType = default(DocumentSelection?), List<long?> SelectedDocumentItemIds = default(List<long?>), long? SearchJobId = default(long?), BulkActionSearchCriteria SearchCriteria = default(BulkActionSearchCriteria), string Name = default(string), string LanguageSource = default(string), string LanguageDest = default(string), int? TextSetSourceId = default(int?), int? TextSetDestId = default(int?), int? DestLanguageFieldId = default(int?))
        {
            this.DocumentSelectionType = DocumentSelectionType;
            this.SelectedDocumentItemIds = SelectedDocumentItemIds;
            this.SearchJobId = SearchJobId;
            this.SearchCriteria = SearchCriteria;
            this.Name = Name;
            this.LanguageSource = LanguageSource;
            this.LanguageDest = LanguageDest;
            this.TextSetSourceId = TextSetSourceId;
            this.TextSetDestId = TextSetDestId;
            this.DestLanguageFieldId = DestLanguageFieldId;
        }
        

        /// <summary>
        /// Gets or Sets SelectedDocumentItemIds
        /// </summary>
        [DataMember(Name="selectedDocumentItemIds", EmitDefaultValue=false)]
        public List<long?> SelectedDocumentItemIds { get; set; }

        /// <summary>
        /// Gets or Sets SearchJobId
        /// </summary>
        [DataMember(Name="searchJobId", EmitDefaultValue=false)]
        public long? SearchJobId { get; set; }

        /// <summary>
        /// Gets or Sets SearchCriteria
        /// </summary>
        [DataMember(Name="searchCriteria", EmitDefaultValue=false)]
        public BulkActionSearchCriteria SearchCriteria { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets LanguageSource
        /// </summary>
        [DataMember(Name="languageSource", EmitDefaultValue=false)]
        public string LanguageSource { get; set; }

        /// <summary>
        /// Gets or Sets LanguageDest
        /// </summary>
        [DataMember(Name="languageDest", EmitDefaultValue=false)]
        public string LanguageDest { get; set; }

        /// <summary>
        /// Gets or Sets TextSetSourceId
        /// </summary>
        [DataMember(Name="textSetSourceId", EmitDefaultValue=false)]
        public int? TextSetSourceId { get; set; }

        /// <summary>
        /// Gets or Sets TextSetDestId
        /// </summary>
        [DataMember(Name="textSetDestId", EmitDefaultValue=false)]
        public int? TextSetDestId { get; set; }

        /// <summary>
        /// Gets or Sets DestLanguageFieldId
        /// </summary>
        [DataMember(Name="destLanguageFieldId", EmitDefaultValue=false)]
        public int? DestLanguageFieldId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TranslateJobCreate {\n");
            sb.Append("  DocumentSelectionType: ").Append(DocumentSelectionType).Append("\n");
            sb.Append("  SelectedDocumentItemIds: ").Append(SelectedDocumentItemIds).Append("\n");
            sb.Append("  SearchJobId: ").Append(SearchJobId).Append("\n");
            sb.Append("  SearchCriteria: ").Append(SearchCriteria).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LanguageSource: ").Append(LanguageSource).Append("\n");
            sb.Append("  LanguageDest: ").Append(LanguageDest).Append("\n");
            sb.Append("  TextSetSourceId: ").Append(TextSetSourceId).Append("\n");
            sb.Append("  TextSetDestId: ").Append(TextSetDestId).Append("\n");
            sb.Append("  DestLanguageFieldId: ").Append(DestLanguageFieldId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TranslateJobCreate);
        }

        /// <summary>
        /// Returns true if TranslateJobCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of TranslateJobCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranslateJobCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentSelectionType == input.DocumentSelectionType ||
                    (this.DocumentSelectionType != null &&
                    this.DocumentSelectionType.Equals(input.DocumentSelectionType))
                ) && 
                (
                    this.SelectedDocumentItemIds == input.SelectedDocumentItemIds ||
                    this.SelectedDocumentItemIds != null &&
                    this.SelectedDocumentItemIds.SequenceEqual(input.SelectedDocumentItemIds)
                ) && 
                (
                    this.SearchJobId == input.SearchJobId ||
                    (this.SearchJobId != null &&
                    this.SearchJobId.Equals(input.SearchJobId))
                ) && 
                (
                    this.SearchCriteria == input.SearchCriteria ||
                    (this.SearchCriteria != null &&
                    this.SearchCriteria.Equals(input.SearchCriteria))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LanguageSource == input.LanguageSource ||
                    (this.LanguageSource != null &&
                    this.LanguageSource.Equals(input.LanguageSource))
                ) && 
                (
                    this.LanguageDest == input.LanguageDest ||
                    (this.LanguageDest != null &&
                    this.LanguageDest.Equals(input.LanguageDest))
                ) && 
                (
                    this.TextSetSourceId == input.TextSetSourceId ||
                    (this.TextSetSourceId != null &&
                    this.TextSetSourceId.Equals(input.TextSetSourceId))
                ) && 
                (
                    this.TextSetDestId == input.TextSetDestId ||
                    (this.TextSetDestId != null &&
                    this.TextSetDestId.Equals(input.TextSetDestId))
                ) && 
                (
                    this.DestLanguageFieldId == input.DestLanguageFieldId ||
                    (this.DestLanguageFieldId != null &&
                    this.DestLanguageFieldId.Equals(input.DestLanguageFieldId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentSelectionType != null)
                    hashCode = hashCode * 59 + this.DocumentSelectionType.GetHashCode();
                if (this.SelectedDocumentItemIds != null)
                    hashCode = hashCode * 59 + this.SelectedDocumentItemIds.GetHashCode();
                if (this.SearchJobId != null)
                    hashCode = hashCode * 59 + this.SearchJobId.GetHashCode();
                if (this.SearchCriteria != null)
                    hashCode = hashCode * 59 + this.SearchCriteria.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.LanguageSource != null)
                    hashCode = hashCode * 59 + this.LanguageSource.GetHashCode();
                if (this.LanguageDest != null)
                    hashCode = hashCode * 59 + this.LanguageDest.GetHashCode();
                if (this.TextSetSourceId != null)
                    hashCode = hashCode * 59 + this.TextSetSourceId.GetHashCode();
                if (this.TextSetDestId != null)
                    hashCode = hashCode * 59 + this.TextSetDestId.GetHashCode();
                if (this.DestLanguageFieldId != null)
                    hashCode = hashCode * 59 + this.DestLanguageFieldId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
