/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ImageLabelJobCreate
    /// </summary>
    [DataContract]
    public partial class ImageLabelJobCreate :  IEquatable<ImageLabelJobCreate>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DocumentSelectionType
        /// </summary>
        [DataMember(Name="documentSelectionType", EmitDefaultValue=false)]
        public DocumentSelection? DocumentSelectionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageLabelJobCreate" /> class.
        /// </summary>
        /// <param name="DocumentSelectionType">DocumentSelectionType.</param>
        /// <param name="SelectedDocumentItemIds">Required when DocumentSelectionType &#x3D; Subset.</param>
        /// <param name="SearchJobId">Required when DocumentSelectionType &#x3D; AllFromSearchContext.</param>
        /// <param name="SearchCriteria">SearchCriteria.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Id">Id.</param>
        /// <param name="OverwriteExisting">OverwriteExisting.</param>
        public ImageLabelJobCreate(DocumentSelection? DocumentSelectionType = default(DocumentSelection?), List<long?> SelectedDocumentItemIds = default(List<long?>), long? SearchJobId = default(long?), BulkActionSearchCriteria SearchCriteria = default(BulkActionSearchCriteria), string Name = default(string), int? Id = default(int?), bool? OverwriteExisting = default(bool?))
        {
            this.DocumentSelectionType = DocumentSelectionType;
            this.SelectedDocumentItemIds = SelectedDocumentItemIds;
            this.SearchJobId = SearchJobId;
            this.SearchCriteria = SearchCriteria;
            this.Name = Name;
            this.Id = Id;
            this.OverwriteExisting = OverwriteExisting;
        }
        

        /// <summary>
        /// Required when DocumentSelectionType &#x3D; Subset
        /// </summary>
        /// <value>Required when DocumentSelectionType &#x3D; Subset</value>
        [DataMember(Name="selectedDocumentItemIds", EmitDefaultValue=false)]
        public List<long?> SelectedDocumentItemIds { get; set; }

        /// <summary>
        /// Required when DocumentSelectionType &#x3D; AllFromSearchContext
        /// </summary>
        /// <value>Required when DocumentSelectionType &#x3D; AllFromSearchContext</value>
        [DataMember(Name="searchJobId", EmitDefaultValue=false)]
        public long? SearchJobId { get; set; }

        /// <summary>
        /// Gets or Sets SearchCriteria
        /// </summary>
        [DataMember(Name="searchCriteria", EmitDefaultValue=false)]
        public BulkActionSearchCriteria SearchCriteria { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets OverwriteExisting
        /// </summary>
        [DataMember(Name="overwriteExisting", EmitDefaultValue=false)]
        public bool? OverwriteExisting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImageLabelJobCreate {\n");
            sb.Append("  DocumentSelectionType: ").Append(DocumentSelectionType).Append("\n");
            sb.Append("  SelectedDocumentItemIds: ").Append(SelectedDocumentItemIds).Append("\n");
            sb.Append("  SearchJobId: ").Append(SearchJobId).Append("\n");
            sb.Append("  SearchCriteria: ").Append(SearchCriteria).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OverwriteExisting: ").Append(OverwriteExisting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImageLabelJobCreate);
        }

        /// <summary>
        /// Returns true if ImageLabelJobCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of ImageLabelJobCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImageLabelJobCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentSelectionType == input.DocumentSelectionType ||
                    (this.DocumentSelectionType != null &&
                    this.DocumentSelectionType.Equals(input.DocumentSelectionType))
                ) && 
                (
                    this.SelectedDocumentItemIds == input.SelectedDocumentItemIds ||
                    this.SelectedDocumentItemIds != null &&
                    this.SelectedDocumentItemIds.SequenceEqual(input.SelectedDocumentItemIds)
                ) && 
                (
                    this.SearchJobId == input.SearchJobId ||
                    (this.SearchJobId != null &&
                    this.SearchJobId.Equals(input.SearchJobId))
                ) && 
                (
                    this.SearchCriteria == input.SearchCriteria ||
                    (this.SearchCriteria != null &&
                    this.SearchCriteria.Equals(input.SearchCriteria))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OverwriteExisting == input.OverwriteExisting ||
                    (this.OverwriteExisting != null &&
                    this.OverwriteExisting.Equals(input.OverwriteExisting))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentSelectionType != null)
                    hashCode = hashCode * 59 + this.DocumentSelectionType.GetHashCode();
                if (this.SelectedDocumentItemIds != null)
                    hashCode = hashCode * 59 + this.SelectedDocumentItemIds.GetHashCode();
                if (this.SearchJobId != null)
                    hashCode = hashCode * 59 + this.SearchJobId.GetHashCode();
                if (this.SearchCriteria != null)
                    hashCode = hashCode * 59 + this.SearchCriteria.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OverwriteExisting != null)
                    hashCode = hashCode * 59 + this.OverwriteExisting.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
