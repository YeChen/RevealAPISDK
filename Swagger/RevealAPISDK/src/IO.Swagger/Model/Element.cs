/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Element
    /// </summary>
    [DataContract]
    public partial class Element :  IEquatable<Element>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public ElementType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Element" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Required">Required.</param>
        /// <param name="TabId">TabId.</param>
        /// <param name="EmptyText">EmptyText.</param>
        /// <param name="MinValue">MinValue.</param>
        /// <param name="MaxValue">MaxValue.</param>
        /// <param name="DefaultValue">DefaultValue.</param>
        /// <param name="AvailableValues">AvailableValues.</param>
        /// <param name="AreValuesTranslateAble">AreValuesTranslateAble.</param>
        /// <param name="MaxLength">MaxLength.</param>
        /// <param name="ShowHelpText">ShowHelpText.</param>
        /// <param name="ComplementId">ComplementId.</param>
        /// <param name="ParentId">ParentId.</param>
        /// <param name="VisibilityControlledBy">VisibilityControlledBy.</param>
        /// <param name="PostLabel">PostLabel.</param>
        /// <param name="MultipleSelect">MultipleSelect.</param>
        /// <param name="DisplaySettings">DisplaySettings.</param>
        public Element(string Id = default(string), ElementType? Type = default(ElementType?), bool? Required = default(bool?), string TabId = default(string), string EmptyText = default(string), Object MinValue = default(Object), Object MaxValue = default(Object), Object DefaultValue = default(Object), List<ListItem> AvailableValues = default(List<ListItem>), bool? AreValuesTranslateAble = default(bool?), int? MaxLength = default(int?), bool? ShowHelpText = default(bool?), string ComplementId = default(string), string ParentId = default(string), Object VisibilityControlledBy = default(Object), string PostLabel = default(string), Object MultipleSelect = default(Object), LabelPostionSettings DisplaySettings = default(LabelPostionSettings))
        {
            this.Id = Id;
            this.Type = Type;
            this.Required = Required;
            this.TabId = TabId;
            this.EmptyText = EmptyText;
            this.MinValue = MinValue;
            this.MaxValue = MaxValue;
            this.DefaultValue = DefaultValue;
            this.AvailableValues = AvailableValues;
            this.AreValuesTranslateAble = AreValuesTranslateAble;
            this.MaxLength = MaxLength;
            this.ShowHelpText = ShowHelpText;
            this.ComplementId = ComplementId;
            this.ParentId = ParentId;
            this.VisibilityControlledBy = VisibilityControlledBy;
            this.PostLabel = PostLabel;
            this.MultipleSelect = MultipleSelect;
            this.DisplaySettings = DisplaySettings;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// Gets or Sets TabId
        /// </summary>
        [DataMember(Name="tabId", EmitDefaultValue=false)]
        public string TabId { get; set; }

        /// <summary>
        /// Gets or Sets EmptyText
        /// </summary>
        [DataMember(Name="emptyText", EmitDefaultValue=false)]
        public string EmptyText { get; set; }

        /// <summary>
        /// Gets or Sets MinValue
        /// </summary>
        [DataMember(Name="minValue", EmitDefaultValue=false)]
        public Object MinValue { get; set; }

        /// <summary>
        /// Gets or Sets MaxValue
        /// </summary>
        [DataMember(Name="maxValue", EmitDefaultValue=false)]
        public Object MaxValue { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name="defaultValue", EmitDefaultValue=false)]
        public Object DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets AvailableValues
        /// </summary>
        [DataMember(Name="availableValues", EmitDefaultValue=false)]
        public List<ListItem> AvailableValues { get; set; }

        /// <summary>
        /// Gets or Sets AreValuesTranslateAble
        /// </summary>
        [DataMember(Name="areValuesTranslateAble", EmitDefaultValue=false)]
        public bool? AreValuesTranslateAble { get; set; }

        /// <summary>
        /// Gets or Sets MaxLength
        /// </summary>
        [DataMember(Name="maxLength", EmitDefaultValue=false)]
        public int? MaxLength { get; set; }

        /// <summary>
        /// Gets or Sets ShowHelpText
        /// </summary>
        [DataMember(Name="showHelpText", EmitDefaultValue=false)]
        public bool? ShowHelpText { get; set; }

        /// <summary>
        /// Gets or Sets ComplementId
        /// </summary>
        [DataMember(Name="complementId", EmitDefaultValue=false)]
        public string ComplementId { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public string ParentId { get; set; }

        /// <summary>
        /// Gets or Sets VisibilityControlledBy
        /// </summary>
        [DataMember(Name="visibilityControlledBy", EmitDefaultValue=false)]
        public Object VisibilityControlledBy { get; set; }

        /// <summary>
        /// Gets or Sets PostLabel
        /// </summary>
        [DataMember(Name="postLabel", EmitDefaultValue=false)]
        public string PostLabel { get; set; }

        /// <summary>
        /// Gets or Sets MultipleSelect
        /// </summary>
        [DataMember(Name="multipleSelect", EmitDefaultValue=false)]
        public Object MultipleSelect { get; set; }

        /// <summary>
        /// Gets or Sets DisplaySettings
        /// </summary>
        [DataMember(Name="displaySettings", EmitDefaultValue=false)]
        public LabelPostionSettings DisplaySettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Element {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  TabId: ").Append(TabId).Append("\n");
            sb.Append("  EmptyText: ").Append(EmptyText).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  AvailableValues: ").Append(AvailableValues).Append("\n");
            sb.Append("  AreValuesTranslateAble: ").Append(AreValuesTranslateAble).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  ShowHelpText: ").Append(ShowHelpText).Append("\n");
            sb.Append("  ComplementId: ").Append(ComplementId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  VisibilityControlledBy: ").Append(VisibilityControlledBy).Append("\n");
            sb.Append("  PostLabel: ").Append(PostLabel).Append("\n");
            sb.Append("  MultipleSelect: ").Append(MultipleSelect).Append("\n");
            sb.Append("  DisplaySettings: ").Append(DisplaySettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Element);
        }

        /// <summary>
        /// Returns true if Element instances are equal
        /// </summary>
        /// <param name="input">Instance of Element to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Element input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.TabId == input.TabId ||
                    (this.TabId != null &&
                    this.TabId.Equals(input.TabId))
                ) && 
                (
                    this.EmptyText == input.EmptyText ||
                    (this.EmptyText != null &&
                    this.EmptyText.Equals(input.EmptyText))
                ) && 
                (
                    this.MinValue == input.MinValue ||
                    (this.MinValue != null &&
                    this.MinValue.Equals(input.MinValue))
                ) && 
                (
                    this.MaxValue == input.MaxValue ||
                    (this.MaxValue != null &&
                    this.MaxValue.Equals(input.MaxValue))
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.AvailableValues == input.AvailableValues ||
                    this.AvailableValues != null &&
                    this.AvailableValues.SequenceEqual(input.AvailableValues)
                ) && 
                (
                    this.AreValuesTranslateAble == input.AreValuesTranslateAble ||
                    (this.AreValuesTranslateAble != null &&
                    this.AreValuesTranslateAble.Equals(input.AreValuesTranslateAble))
                ) && 
                (
                    this.MaxLength == input.MaxLength ||
                    (this.MaxLength != null &&
                    this.MaxLength.Equals(input.MaxLength))
                ) && 
                (
                    this.ShowHelpText == input.ShowHelpText ||
                    (this.ShowHelpText != null &&
                    this.ShowHelpText.Equals(input.ShowHelpText))
                ) && 
                (
                    this.ComplementId == input.ComplementId ||
                    (this.ComplementId != null &&
                    this.ComplementId.Equals(input.ComplementId))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.VisibilityControlledBy == input.VisibilityControlledBy ||
                    (this.VisibilityControlledBy != null &&
                    this.VisibilityControlledBy.Equals(input.VisibilityControlledBy))
                ) && 
                (
                    this.PostLabel == input.PostLabel ||
                    (this.PostLabel != null &&
                    this.PostLabel.Equals(input.PostLabel))
                ) && 
                (
                    this.MultipleSelect == input.MultipleSelect ||
                    (this.MultipleSelect != null &&
                    this.MultipleSelect.Equals(input.MultipleSelect))
                ) && 
                (
                    this.DisplaySettings == input.DisplaySettings ||
                    (this.DisplaySettings != null &&
                    this.DisplaySettings.Equals(input.DisplaySettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Required != null)
                    hashCode = hashCode * 59 + this.Required.GetHashCode();
                if (this.TabId != null)
                    hashCode = hashCode * 59 + this.TabId.GetHashCode();
                if (this.EmptyText != null)
                    hashCode = hashCode * 59 + this.EmptyText.GetHashCode();
                if (this.MinValue != null)
                    hashCode = hashCode * 59 + this.MinValue.GetHashCode();
                if (this.MaxValue != null)
                    hashCode = hashCode * 59 + this.MaxValue.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.AvailableValues != null)
                    hashCode = hashCode * 59 + this.AvailableValues.GetHashCode();
                if (this.AreValuesTranslateAble != null)
                    hashCode = hashCode * 59 + this.AreValuesTranslateAble.GetHashCode();
                if (this.MaxLength != null)
                    hashCode = hashCode * 59 + this.MaxLength.GetHashCode();
                if (this.ShowHelpText != null)
                    hashCode = hashCode * 59 + this.ShowHelpText.GetHashCode();
                if (this.ComplementId != null)
                    hashCode = hashCode * 59 + this.ComplementId.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                if (this.VisibilityControlledBy != null)
                    hashCode = hashCode * 59 + this.VisibilityControlledBy.GetHashCode();
                if (this.PostLabel != null)
                    hashCode = hashCode * 59 + this.PostLabel.GetHashCode();
                if (this.MultipleSelect != null)
                    hashCode = hashCode * 59 + this.MultipleSelect.GetHashCode();
                if (this.DisplaySettings != null)
                    hashCode = hashCode * 59 + this.DisplaySettings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
