/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FolderDocumentCountsResultsListAggregations
    /// </summary>
    [DataContract]
    public partial class FolderDocumentCountsResultsListAggregations :  IEquatable<FolderDocumentCountsResultsListAggregations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FolderDocumentCountsResultsListAggregations" /> class.
        /// </summary>
        /// <param name="Work">Work.</param>
        /// <param name="Document">Document.</param>
        /// <param name="Assignment">Assignment.</param>
        /// <param name="Transcript">Transcript.</param>
        /// <param name="Imports">Imports.</param>
        /// <param name="SecuredByTeam">SecuredByTeam.</param>
        /// <param name="SecuredByUser">SecuredByUser.</param>
        /// <param name="Unsecured">Unsecured.</param>
        /// <param name="Redaction">Redaction.</param>
        /// <param name="AssignmentByBatch">AssignmentByBatch.</param>
        /// <param name="AssignmentByCustodian">AssignmentByCustodian.</param>
        /// <param name="AssignmentByJob">AssignmentByJob.</param>
        /// <param name="AssignmentByFolderIsReviewed">AssignmentByFolderIsReviewed.</param>
        /// <param name="AssignmentByFolderIsNotReviewed">AssignmentByFolderIsNotReviewed.</param>
        /// <param name="AssignmentByJobIsReviewed">AssignmentByJobIsReviewed.</param>
        /// <param name="AssignmentByJobIsNotReviewed">AssignmentByJobIsNotReviewed.</param>
        /// <param name="TagProfileIsReviewed">TagProfileIsReviewed.</param>
        /// <param name="TagProfileIsNotReviewed">TagProfileIsNotReviewed.</param>
        /// <param name="SavedSearch">SavedSearch.</param>
        /// <param name="SearchHistory">SearchHistory.</param>
        /// <param name="AdminView">AdminView.</param>
        /// <param name="SearchView">SearchView.</param>
        /// <param name="Secured">Secured.</param>
        /// <param name="AssignmentLabel">AssignmentLabel.</param>
        /// <param name="AssignmentByBatchFolder">AssignmentByBatchFolder.</param>
        /// <param name="AssignmentByReviewer">AssignmentByReviewer.</param>
        /// <param name="WorkByUser">WorkByUser.</param>
        /// <param name="WorkFolderAll">WorkFolderAll.</param>
        /// <param name="TranscriptByUser">TranscriptByUser.</param>
        /// <param name="TranscriptAll">TranscriptAll.</param>
        /// <param name="RedactionByUser">RedactionByUser.</param>
        /// <param name="RedactionAll">RedactionAll.</param>
        /// <param name="SavedSearchByUser">SavedSearchByUser.</param>
        /// <param name="SavedSearchAll">SavedSearchAll.</param>
        /// <param name="Filter">Filter.</param>
        /// <param name="AnnotationFilter">AnnotationFilter.</param>
        /// <param name="TagFilter">TagFilter.</param>
        /// <param name="PrivilegedTagFilter">PrivilegedTagFilter.</param>
        /// <param name="DocumentStatusFilter">DocumentStatusFilter.</param>
        /// <param name="OriginalFilter">OriginalFilter.</param>
        /// <param name="DeduplicationFilter">DeduplicationFilter.</param>
        /// <param name="CustodianFilter">CustodianFilter.</param>
        /// <param name="FormatFilter">FormatFilter.</param>
        /// <param name="ReviewStatusFilter">ReviewStatusFilter.</param>
        /// <param name="PeopleFilter">PeopleFilter.</param>
        /// <param name="EntitiesFilter">EntitiesFilter.</param>
        /// <param name="SentimentFilter">SentimentFilter.</param>
        public FolderDocumentCountsResultsListAggregations(AggregationSearchResult Work = default(AggregationSearchResult), AggregationSearchResult Document = default(AggregationSearchResult), AggregationSearchResult Assignment = default(AggregationSearchResult), AggregationSearchResult Transcript = default(AggregationSearchResult), AggregationSearchResult Imports = default(AggregationSearchResult), AggregationSearchResult SecuredByTeam = default(AggregationSearchResult), AggregationSearchResult SecuredByUser = default(AggregationSearchResult), AggregationSearchResult Unsecured = default(AggregationSearchResult), AggregationSearchResult Redaction = default(AggregationSearchResult), AggregationSearchResult AssignmentByBatch = default(AggregationSearchResult), AggregationSearchResult AssignmentByCustodian = default(AggregationSearchResult), AggregationSearchResult AssignmentByJob = default(AggregationSearchResult), AggregationSearchResult AssignmentByFolderIsReviewed = default(AggregationSearchResult), AggregationSearchResult AssignmentByFolderIsNotReviewed = default(AggregationSearchResult), AggregationSearchResult AssignmentByJobIsReviewed = default(AggregationSearchResult), AggregationSearchResult AssignmentByJobIsNotReviewed = default(AggregationSearchResult), AggregationSearchResult TagProfileIsReviewed = default(AggregationSearchResult), AggregationSearchResult TagProfileIsNotReviewed = default(AggregationSearchResult), AggregationSearchResult SavedSearch = default(AggregationSearchResult), AggregationSearchResult SearchHistory = default(AggregationSearchResult), AggregationSearchResult AdminView = default(AggregationSearchResult), AggregationSearchResult SearchView = default(AggregationSearchResult), AggregationSearchResult Secured = default(AggregationSearchResult), AggregationSearchResult AssignmentLabel = default(AggregationSearchResult), AggregationSearchResult AssignmentByBatchFolder = default(AggregationSearchResult), AggregationSearchResult AssignmentByReviewer = default(AggregationSearchResult), AggregationSearchResult WorkByUser = default(AggregationSearchResult), AggregationSearchResult WorkFolderAll = default(AggregationSearchResult), AggregationSearchResult TranscriptByUser = default(AggregationSearchResult), AggregationSearchResult TranscriptAll = default(AggregationSearchResult), AggregationSearchResult RedactionByUser = default(AggregationSearchResult), AggregationSearchResult RedactionAll = default(AggregationSearchResult), AggregationSearchResult SavedSearchByUser = default(AggregationSearchResult), AggregationSearchResult SavedSearchAll = default(AggregationSearchResult), AggregationSearchResult Filter = default(AggregationSearchResult), AggregationSearchResult AnnotationFilter = default(AggregationSearchResult), AggregationSearchResult TagFilter = default(AggregationSearchResult), AggregationSearchResult PrivilegedTagFilter = default(AggregationSearchResult), AggregationSearchResult DocumentStatusFilter = default(AggregationSearchResult), AggregationSearchResult OriginalFilter = default(AggregationSearchResult), AggregationSearchResult DeduplicationFilter = default(AggregationSearchResult), AggregationSearchResult CustodianFilter = default(AggregationSearchResult), AggregationSearchResult FormatFilter = default(AggregationSearchResult), AggregationSearchResult ReviewStatusFilter = default(AggregationSearchResult), AggregationSearchResult PeopleFilter = default(AggregationSearchResult), AggregationSearchResult EntitiesFilter = default(AggregationSearchResult), AggregationSearchResult SentimentFilter = default(AggregationSearchResult))
        {
            this.Work = Work;
            this.Document = Document;
            this.Assignment = Assignment;
            this.Transcript = Transcript;
            this.Imports = Imports;
            this.SecuredByTeam = SecuredByTeam;
            this.SecuredByUser = SecuredByUser;
            this.Unsecured = Unsecured;
            this.Redaction = Redaction;
            this.AssignmentByBatch = AssignmentByBatch;
            this.AssignmentByCustodian = AssignmentByCustodian;
            this.AssignmentByJob = AssignmentByJob;
            this.AssignmentByFolderIsReviewed = AssignmentByFolderIsReviewed;
            this.AssignmentByFolderIsNotReviewed = AssignmentByFolderIsNotReviewed;
            this.AssignmentByJobIsReviewed = AssignmentByJobIsReviewed;
            this.AssignmentByJobIsNotReviewed = AssignmentByJobIsNotReviewed;
            this.TagProfileIsReviewed = TagProfileIsReviewed;
            this.TagProfileIsNotReviewed = TagProfileIsNotReviewed;
            this.SavedSearch = SavedSearch;
            this.SearchHistory = SearchHistory;
            this.AdminView = AdminView;
            this.SearchView = SearchView;
            this.Secured = Secured;
            this.AssignmentLabel = AssignmentLabel;
            this.AssignmentByBatchFolder = AssignmentByBatchFolder;
            this.AssignmentByReviewer = AssignmentByReviewer;
            this.WorkByUser = WorkByUser;
            this.WorkFolderAll = WorkFolderAll;
            this.TranscriptByUser = TranscriptByUser;
            this.TranscriptAll = TranscriptAll;
            this.RedactionByUser = RedactionByUser;
            this.RedactionAll = RedactionAll;
            this.SavedSearchByUser = SavedSearchByUser;
            this.SavedSearchAll = SavedSearchAll;
            this.Filter = Filter;
            this.AnnotationFilter = AnnotationFilter;
            this.TagFilter = TagFilter;
            this.PrivilegedTagFilter = PrivilegedTagFilter;
            this.DocumentStatusFilter = DocumentStatusFilter;
            this.OriginalFilter = OriginalFilter;
            this.DeduplicationFilter = DeduplicationFilter;
            this.CustodianFilter = CustodianFilter;
            this.FormatFilter = FormatFilter;
            this.ReviewStatusFilter = ReviewStatusFilter;
            this.PeopleFilter = PeopleFilter;
            this.EntitiesFilter = EntitiesFilter;
            this.SentimentFilter = SentimentFilter;
        }
        
        /// <summary>
        /// Gets or Sets Work
        /// </summary>
        [DataMember(Name="Work", EmitDefaultValue=false)]
        public AggregationSearchResult Work { get; set; }

        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [DataMember(Name="Document", EmitDefaultValue=false)]
        public AggregationSearchResult Document { get; set; }

        /// <summary>
        /// Gets or Sets Assignment
        /// </summary>
        [DataMember(Name="Assignment", EmitDefaultValue=false)]
        public AggregationSearchResult Assignment { get; set; }

        /// <summary>
        /// Gets or Sets Transcript
        /// </summary>
        [DataMember(Name="Transcript", EmitDefaultValue=false)]
        public AggregationSearchResult Transcript { get; set; }

        /// <summary>
        /// Gets or Sets Imports
        /// </summary>
        [DataMember(Name="Imports", EmitDefaultValue=false)]
        public AggregationSearchResult Imports { get; set; }

        /// <summary>
        /// Gets or Sets SecuredByTeam
        /// </summary>
        [DataMember(Name="SecuredByTeam", EmitDefaultValue=false)]
        public AggregationSearchResult SecuredByTeam { get; set; }

        /// <summary>
        /// Gets or Sets SecuredByUser
        /// </summary>
        [DataMember(Name="SecuredByUser", EmitDefaultValue=false)]
        public AggregationSearchResult SecuredByUser { get; set; }

        /// <summary>
        /// Gets or Sets Unsecured
        /// </summary>
        [DataMember(Name="Unsecured", EmitDefaultValue=false)]
        public AggregationSearchResult Unsecured { get; set; }

        /// <summary>
        /// Gets or Sets Redaction
        /// </summary>
        [DataMember(Name="Redaction", EmitDefaultValue=false)]
        public AggregationSearchResult Redaction { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentByBatch
        /// </summary>
        [DataMember(Name="AssignmentByBatch", EmitDefaultValue=false)]
        public AggregationSearchResult AssignmentByBatch { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentByCustodian
        /// </summary>
        [DataMember(Name="AssignmentByCustodian", EmitDefaultValue=false)]
        public AggregationSearchResult AssignmentByCustodian { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentByJob
        /// </summary>
        [DataMember(Name="AssignmentByJob", EmitDefaultValue=false)]
        public AggregationSearchResult AssignmentByJob { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentByFolderIsReviewed
        /// </summary>
        [DataMember(Name="AssignmentByFolderIsReviewed", EmitDefaultValue=false)]
        public AggregationSearchResult AssignmentByFolderIsReviewed { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentByFolderIsNotReviewed
        /// </summary>
        [DataMember(Name="AssignmentByFolderIsNotReviewed", EmitDefaultValue=false)]
        public AggregationSearchResult AssignmentByFolderIsNotReviewed { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentByJobIsReviewed
        /// </summary>
        [DataMember(Name="AssignmentByJobIsReviewed", EmitDefaultValue=false)]
        public AggregationSearchResult AssignmentByJobIsReviewed { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentByJobIsNotReviewed
        /// </summary>
        [DataMember(Name="AssignmentByJobIsNotReviewed", EmitDefaultValue=false)]
        public AggregationSearchResult AssignmentByJobIsNotReviewed { get; set; }

        /// <summary>
        /// Gets or Sets TagProfileIsReviewed
        /// </summary>
        [DataMember(Name="TagProfileIsReviewed", EmitDefaultValue=false)]
        public AggregationSearchResult TagProfileIsReviewed { get; set; }

        /// <summary>
        /// Gets or Sets TagProfileIsNotReviewed
        /// </summary>
        [DataMember(Name="TagProfileIsNotReviewed", EmitDefaultValue=false)]
        public AggregationSearchResult TagProfileIsNotReviewed { get; set; }

        /// <summary>
        /// Gets or Sets SavedSearch
        /// </summary>
        [DataMember(Name="SavedSearch", EmitDefaultValue=false)]
        public AggregationSearchResult SavedSearch { get; set; }

        /// <summary>
        /// Gets or Sets SearchHistory
        /// </summary>
        [DataMember(Name="SearchHistory", EmitDefaultValue=false)]
        public AggregationSearchResult SearchHistory { get; set; }

        /// <summary>
        /// Gets or Sets AdminView
        /// </summary>
        [DataMember(Name="AdminView", EmitDefaultValue=false)]
        public AggregationSearchResult AdminView { get; set; }

        /// <summary>
        /// Gets or Sets SearchView
        /// </summary>
        [DataMember(Name="SearchView", EmitDefaultValue=false)]
        public AggregationSearchResult SearchView { get; set; }

        /// <summary>
        /// Gets or Sets Secured
        /// </summary>
        [DataMember(Name="Secured", EmitDefaultValue=false)]
        public AggregationSearchResult Secured { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentLabel
        /// </summary>
        [DataMember(Name="AssignmentLabel", EmitDefaultValue=false)]
        public AggregationSearchResult AssignmentLabel { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentByBatchFolder
        /// </summary>
        [DataMember(Name="AssignmentByBatchFolder", EmitDefaultValue=false)]
        public AggregationSearchResult AssignmentByBatchFolder { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentByReviewer
        /// </summary>
        [DataMember(Name="AssignmentByReviewer", EmitDefaultValue=false)]
        public AggregationSearchResult AssignmentByReviewer { get; set; }

        /// <summary>
        /// Gets or Sets WorkByUser
        /// </summary>
        [DataMember(Name="WorkByUser", EmitDefaultValue=false)]
        public AggregationSearchResult WorkByUser { get; set; }

        /// <summary>
        /// Gets or Sets WorkFolderAll
        /// </summary>
        [DataMember(Name="WorkFolderAll", EmitDefaultValue=false)]
        public AggregationSearchResult WorkFolderAll { get; set; }

        /// <summary>
        /// Gets or Sets TranscriptByUser
        /// </summary>
        [DataMember(Name="TranscriptByUser", EmitDefaultValue=false)]
        public AggregationSearchResult TranscriptByUser { get; set; }

        /// <summary>
        /// Gets or Sets TranscriptAll
        /// </summary>
        [DataMember(Name="TranscriptAll", EmitDefaultValue=false)]
        public AggregationSearchResult TranscriptAll { get; set; }

        /// <summary>
        /// Gets or Sets RedactionByUser
        /// </summary>
        [DataMember(Name="RedactionByUser", EmitDefaultValue=false)]
        public AggregationSearchResult RedactionByUser { get; set; }

        /// <summary>
        /// Gets or Sets RedactionAll
        /// </summary>
        [DataMember(Name="RedactionAll", EmitDefaultValue=false)]
        public AggregationSearchResult RedactionAll { get; set; }

        /// <summary>
        /// Gets or Sets SavedSearchByUser
        /// </summary>
        [DataMember(Name="SavedSearchByUser", EmitDefaultValue=false)]
        public AggregationSearchResult SavedSearchByUser { get; set; }

        /// <summary>
        /// Gets or Sets SavedSearchAll
        /// </summary>
        [DataMember(Name="SavedSearchAll", EmitDefaultValue=false)]
        public AggregationSearchResult SavedSearchAll { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name="Filter", EmitDefaultValue=false)]
        public AggregationSearchResult Filter { get; set; }

        /// <summary>
        /// Gets or Sets AnnotationFilter
        /// </summary>
        [DataMember(Name="AnnotationFilter", EmitDefaultValue=false)]
        public AggregationSearchResult AnnotationFilter { get; set; }

        /// <summary>
        /// Gets or Sets TagFilter
        /// </summary>
        [DataMember(Name="TagFilter", EmitDefaultValue=false)]
        public AggregationSearchResult TagFilter { get; set; }

        /// <summary>
        /// Gets or Sets PrivilegedTagFilter
        /// </summary>
        [DataMember(Name="PrivilegedTagFilter", EmitDefaultValue=false)]
        public AggregationSearchResult PrivilegedTagFilter { get; set; }

        /// <summary>
        /// Gets or Sets DocumentStatusFilter
        /// </summary>
        [DataMember(Name="DocumentStatusFilter", EmitDefaultValue=false)]
        public AggregationSearchResult DocumentStatusFilter { get; set; }

        /// <summary>
        /// Gets or Sets OriginalFilter
        /// </summary>
        [DataMember(Name="OriginalFilter", EmitDefaultValue=false)]
        public AggregationSearchResult OriginalFilter { get; set; }

        /// <summary>
        /// Gets or Sets DeduplicationFilter
        /// </summary>
        [DataMember(Name="DeduplicationFilter", EmitDefaultValue=false)]
        public AggregationSearchResult DeduplicationFilter { get; set; }

        /// <summary>
        /// Gets or Sets CustodianFilter
        /// </summary>
        [DataMember(Name="CustodianFilter", EmitDefaultValue=false)]
        public AggregationSearchResult CustodianFilter { get; set; }

        /// <summary>
        /// Gets or Sets FormatFilter
        /// </summary>
        [DataMember(Name="FormatFilter", EmitDefaultValue=false)]
        public AggregationSearchResult FormatFilter { get; set; }

        /// <summary>
        /// Gets or Sets ReviewStatusFilter
        /// </summary>
        [DataMember(Name="ReviewStatusFilter", EmitDefaultValue=false)]
        public AggregationSearchResult ReviewStatusFilter { get; set; }

        /// <summary>
        /// Gets or Sets PeopleFilter
        /// </summary>
        [DataMember(Name="PeopleFilter", EmitDefaultValue=false)]
        public AggregationSearchResult PeopleFilter { get; set; }

        /// <summary>
        /// Gets or Sets EntitiesFilter
        /// </summary>
        [DataMember(Name="EntitiesFilter", EmitDefaultValue=false)]
        public AggregationSearchResult EntitiesFilter { get; set; }

        /// <summary>
        /// Gets or Sets SentimentFilter
        /// </summary>
        [DataMember(Name="SentimentFilter", EmitDefaultValue=false)]
        public AggregationSearchResult SentimentFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FolderDocumentCountsResultsListAggregations {\n");
            sb.Append("  Work: ").Append(Work).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  Assignment: ").Append(Assignment).Append("\n");
            sb.Append("  Transcript: ").Append(Transcript).Append("\n");
            sb.Append("  Imports: ").Append(Imports).Append("\n");
            sb.Append("  SecuredByTeam: ").Append(SecuredByTeam).Append("\n");
            sb.Append("  SecuredByUser: ").Append(SecuredByUser).Append("\n");
            sb.Append("  Unsecured: ").Append(Unsecured).Append("\n");
            sb.Append("  Redaction: ").Append(Redaction).Append("\n");
            sb.Append("  AssignmentByBatch: ").Append(AssignmentByBatch).Append("\n");
            sb.Append("  AssignmentByCustodian: ").Append(AssignmentByCustodian).Append("\n");
            sb.Append("  AssignmentByJob: ").Append(AssignmentByJob).Append("\n");
            sb.Append("  AssignmentByFolderIsReviewed: ").Append(AssignmentByFolderIsReviewed).Append("\n");
            sb.Append("  AssignmentByFolderIsNotReviewed: ").Append(AssignmentByFolderIsNotReviewed).Append("\n");
            sb.Append("  AssignmentByJobIsReviewed: ").Append(AssignmentByJobIsReviewed).Append("\n");
            sb.Append("  AssignmentByJobIsNotReviewed: ").Append(AssignmentByJobIsNotReviewed).Append("\n");
            sb.Append("  TagProfileIsReviewed: ").Append(TagProfileIsReviewed).Append("\n");
            sb.Append("  TagProfileIsNotReviewed: ").Append(TagProfileIsNotReviewed).Append("\n");
            sb.Append("  SavedSearch: ").Append(SavedSearch).Append("\n");
            sb.Append("  SearchHistory: ").Append(SearchHistory).Append("\n");
            sb.Append("  AdminView: ").Append(AdminView).Append("\n");
            sb.Append("  SearchView: ").Append(SearchView).Append("\n");
            sb.Append("  Secured: ").Append(Secured).Append("\n");
            sb.Append("  AssignmentLabel: ").Append(AssignmentLabel).Append("\n");
            sb.Append("  AssignmentByBatchFolder: ").Append(AssignmentByBatchFolder).Append("\n");
            sb.Append("  AssignmentByReviewer: ").Append(AssignmentByReviewer).Append("\n");
            sb.Append("  WorkByUser: ").Append(WorkByUser).Append("\n");
            sb.Append("  WorkFolderAll: ").Append(WorkFolderAll).Append("\n");
            sb.Append("  TranscriptByUser: ").Append(TranscriptByUser).Append("\n");
            sb.Append("  TranscriptAll: ").Append(TranscriptAll).Append("\n");
            sb.Append("  RedactionByUser: ").Append(RedactionByUser).Append("\n");
            sb.Append("  RedactionAll: ").Append(RedactionAll).Append("\n");
            sb.Append("  SavedSearchByUser: ").Append(SavedSearchByUser).Append("\n");
            sb.Append("  SavedSearchAll: ").Append(SavedSearchAll).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  AnnotationFilter: ").Append(AnnotationFilter).Append("\n");
            sb.Append("  TagFilter: ").Append(TagFilter).Append("\n");
            sb.Append("  PrivilegedTagFilter: ").Append(PrivilegedTagFilter).Append("\n");
            sb.Append("  DocumentStatusFilter: ").Append(DocumentStatusFilter).Append("\n");
            sb.Append("  OriginalFilter: ").Append(OriginalFilter).Append("\n");
            sb.Append("  DeduplicationFilter: ").Append(DeduplicationFilter).Append("\n");
            sb.Append("  CustodianFilter: ").Append(CustodianFilter).Append("\n");
            sb.Append("  FormatFilter: ").Append(FormatFilter).Append("\n");
            sb.Append("  ReviewStatusFilter: ").Append(ReviewStatusFilter).Append("\n");
            sb.Append("  PeopleFilter: ").Append(PeopleFilter).Append("\n");
            sb.Append("  EntitiesFilter: ").Append(EntitiesFilter).Append("\n");
            sb.Append("  SentimentFilter: ").Append(SentimentFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FolderDocumentCountsResultsListAggregations);
        }

        /// <summary>
        /// Returns true if FolderDocumentCountsResultsListAggregations instances are equal
        /// </summary>
        /// <param name="input">Instance of FolderDocumentCountsResultsListAggregations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FolderDocumentCountsResultsListAggregations input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Work == input.Work ||
                    (this.Work != null &&
                    this.Work.Equals(input.Work))
                ) && 
                (
                    this.Document == input.Document ||
                    (this.Document != null &&
                    this.Document.Equals(input.Document))
                ) && 
                (
                    this.Assignment == input.Assignment ||
                    (this.Assignment != null &&
                    this.Assignment.Equals(input.Assignment))
                ) && 
                (
                    this.Transcript == input.Transcript ||
                    (this.Transcript != null &&
                    this.Transcript.Equals(input.Transcript))
                ) && 
                (
                    this.Imports == input.Imports ||
                    (this.Imports != null &&
                    this.Imports.Equals(input.Imports))
                ) && 
                (
                    this.SecuredByTeam == input.SecuredByTeam ||
                    (this.SecuredByTeam != null &&
                    this.SecuredByTeam.Equals(input.SecuredByTeam))
                ) && 
                (
                    this.SecuredByUser == input.SecuredByUser ||
                    (this.SecuredByUser != null &&
                    this.SecuredByUser.Equals(input.SecuredByUser))
                ) && 
                (
                    this.Unsecured == input.Unsecured ||
                    (this.Unsecured != null &&
                    this.Unsecured.Equals(input.Unsecured))
                ) && 
                (
                    this.Redaction == input.Redaction ||
                    (this.Redaction != null &&
                    this.Redaction.Equals(input.Redaction))
                ) && 
                (
                    this.AssignmentByBatch == input.AssignmentByBatch ||
                    (this.AssignmentByBatch != null &&
                    this.AssignmentByBatch.Equals(input.AssignmentByBatch))
                ) && 
                (
                    this.AssignmentByCustodian == input.AssignmentByCustodian ||
                    (this.AssignmentByCustodian != null &&
                    this.AssignmentByCustodian.Equals(input.AssignmentByCustodian))
                ) && 
                (
                    this.AssignmentByJob == input.AssignmentByJob ||
                    (this.AssignmentByJob != null &&
                    this.AssignmentByJob.Equals(input.AssignmentByJob))
                ) && 
                (
                    this.AssignmentByFolderIsReviewed == input.AssignmentByFolderIsReviewed ||
                    (this.AssignmentByFolderIsReviewed != null &&
                    this.AssignmentByFolderIsReviewed.Equals(input.AssignmentByFolderIsReviewed))
                ) && 
                (
                    this.AssignmentByFolderIsNotReviewed == input.AssignmentByFolderIsNotReviewed ||
                    (this.AssignmentByFolderIsNotReviewed != null &&
                    this.AssignmentByFolderIsNotReviewed.Equals(input.AssignmentByFolderIsNotReviewed))
                ) && 
                (
                    this.AssignmentByJobIsReviewed == input.AssignmentByJobIsReviewed ||
                    (this.AssignmentByJobIsReviewed != null &&
                    this.AssignmentByJobIsReviewed.Equals(input.AssignmentByJobIsReviewed))
                ) && 
                (
                    this.AssignmentByJobIsNotReviewed == input.AssignmentByJobIsNotReviewed ||
                    (this.AssignmentByJobIsNotReviewed != null &&
                    this.AssignmentByJobIsNotReviewed.Equals(input.AssignmentByJobIsNotReviewed))
                ) && 
                (
                    this.TagProfileIsReviewed == input.TagProfileIsReviewed ||
                    (this.TagProfileIsReviewed != null &&
                    this.TagProfileIsReviewed.Equals(input.TagProfileIsReviewed))
                ) && 
                (
                    this.TagProfileIsNotReviewed == input.TagProfileIsNotReviewed ||
                    (this.TagProfileIsNotReviewed != null &&
                    this.TagProfileIsNotReviewed.Equals(input.TagProfileIsNotReviewed))
                ) && 
                (
                    this.SavedSearch == input.SavedSearch ||
                    (this.SavedSearch != null &&
                    this.SavedSearch.Equals(input.SavedSearch))
                ) && 
                (
                    this.SearchHistory == input.SearchHistory ||
                    (this.SearchHistory != null &&
                    this.SearchHistory.Equals(input.SearchHistory))
                ) && 
                (
                    this.AdminView == input.AdminView ||
                    (this.AdminView != null &&
                    this.AdminView.Equals(input.AdminView))
                ) && 
                (
                    this.SearchView == input.SearchView ||
                    (this.SearchView != null &&
                    this.SearchView.Equals(input.SearchView))
                ) && 
                (
                    this.Secured == input.Secured ||
                    (this.Secured != null &&
                    this.Secured.Equals(input.Secured))
                ) && 
                (
                    this.AssignmentLabel == input.AssignmentLabel ||
                    (this.AssignmentLabel != null &&
                    this.AssignmentLabel.Equals(input.AssignmentLabel))
                ) && 
                (
                    this.AssignmentByBatchFolder == input.AssignmentByBatchFolder ||
                    (this.AssignmentByBatchFolder != null &&
                    this.AssignmentByBatchFolder.Equals(input.AssignmentByBatchFolder))
                ) && 
                (
                    this.AssignmentByReviewer == input.AssignmentByReviewer ||
                    (this.AssignmentByReviewer != null &&
                    this.AssignmentByReviewer.Equals(input.AssignmentByReviewer))
                ) && 
                (
                    this.WorkByUser == input.WorkByUser ||
                    (this.WorkByUser != null &&
                    this.WorkByUser.Equals(input.WorkByUser))
                ) && 
                (
                    this.WorkFolderAll == input.WorkFolderAll ||
                    (this.WorkFolderAll != null &&
                    this.WorkFolderAll.Equals(input.WorkFolderAll))
                ) && 
                (
                    this.TranscriptByUser == input.TranscriptByUser ||
                    (this.TranscriptByUser != null &&
                    this.TranscriptByUser.Equals(input.TranscriptByUser))
                ) && 
                (
                    this.TranscriptAll == input.TranscriptAll ||
                    (this.TranscriptAll != null &&
                    this.TranscriptAll.Equals(input.TranscriptAll))
                ) && 
                (
                    this.RedactionByUser == input.RedactionByUser ||
                    (this.RedactionByUser != null &&
                    this.RedactionByUser.Equals(input.RedactionByUser))
                ) && 
                (
                    this.RedactionAll == input.RedactionAll ||
                    (this.RedactionAll != null &&
                    this.RedactionAll.Equals(input.RedactionAll))
                ) && 
                (
                    this.SavedSearchByUser == input.SavedSearchByUser ||
                    (this.SavedSearchByUser != null &&
                    this.SavedSearchByUser.Equals(input.SavedSearchByUser))
                ) && 
                (
                    this.SavedSearchAll == input.SavedSearchAll ||
                    (this.SavedSearchAll != null &&
                    this.SavedSearchAll.Equals(input.SavedSearchAll))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.AnnotationFilter == input.AnnotationFilter ||
                    (this.AnnotationFilter != null &&
                    this.AnnotationFilter.Equals(input.AnnotationFilter))
                ) && 
                (
                    this.TagFilter == input.TagFilter ||
                    (this.TagFilter != null &&
                    this.TagFilter.Equals(input.TagFilter))
                ) && 
                (
                    this.PrivilegedTagFilter == input.PrivilegedTagFilter ||
                    (this.PrivilegedTagFilter != null &&
                    this.PrivilegedTagFilter.Equals(input.PrivilegedTagFilter))
                ) && 
                (
                    this.DocumentStatusFilter == input.DocumentStatusFilter ||
                    (this.DocumentStatusFilter != null &&
                    this.DocumentStatusFilter.Equals(input.DocumentStatusFilter))
                ) && 
                (
                    this.OriginalFilter == input.OriginalFilter ||
                    (this.OriginalFilter != null &&
                    this.OriginalFilter.Equals(input.OriginalFilter))
                ) && 
                (
                    this.DeduplicationFilter == input.DeduplicationFilter ||
                    (this.DeduplicationFilter != null &&
                    this.DeduplicationFilter.Equals(input.DeduplicationFilter))
                ) && 
                (
                    this.CustodianFilter == input.CustodianFilter ||
                    (this.CustodianFilter != null &&
                    this.CustodianFilter.Equals(input.CustodianFilter))
                ) && 
                (
                    this.FormatFilter == input.FormatFilter ||
                    (this.FormatFilter != null &&
                    this.FormatFilter.Equals(input.FormatFilter))
                ) && 
                (
                    this.ReviewStatusFilter == input.ReviewStatusFilter ||
                    (this.ReviewStatusFilter != null &&
                    this.ReviewStatusFilter.Equals(input.ReviewStatusFilter))
                ) && 
                (
                    this.PeopleFilter == input.PeopleFilter ||
                    (this.PeopleFilter != null &&
                    this.PeopleFilter.Equals(input.PeopleFilter))
                ) && 
                (
                    this.EntitiesFilter == input.EntitiesFilter ||
                    (this.EntitiesFilter != null &&
                    this.EntitiesFilter.Equals(input.EntitiesFilter))
                ) && 
                (
                    this.SentimentFilter == input.SentimentFilter ||
                    (this.SentimentFilter != null &&
                    this.SentimentFilter.Equals(input.SentimentFilter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Work != null)
                    hashCode = hashCode * 59 + this.Work.GetHashCode();
                if (this.Document != null)
                    hashCode = hashCode * 59 + this.Document.GetHashCode();
                if (this.Assignment != null)
                    hashCode = hashCode * 59 + this.Assignment.GetHashCode();
                if (this.Transcript != null)
                    hashCode = hashCode * 59 + this.Transcript.GetHashCode();
                if (this.Imports != null)
                    hashCode = hashCode * 59 + this.Imports.GetHashCode();
                if (this.SecuredByTeam != null)
                    hashCode = hashCode * 59 + this.SecuredByTeam.GetHashCode();
                if (this.SecuredByUser != null)
                    hashCode = hashCode * 59 + this.SecuredByUser.GetHashCode();
                if (this.Unsecured != null)
                    hashCode = hashCode * 59 + this.Unsecured.GetHashCode();
                if (this.Redaction != null)
                    hashCode = hashCode * 59 + this.Redaction.GetHashCode();
                if (this.AssignmentByBatch != null)
                    hashCode = hashCode * 59 + this.AssignmentByBatch.GetHashCode();
                if (this.AssignmentByCustodian != null)
                    hashCode = hashCode * 59 + this.AssignmentByCustodian.GetHashCode();
                if (this.AssignmentByJob != null)
                    hashCode = hashCode * 59 + this.AssignmentByJob.GetHashCode();
                if (this.AssignmentByFolderIsReviewed != null)
                    hashCode = hashCode * 59 + this.AssignmentByFolderIsReviewed.GetHashCode();
                if (this.AssignmentByFolderIsNotReviewed != null)
                    hashCode = hashCode * 59 + this.AssignmentByFolderIsNotReviewed.GetHashCode();
                if (this.AssignmentByJobIsReviewed != null)
                    hashCode = hashCode * 59 + this.AssignmentByJobIsReviewed.GetHashCode();
                if (this.AssignmentByJobIsNotReviewed != null)
                    hashCode = hashCode * 59 + this.AssignmentByJobIsNotReviewed.GetHashCode();
                if (this.TagProfileIsReviewed != null)
                    hashCode = hashCode * 59 + this.TagProfileIsReviewed.GetHashCode();
                if (this.TagProfileIsNotReviewed != null)
                    hashCode = hashCode * 59 + this.TagProfileIsNotReviewed.GetHashCode();
                if (this.SavedSearch != null)
                    hashCode = hashCode * 59 + this.SavedSearch.GetHashCode();
                if (this.SearchHistory != null)
                    hashCode = hashCode * 59 + this.SearchHistory.GetHashCode();
                if (this.AdminView != null)
                    hashCode = hashCode * 59 + this.AdminView.GetHashCode();
                if (this.SearchView != null)
                    hashCode = hashCode * 59 + this.SearchView.GetHashCode();
                if (this.Secured != null)
                    hashCode = hashCode * 59 + this.Secured.GetHashCode();
                if (this.AssignmentLabel != null)
                    hashCode = hashCode * 59 + this.AssignmentLabel.GetHashCode();
                if (this.AssignmentByBatchFolder != null)
                    hashCode = hashCode * 59 + this.AssignmentByBatchFolder.GetHashCode();
                if (this.AssignmentByReviewer != null)
                    hashCode = hashCode * 59 + this.AssignmentByReviewer.GetHashCode();
                if (this.WorkByUser != null)
                    hashCode = hashCode * 59 + this.WorkByUser.GetHashCode();
                if (this.WorkFolderAll != null)
                    hashCode = hashCode * 59 + this.WorkFolderAll.GetHashCode();
                if (this.TranscriptByUser != null)
                    hashCode = hashCode * 59 + this.TranscriptByUser.GetHashCode();
                if (this.TranscriptAll != null)
                    hashCode = hashCode * 59 + this.TranscriptAll.GetHashCode();
                if (this.RedactionByUser != null)
                    hashCode = hashCode * 59 + this.RedactionByUser.GetHashCode();
                if (this.RedactionAll != null)
                    hashCode = hashCode * 59 + this.RedactionAll.GetHashCode();
                if (this.SavedSearchByUser != null)
                    hashCode = hashCode * 59 + this.SavedSearchByUser.GetHashCode();
                if (this.SavedSearchAll != null)
                    hashCode = hashCode * 59 + this.SavedSearchAll.GetHashCode();
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                if (this.AnnotationFilter != null)
                    hashCode = hashCode * 59 + this.AnnotationFilter.GetHashCode();
                if (this.TagFilter != null)
                    hashCode = hashCode * 59 + this.TagFilter.GetHashCode();
                if (this.PrivilegedTagFilter != null)
                    hashCode = hashCode * 59 + this.PrivilegedTagFilter.GetHashCode();
                if (this.DocumentStatusFilter != null)
                    hashCode = hashCode * 59 + this.DocumentStatusFilter.GetHashCode();
                if (this.OriginalFilter != null)
                    hashCode = hashCode * 59 + this.OriginalFilter.GetHashCode();
                if (this.DeduplicationFilter != null)
                    hashCode = hashCode * 59 + this.DeduplicationFilter.GetHashCode();
                if (this.CustodianFilter != null)
                    hashCode = hashCode * 59 + this.CustodianFilter.GetHashCode();
                if (this.FormatFilter != null)
                    hashCode = hashCode * 59 + this.FormatFilter.GetHashCode();
                if (this.ReviewStatusFilter != null)
                    hashCode = hashCode * 59 + this.ReviewStatusFilter.GetHashCode();
                if (this.PeopleFilter != null)
                    hashCode = hashCode * 59 + this.PeopleFilter.GetHashCode();
                if (this.EntitiesFilter != null)
                    hashCode = hashCode * 59 + this.EntitiesFilter.GetHashCode();
                if (this.SentimentFilter != null)
                    hashCode = hashCode * 59 + this.SentimentFilter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
