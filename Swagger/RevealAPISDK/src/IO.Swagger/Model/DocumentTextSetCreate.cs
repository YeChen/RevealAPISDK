/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DocumentTextSetCreate
    /// </summary>
    [DataContract]
    public partial class DocumentTextSetCreate :  IEquatable<DocumentTextSetCreate>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Descriptor
        /// </summary>
        [DataMember(Name="descriptor", EmitDefaultValue=false)]
        public TextSetDescriptor? Descriptor { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentTextSetCreate" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Description">Description.</param>
        /// <param name="AnalyzerType">AnalyzerType.</param>
        /// <param name="CreateNewField">CreateNewField.</param>
        /// <param name="ExistingLoadFileFieldName">ExistingLoadFileFieldName.</param>
        /// <param name="NewLoadFileFieldName">NewLoadFileFieldName.</param>
        /// <param name="Descriptor">Descriptor.</param>
        /// <param name="AddFieldToProfile">AddFieldToProfile.</param>
        /// <param name="FieldProfileId">FieldProfileId.</param>
        /// <param name="FieldVisibleInProfile">FieldVisibleInProfile.</param>
        public DocumentTextSetCreate(string Name = default(string), string Description = default(string), string AnalyzerType = default(string), bool? CreateNewField = default(bool?), string ExistingLoadFileFieldName = default(string), string NewLoadFileFieldName = default(string), TextSetDescriptor? Descriptor = default(TextSetDescriptor?), bool? AddFieldToProfile = default(bool?), int? FieldProfileId = default(int?), bool? FieldVisibleInProfile = default(bool?))
        {
            this.Name = Name;
            this.Description = Description;
            this.AnalyzerType = AnalyzerType;
            this.CreateNewField = CreateNewField;
            this.ExistingLoadFileFieldName = ExistingLoadFileFieldName;
            this.NewLoadFileFieldName = NewLoadFileFieldName;
            this.Descriptor = Descriptor;
            this.AddFieldToProfile = AddFieldToProfile;
            this.FieldProfileId = FieldProfileId;
            this.FieldVisibleInProfile = FieldVisibleInProfile;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets AnalyzerType
        /// </summary>
        [DataMember(Name="analyzerType", EmitDefaultValue=false)]
        public string AnalyzerType { get; set; }

        /// <summary>
        /// Gets or Sets CreateNewField
        /// </summary>
        [DataMember(Name="createNewField", EmitDefaultValue=false)]
        public bool? CreateNewField { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLoadFileFieldName
        /// </summary>
        [DataMember(Name="existingLoadFileFieldName", EmitDefaultValue=false)]
        public string ExistingLoadFileFieldName { get; set; }

        /// <summary>
        /// Gets or Sets NewLoadFileFieldName
        /// </summary>
        [DataMember(Name="newLoadFileFieldName", EmitDefaultValue=false)]
        public string NewLoadFileFieldName { get; set; }


        /// <summary>
        /// Gets or Sets AddFieldToProfile
        /// </summary>
        [DataMember(Name="addFieldToProfile", EmitDefaultValue=false)]
        public bool? AddFieldToProfile { get; set; }

        /// <summary>
        /// Gets or Sets FieldProfileId
        /// </summary>
        [DataMember(Name="fieldProfileId", EmitDefaultValue=false)]
        public int? FieldProfileId { get; set; }

        /// <summary>
        /// Gets or Sets FieldVisibleInProfile
        /// </summary>
        [DataMember(Name="fieldVisibleInProfile", EmitDefaultValue=false)]
        public bool? FieldVisibleInProfile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentTextSetCreate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AnalyzerType: ").Append(AnalyzerType).Append("\n");
            sb.Append("  CreateNewField: ").Append(CreateNewField).Append("\n");
            sb.Append("  ExistingLoadFileFieldName: ").Append(ExistingLoadFileFieldName).Append("\n");
            sb.Append("  NewLoadFileFieldName: ").Append(NewLoadFileFieldName).Append("\n");
            sb.Append("  Descriptor: ").Append(Descriptor).Append("\n");
            sb.Append("  AddFieldToProfile: ").Append(AddFieldToProfile).Append("\n");
            sb.Append("  FieldProfileId: ").Append(FieldProfileId).Append("\n");
            sb.Append("  FieldVisibleInProfile: ").Append(FieldVisibleInProfile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentTextSetCreate);
        }

        /// <summary>
        /// Returns true if DocumentTextSetCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentTextSetCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentTextSetCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.AnalyzerType == input.AnalyzerType ||
                    (this.AnalyzerType != null &&
                    this.AnalyzerType.Equals(input.AnalyzerType))
                ) && 
                (
                    this.CreateNewField == input.CreateNewField ||
                    (this.CreateNewField != null &&
                    this.CreateNewField.Equals(input.CreateNewField))
                ) && 
                (
                    this.ExistingLoadFileFieldName == input.ExistingLoadFileFieldName ||
                    (this.ExistingLoadFileFieldName != null &&
                    this.ExistingLoadFileFieldName.Equals(input.ExistingLoadFileFieldName))
                ) && 
                (
                    this.NewLoadFileFieldName == input.NewLoadFileFieldName ||
                    (this.NewLoadFileFieldName != null &&
                    this.NewLoadFileFieldName.Equals(input.NewLoadFileFieldName))
                ) && 
                (
                    this.Descriptor == input.Descriptor ||
                    (this.Descriptor != null &&
                    this.Descriptor.Equals(input.Descriptor))
                ) && 
                (
                    this.AddFieldToProfile == input.AddFieldToProfile ||
                    (this.AddFieldToProfile != null &&
                    this.AddFieldToProfile.Equals(input.AddFieldToProfile))
                ) && 
                (
                    this.FieldProfileId == input.FieldProfileId ||
                    (this.FieldProfileId != null &&
                    this.FieldProfileId.Equals(input.FieldProfileId))
                ) && 
                (
                    this.FieldVisibleInProfile == input.FieldVisibleInProfile ||
                    (this.FieldVisibleInProfile != null &&
                    this.FieldVisibleInProfile.Equals(input.FieldVisibleInProfile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.AnalyzerType != null)
                    hashCode = hashCode * 59 + this.AnalyzerType.GetHashCode();
                if (this.CreateNewField != null)
                    hashCode = hashCode * 59 + this.CreateNewField.GetHashCode();
                if (this.ExistingLoadFileFieldName != null)
                    hashCode = hashCode * 59 + this.ExistingLoadFileFieldName.GetHashCode();
                if (this.NewLoadFileFieldName != null)
                    hashCode = hashCode * 59 + this.NewLoadFileFieldName.GetHashCode();
                if (this.Descriptor != null)
                    hashCode = hashCode * 59 + this.Descriptor.GetHashCode();
                if (this.AddFieldToProfile != null)
                    hashCode = hashCode * 59 + this.AddFieldToProfile.GetHashCode();
                if (this.FieldProfileId != null)
                    hashCode = hashCode * 59 + this.FieldProfileId.GetHashCode();
                if (this.FieldVisibleInProfile != null)
                    hashCode = hashCode * 59 + this.FieldVisibleInProfile.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
