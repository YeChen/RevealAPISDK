/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SampleJob
    /// </summary>
    [DataContract]
    public partial class SampleJob :  IEquatable<SampleJob>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public JobStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SampleJob" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="CreatedByUserId">CreatedByUserId.</param>
        /// <param name="Status">Status.</param>
        /// <param name="NumberOfDocuments">NumberOfDocuments.</param>
        /// <param name="CreatedDateTime">CreatedDateTime.</param>
        /// <param name="StartedDateTime">StartedDateTime.</param>
        /// <param name="CompletedDateTime">CompletedDateTime.</param>
        /// <param name="IsDeleted">IsDeleted.</param>
        /// <param name="JobInfoMessage">JobInfoMessage.</param>
        public SampleJob(int? Id = default(int?), string Name = default(string), int? CreatedByUserId = default(int?), JobStatus? Status = default(JobStatus?), int? NumberOfDocuments = default(int?), DateTime? CreatedDateTime = default(DateTime?), DateTime? StartedDateTime = default(DateTime?), DateTime? CompletedDateTime = default(DateTime?), bool? IsDeleted = default(bool?), string JobInfoMessage = default(string))
        {
            this.Id = Id;
            this.Name = Name;
            this.CreatedByUserId = CreatedByUserId;
            this.Status = Status;
            this.NumberOfDocuments = NumberOfDocuments;
            this.CreatedDateTime = CreatedDateTime;
            this.StartedDateTime = StartedDateTime;
            this.CompletedDateTime = CompletedDateTime;
            this.IsDeleted = IsDeleted;
            this.JobInfoMessage = JobInfoMessage;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUserId
        /// </summary>
        [DataMember(Name="createdByUserId", EmitDefaultValue=false)]
        public int? CreatedByUserId { get; set; }


        /// <summary>
        /// Gets or Sets NumberOfDocuments
        /// </summary>
        [DataMember(Name="numberOfDocuments", EmitDefaultValue=false)]
        public int? NumberOfDocuments { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="createdDateTime", EmitDefaultValue=false)]
        public DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets StartedDateTime
        /// </summary>
        [DataMember(Name="startedDateTime", EmitDefaultValue=false)]
        public DateTime? StartedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CompletedDateTime
        /// </summary>
        [DataMember(Name="completedDateTime", EmitDefaultValue=false)]
        public DateTime? CompletedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets JobInfoMessage
        /// </summary>
        [DataMember(Name="jobInfoMessage", EmitDefaultValue=false)]
        public string JobInfoMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SampleJob {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  NumberOfDocuments: ").Append(NumberOfDocuments).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  StartedDateTime: ").Append(StartedDateTime).Append("\n");
            sb.Append("  CompletedDateTime: ").Append(CompletedDateTime).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  JobInfoMessage: ").Append(JobInfoMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SampleJob);
        }

        /// <summary>
        /// Returns true if SampleJob instances are equal
        /// </summary>
        /// <param name="input">Instance of SampleJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SampleJob input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreatedByUserId == input.CreatedByUserId ||
                    (this.CreatedByUserId != null &&
                    this.CreatedByUserId.Equals(input.CreatedByUserId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.NumberOfDocuments == input.NumberOfDocuments ||
                    (this.NumberOfDocuments != null &&
                    this.NumberOfDocuments.Equals(input.NumberOfDocuments))
                ) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && 
                (
                    this.StartedDateTime == input.StartedDateTime ||
                    (this.StartedDateTime != null &&
                    this.StartedDateTime.Equals(input.StartedDateTime))
                ) && 
                (
                    this.CompletedDateTime == input.CompletedDateTime ||
                    (this.CompletedDateTime != null &&
                    this.CompletedDateTime.Equals(input.CompletedDateTime))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.JobInfoMessage == input.JobInfoMessage ||
                    (this.JobInfoMessage != null &&
                    this.JobInfoMessage.Equals(input.JobInfoMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CreatedByUserId != null)
                    hashCode = hashCode * 59 + this.CreatedByUserId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.NumberOfDocuments != null)
                    hashCode = hashCode * 59 + this.NumberOfDocuments.GetHashCode();
                if (this.CreatedDateTime != null)
                    hashCode = hashCode * 59 + this.CreatedDateTime.GetHashCode();
                if (this.StartedDateTime != null)
                    hashCode = hashCode * 59 + this.StartedDateTime.GetHashCode();
                if (this.CompletedDateTime != null)
                    hashCode = hashCode * 59 + this.CompletedDateTime.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.JobInfoMessage != null)
                    hashCode = hashCode * 59 + this.JobInfoMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
