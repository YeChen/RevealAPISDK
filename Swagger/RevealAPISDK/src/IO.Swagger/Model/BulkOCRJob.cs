/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BulkOCRJob
    /// </summary>
    [DataContract]
    public partial class BulkOCRJob :  IEquatable<BulkOCRJob>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkOCRJob" /> class.
        /// </summary>
        /// <param name="JobId">JobId.</param>
        /// <param name="JobName">JobName.</param>
        /// <param name="DocumentImageSetId">DocumentImageSetId.</param>
        /// <param name="GenerateMissingImages">GenerateMissingImages.</param>
        /// <param name="DocumentTextSetId">DocumentTextSetId.</param>
        /// <param name="OverwriteExistingText">OverwriteExistingText.</param>
        /// <param name="TotalDocuments">TotalDocuments.</param>
        /// <param name="CreatedByUserId">CreatedByUserId.</param>
        /// <param name="CreatedDatetime">CreatedDatetime.</param>
        /// <param name="StartDatetime">StartDatetime.</param>
        /// <param name="EndDatetime">EndDatetime.</param>
        /// <param name="Status">Status.</param>
        /// <param name="JobInfoMessage">JobInfoMessage.</param>
        /// <param name="IsDeleted">IsDeleted.</param>
        /// <param name="PageCount">PageCount.</param>
        /// <param name="AsposeImageId">AsposeImageId.</param>
        /// <param name="SearchId">SearchId.</param>
        public BulkOCRJob(int? JobId = default(int?), string JobName = default(string), int? DocumentImageSetId = default(int?), bool? GenerateMissingImages = default(bool?), int? DocumentTextSetId = default(int?), bool? OverwriteExistingText = default(bool?), int? TotalDocuments = default(int?), long? CreatedByUserId = default(long?), DateTime? CreatedDatetime = default(DateTime?), DateTime? StartDatetime = default(DateTime?), DateTime? EndDatetime = default(DateTime?), int? Status = default(int?), string JobInfoMessage = default(string), bool? IsDeleted = default(bool?), int? PageCount = default(int?), int? AsposeImageId = default(int?), long? SearchId = default(long?))
        {
            this.JobId = JobId;
            this.JobName = JobName;
            this.DocumentImageSetId = DocumentImageSetId;
            this.GenerateMissingImages = GenerateMissingImages;
            this.DocumentTextSetId = DocumentTextSetId;
            this.OverwriteExistingText = OverwriteExistingText;
            this.TotalDocuments = TotalDocuments;
            this.CreatedByUserId = CreatedByUserId;
            this.CreatedDatetime = CreatedDatetime;
            this.StartDatetime = StartDatetime;
            this.EndDatetime = EndDatetime;
            this.Status = Status;
            this.JobInfoMessage = JobInfoMessage;
            this.IsDeleted = IsDeleted;
            this.PageCount = PageCount;
            this.AsposeImageId = AsposeImageId;
            this.SearchId = SearchId;
        }
        
        /// <summary>
        /// Gets or Sets JobId
        /// </summary>
        [DataMember(Name="jobId", EmitDefaultValue=false)]
        public int? JobId { get; set; }

        /// <summary>
        /// Gets or Sets JobName
        /// </summary>
        [DataMember(Name="jobName", EmitDefaultValue=false)]
        public string JobName { get; set; }

        /// <summary>
        /// Gets or Sets DocumentImageSetId
        /// </summary>
        [DataMember(Name="documentImageSetId", EmitDefaultValue=false)]
        public int? DocumentImageSetId { get; set; }

        /// <summary>
        /// Gets or Sets GenerateMissingImages
        /// </summary>
        [DataMember(Name="generateMissingImages", EmitDefaultValue=false)]
        public bool? GenerateMissingImages { get; set; }

        /// <summary>
        /// Gets or Sets DocumentTextSetId
        /// </summary>
        [DataMember(Name="documentTextSetId", EmitDefaultValue=false)]
        public int? DocumentTextSetId { get; set; }

        /// <summary>
        /// Gets or Sets OverwriteExistingText
        /// </summary>
        [DataMember(Name="overwriteExistingText", EmitDefaultValue=false)]
        public bool? OverwriteExistingText { get; set; }

        /// <summary>
        /// Gets or Sets TotalDocuments
        /// </summary>
        [DataMember(Name="totalDocuments", EmitDefaultValue=false)]
        public int? TotalDocuments { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUserId
        /// </summary>
        [DataMember(Name="createdByUserId", EmitDefaultValue=false)]
        public long? CreatedByUserId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDatetime
        /// </summary>
        [DataMember(Name="createdDatetime", EmitDefaultValue=false)]
        public DateTime? CreatedDatetime { get; set; }

        /// <summary>
        /// Gets or Sets StartDatetime
        /// </summary>
        [DataMember(Name="startDatetime", EmitDefaultValue=false)]
        public DateTime? StartDatetime { get; set; }

        /// <summary>
        /// Gets or Sets EndDatetime
        /// </summary>
        [DataMember(Name="endDatetime", EmitDefaultValue=false)]
        public DateTime? EndDatetime { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets JobInfoMessage
        /// </summary>
        [DataMember(Name="jobInfoMessage", EmitDefaultValue=false)]
        public string JobInfoMessage { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets PageCount
        /// </summary>
        [DataMember(Name="pageCount", EmitDefaultValue=false)]
        public int? PageCount { get; set; }

        /// <summary>
        /// Gets or Sets AsposeImageId
        /// </summary>
        [DataMember(Name="asposeImageId", EmitDefaultValue=false)]
        public int? AsposeImageId { get; set; }

        /// <summary>
        /// Gets or Sets SearchId
        /// </summary>
        [DataMember(Name="searchId", EmitDefaultValue=false)]
        public long? SearchId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BulkOCRJob {\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  JobName: ").Append(JobName).Append("\n");
            sb.Append("  DocumentImageSetId: ").Append(DocumentImageSetId).Append("\n");
            sb.Append("  GenerateMissingImages: ").Append(GenerateMissingImages).Append("\n");
            sb.Append("  DocumentTextSetId: ").Append(DocumentTextSetId).Append("\n");
            sb.Append("  OverwriteExistingText: ").Append(OverwriteExistingText).Append("\n");
            sb.Append("  TotalDocuments: ").Append(TotalDocuments).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  CreatedDatetime: ").Append(CreatedDatetime).Append("\n");
            sb.Append("  StartDatetime: ").Append(StartDatetime).Append("\n");
            sb.Append("  EndDatetime: ").Append(EndDatetime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  JobInfoMessage: ").Append(JobInfoMessage).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  PageCount: ").Append(PageCount).Append("\n");
            sb.Append("  AsposeImageId: ").Append(AsposeImageId).Append("\n");
            sb.Append("  SearchId: ").Append(SearchId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BulkOCRJob);
        }

        /// <summary>
        /// Returns true if BulkOCRJob instances are equal
        /// </summary>
        /// <param name="input">Instance of BulkOCRJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BulkOCRJob input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JobId == input.JobId ||
                    (this.JobId != null &&
                    this.JobId.Equals(input.JobId))
                ) && 
                (
                    this.JobName == input.JobName ||
                    (this.JobName != null &&
                    this.JobName.Equals(input.JobName))
                ) && 
                (
                    this.DocumentImageSetId == input.DocumentImageSetId ||
                    (this.DocumentImageSetId != null &&
                    this.DocumentImageSetId.Equals(input.DocumentImageSetId))
                ) && 
                (
                    this.GenerateMissingImages == input.GenerateMissingImages ||
                    (this.GenerateMissingImages != null &&
                    this.GenerateMissingImages.Equals(input.GenerateMissingImages))
                ) && 
                (
                    this.DocumentTextSetId == input.DocumentTextSetId ||
                    (this.DocumentTextSetId != null &&
                    this.DocumentTextSetId.Equals(input.DocumentTextSetId))
                ) && 
                (
                    this.OverwriteExistingText == input.OverwriteExistingText ||
                    (this.OverwriteExistingText != null &&
                    this.OverwriteExistingText.Equals(input.OverwriteExistingText))
                ) && 
                (
                    this.TotalDocuments == input.TotalDocuments ||
                    (this.TotalDocuments != null &&
                    this.TotalDocuments.Equals(input.TotalDocuments))
                ) && 
                (
                    this.CreatedByUserId == input.CreatedByUserId ||
                    (this.CreatedByUserId != null &&
                    this.CreatedByUserId.Equals(input.CreatedByUserId))
                ) && 
                (
                    this.CreatedDatetime == input.CreatedDatetime ||
                    (this.CreatedDatetime != null &&
                    this.CreatedDatetime.Equals(input.CreatedDatetime))
                ) && 
                (
                    this.StartDatetime == input.StartDatetime ||
                    (this.StartDatetime != null &&
                    this.StartDatetime.Equals(input.StartDatetime))
                ) && 
                (
                    this.EndDatetime == input.EndDatetime ||
                    (this.EndDatetime != null &&
                    this.EndDatetime.Equals(input.EndDatetime))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.JobInfoMessage == input.JobInfoMessage ||
                    (this.JobInfoMessage != null &&
                    this.JobInfoMessage.Equals(input.JobInfoMessage))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.PageCount == input.PageCount ||
                    (this.PageCount != null &&
                    this.PageCount.Equals(input.PageCount))
                ) && 
                (
                    this.AsposeImageId == input.AsposeImageId ||
                    (this.AsposeImageId != null &&
                    this.AsposeImageId.Equals(input.AsposeImageId))
                ) && 
                (
                    this.SearchId == input.SearchId ||
                    (this.SearchId != null &&
                    this.SearchId.Equals(input.SearchId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobId != null)
                    hashCode = hashCode * 59 + this.JobId.GetHashCode();
                if (this.JobName != null)
                    hashCode = hashCode * 59 + this.JobName.GetHashCode();
                if (this.DocumentImageSetId != null)
                    hashCode = hashCode * 59 + this.DocumentImageSetId.GetHashCode();
                if (this.GenerateMissingImages != null)
                    hashCode = hashCode * 59 + this.GenerateMissingImages.GetHashCode();
                if (this.DocumentTextSetId != null)
                    hashCode = hashCode * 59 + this.DocumentTextSetId.GetHashCode();
                if (this.OverwriteExistingText != null)
                    hashCode = hashCode * 59 + this.OverwriteExistingText.GetHashCode();
                if (this.TotalDocuments != null)
                    hashCode = hashCode * 59 + this.TotalDocuments.GetHashCode();
                if (this.CreatedByUserId != null)
                    hashCode = hashCode * 59 + this.CreatedByUserId.GetHashCode();
                if (this.CreatedDatetime != null)
                    hashCode = hashCode * 59 + this.CreatedDatetime.GetHashCode();
                if (this.StartDatetime != null)
                    hashCode = hashCode * 59 + this.StartDatetime.GetHashCode();
                if (this.EndDatetime != null)
                    hashCode = hashCode * 59 + this.EndDatetime.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.JobInfoMessage != null)
                    hashCode = hashCode * 59 + this.JobInfoMessage.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.PageCount != null)
                    hashCode = hashCode * 59 + this.PageCount.GetHashCode();
                if (this.AsposeImageId != null)
                    hashCode = hashCode * 59 + this.AsposeImageId.GetHashCode();
                if (this.SearchId != null)
                    hashCode = hashCode * 59 + this.SearchId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
