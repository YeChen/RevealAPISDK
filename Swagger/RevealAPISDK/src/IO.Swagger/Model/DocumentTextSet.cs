/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DocumentTextSet
    /// </summary>
    [DataContract]
    public partial class DocumentTextSet :  IEquatable<DocumentTextSet>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Descriptor
        /// </summary>
        [DataMember(Name="descriptor", EmitDefaultValue=false)]
        public TextSetDescriptor? Descriptor { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentTextSet" /> class.
        /// </summary>
        /// <param name="DocumentTextSetId">DocumentTextSetId.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Description">Description.</param>
        /// <param name="IndexName">IndexName.</param>
        /// <param name="Enabled">Enabled.</param>
        /// <param name="LoadFileFieldName">LoadFileFieldName.</param>
        /// <param name="StopWordsType">StopWordsType.</param>
        /// <param name="AnalyzerType">AnalyzerType.</param>
        /// <param name="MaxSizeToIndexExcel">MaxSizeToIndexExcel.</param>
        /// <param name="MaxSizeToIndexMSWord">MaxSizeToIndexMSWord.</param>
        /// <param name="MaxSizeToIndexMSPP">MaxSizeToIndexMSPP.</param>
        /// <param name="MaxSizeToIndexPDF">MaxSizeToIndexPDF.</param>
        /// <param name="MaxSizeToIndexOther">MaxSizeToIndexOther.</param>
        /// <param name="OtherFileTypesToLimitText">OtherFileTypesToLimitText.</param>
        /// <param name="Descriptor">Descriptor.</param>
        /// <param name="GraphQLTextSetId">GraphQLTextSetId.</param>
        /// <param name="GraphQLTextSetKey">GraphQLTextSetKey.</param>
        /// <param name="GraphQLCaseId">GraphQLCaseId.</param>
        /// <param name="GraphQLTemplateIndexName">GraphQLTemplateIndexName.</param>
        /// <param name="GraphQLTemplateId">GraphQLTemplateId.</param>
        /// <param name="GraphQLTemplateRoutingKey">GraphQLTemplateRoutingKey.</param>
        /// <param name="GraphQLTemplateTextField">GraphQLTemplateTextField.</param>
        /// <param name="GraphQLTemplateBulkIndexLines">GraphQLTemplateBulkIndexLines.</param>
        public DocumentTextSet(int? DocumentTextSetId = default(int?), string Name = default(string), string Description = default(string), string IndexName = default(string), bool? Enabled = default(bool?), string LoadFileFieldName = default(string), string StopWordsType = default(string), string AnalyzerType = default(string), long? MaxSizeToIndexExcel = default(long?), long? MaxSizeToIndexMSWord = default(long?), long? MaxSizeToIndexMSPP = default(long?), long? MaxSizeToIndexPDF = default(long?), long? MaxSizeToIndexOther = default(long?), string OtherFileTypesToLimitText = default(string), TextSetDescriptor? Descriptor = default(TextSetDescriptor?), string GraphQLTextSetId = default(string), string GraphQLTextSetKey = default(string), string GraphQLCaseId = default(string), string GraphQLTemplateIndexName = default(string), string GraphQLTemplateId = default(string), string GraphQLTemplateRoutingKey = default(string), string GraphQLTemplateTextField = default(string), string GraphQLTemplateBulkIndexLines = default(string))
        {
            this.DocumentTextSetId = DocumentTextSetId;
            this.Name = Name;
            this.Description = Description;
            this.IndexName = IndexName;
            this.Enabled = Enabled;
            this.LoadFileFieldName = LoadFileFieldName;
            this.StopWordsType = StopWordsType;
            this.AnalyzerType = AnalyzerType;
            this.MaxSizeToIndexExcel = MaxSizeToIndexExcel;
            this.MaxSizeToIndexMSWord = MaxSizeToIndexMSWord;
            this.MaxSizeToIndexMSPP = MaxSizeToIndexMSPP;
            this.MaxSizeToIndexPDF = MaxSizeToIndexPDF;
            this.MaxSizeToIndexOther = MaxSizeToIndexOther;
            this.OtherFileTypesToLimitText = OtherFileTypesToLimitText;
            this.Descriptor = Descriptor;
            this.GraphQLTextSetId = GraphQLTextSetId;
            this.GraphQLTextSetKey = GraphQLTextSetKey;
            this.GraphQLCaseId = GraphQLCaseId;
            this.GraphQLTemplateIndexName = GraphQLTemplateIndexName;
            this.GraphQLTemplateId = GraphQLTemplateId;
            this.GraphQLTemplateRoutingKey = GraphQLTemplateRoutingKey;
            this.GraphQLTemplateTextField = GraphQLTemplateTextField;
            this.GraphQLTemplateBulkIndexLines = GraphQLTemplateBulkIndexLines;
        }
        
        /// <summary>
        /// Gets or Sets DocumentTextSetId
        /// </summary>
        [DataMember(Name="documentTextSetId", EmitDefaultValue=false)]
        public int? DocumentTextSetId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets IndexName
        /// </summary>
        [DataMember(Name="indexName", EmitDefaultValue=false)]
        public string IndexName { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets LoadFileFieldName
        /// </summary>
        [DataMember(Name="loadFileFieldName", EmitDefaultValue=false)]
        public string LoadFileFieldName { get; set; }

        /// <summary>
        /// Gets or Sets StopWordsType
        /// </summary>
        [DataMember(Name="stopWordsType", EmitDefaultValue=false)]
        public string StopWordsType { get; set; }

        /// <summary>
        /// Gets or Sets AnalyzerType
        /// </summary>
        [DataMember(Name="analyzerType", EmitDefaultValue=false)]
        public string AnalyzerType { get; set; }

        /// <summary>
        /// Gets or Sets MaxSizeToIndexExcel
        /// </summary>
        [DataMember(Name="maxSizeToIndexExcel", EmitDefaultValue=false)]
        public long? MaxSizeToIndexExcel { get; set; }

        /// <summary>
        /// Gets or Sets MaxSizeToIndexMSWord
        /// </summary>
        [DataMember(Name="maxSizeToIndexMSWord", EmitDefaultValue=false)]
        public long? MaxSizeToIndexMSWord { get; set; }

        /// <summary>
        /// Gets or Sets MaxSizeToIndexMSPP
        /// </summary>
        [DataMember(Name="maxSizeToIndexMSPP", EmitDefaultValue=false)]
        public long? MaxSizeToIndexMSPP { get; set; }

        /// <summary>
        /// Gets or Sets MaxSizeToIndexPDF
        /// </summary>
        [DataMember(Name="maxSizeToIndexPDF", EmitDefaultValue=false)]
        public long? MaxSizeToIndexPDF { get; set; }

        /// <summary>
        /// Gets or Sets MaxSizeToIndexOther
        /// </summary>
        [DataMember(Name="maxSizeToIndexOther", EmitDefaultValue=false)]
        public long? MaxSizeToIndexOther { get; set; }

        /// <summary>
        /// Gets or Sets OtherFileTypesToLimitText
        /// </summary>
        [DataMember(Name="otherFileTypesToLimitText", EmitDefaultValue=false)]
        public string OtherFileTypesToLimitText { get; set; }


        /// <summary>
        /// Gets or Sets GraphQLTextSetId
        /// </summary>
        [DataMember(Name="graphQLTextSetId", EmitDefaultValue=false)]
        public string GraphQLTextSetId { get; set; }

        /// <summary>
        /// Gets or Sets GraphQLTextSetKey
        /// </summary>
        [DataMember(Name="graphQLTextSetKey", EmitDefaultValue=false)]
        public string GraphQLTextSetKey { get; set; }

        /// <summary>
        /// Gets or Sets GraphQLCaseId
        /// </summary>
        [DataMember(Name="graphQLCaseId", EmitDefaultValue=false)]
        public string GraphQLCaseId { get; set; }

        /// <summary>
        /// Gets or Sets GraphQLTemplateIndexName
        /// </summary>
        [DataMember(Name="graphQLTemplateIndexName", EmitDefaultValue=false)]
        public string GraphQLTemplateIndexName { get; set; }

        /// <summary>
        /// Gets or Sets GraphQLTemplateId
        /// </summary>
        [DataMember(Name="graphQLTemplateId", EmitDefaultValue=false)]
        public string GraphQLTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets GraphQLTemplateRoutingKey
        /// </summary>
        [DataMember(Name="graphQLTemplateRoutingKey", EmitDefaultValue=false)]
        public string GraphQLTemplateRoutingKey { get; set; }

        /// <summary>
        /// Gets or Sets GraphQLTemplateTextField
        /// </summary>
        [DataMember(Name="graphQLTemplateTextField", EmitDefaultValue=false)]
        public string GraphQLTemplateTextField { get; set; }

        /// <summary>
        /// Gets or Sets GraphQLTemplateBulkIndexLines
        /// </summary>
        [DataMember(Name="graphQLTemplateBulkIndexLines", EmitDefaultValue=false)]
        public string GraphQLTemplateBulkIndexLines { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentTextSet {\n");
            sb.Append("  DocumentTextSetId: ").Append(DocumentTextSetId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IndexName: ").Append(IndexName).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  LoadFileFieldName: ").Append(LoadFileFieldName).Append("\n");
            sb.Append("  StopWordsType: ").Append(StopWordsType).Append("\n");
            sb.Append("  AnalyzerType: ").Append(AnalyzerType).Append("\n");
            sb.Append("  MaxSizeToIndexExcel: ").Append(MaxSizeToIndexExcel).Append("\n");
            sb.Append("  MaxSizeToIndexMSWord: ").Append(MaxSizeToIndexMSWord).Append("\n");
            sb.Append("  MaxSizeToIndexMSPP: ").Append(MaxSizeToIndexMSPP).Append("\n");
            sb.Append("  MaxSizeToIndexPDF: ").Append(MaxSizeToIndexPDF).Append("\n");
            sb.Append("  MaxSizeToIndexOther: ").Append(MaxSizeToIndexOther).Append("\n");
            sb.Append("  OtherFileTypesToLimitText: ").Append(OtherFileTypesToLimitText).Append("\n");
            sb.Append("  Descriptor: ").Append(Descriptor).Append("\n");
            sb.Append("  GraphQLTextSetId: ").Append(GraphQLTextSetId).Append("\n");
            sb.Append("  GraphQLTextSetKey: ").Append(GraphQLTextSetKey).Append("\n");
            sb.Append("  GraphQLCaseId: ").Append(GraphQLCaseId).Append("\n");
            sb.Append("  GraphQLTemplateIndexName: ").Append(GraphQLTemplateIndexName).Append("\n");
            sb.Append("  GraphQLTemplateId: ").Append(GraphQLTemplateId).Append("\n");
            sb.Append("  GraphQLTemplateRoutingKey: ").Append(GraphQLTemplateRoutingKey).Append("\n");
            sb.Append("  GraphQLTemplateTextField: ").Append(GraphQLTemplateTextField).Append("\n");
            sb.Append("  GraphQLTemplateBulkIndexLines: ").Append(GraphQLTemplateBulkIndexLines).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentTextSet);
        }

        /// <summary>
        /// Returns true if DocumentTextSet instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentTextSet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentTextSet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentTextSetId == input.DocumentTextSetId ||
                    (this.DocumentTextSetId != null &&
                    this.DocumentTextSetId.Equals(input.DocumentTextSetId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IndexName == input.IndexName ||
                    (this.IndexName != null &&
                    this.IndexName.Equals(input.IndexName))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.LoadFileFieldName == input.LoadFileFieldName ||
                    (this.LoadFileFieldName != null &&
                    this.LoadFileFieldName.Equals(input.LoadFileFieldName))
                ) && 
                (
                    this.StopWordsType == input.StopWordsType ||
                    (this.StopWordsType != null &&
                    this.StopWordsType.Equals(input.StopWordsType))
                ) && 
                (
                    this.AnalyzerType == input.AnalyzerType ||
                    (this.AnalyzerType != null &&
                    this.AnalyzerType.Equals(input.AnalyzerType))
                ) && 
                (
                    this.MaxSizeToIndexExcel == input.MaxSizeToIndexExcel ||
                    (this.MaxSizeToIndexExcel != null &&
                    this.MaxSizeToIndexExcel.Equals(input.MaxSizeToIndexExcel))
                ) && 
                (
                    this.MaxSizeToIndexMSWord == input.MaxSizeToIndexMSWord ||
                    (this.MaxSizeToIndexMSWord != null &&
                    this.MaxSizeToIndexMSWord.Equals(input.MaxSizeToIndexMSWord))
                ) && 
                (
                    this.MaxSizeToIndexMSPP == input.MaxSizeToIndexMSPP ||
                    (this.MaxSizeToIndexMSPP != null &&
                    this.MaxSizeToIndexMSPP.Equals(input.MaxSizeToIndexMSPP))
                ) && 
                (
                    this.MaxSizeToIndexPDF == input.MaxSizeToIndexPDF ||
                    (this.MaxSizeToIndexPDF != null &&
                    this.MaxSizeToIndexPDF.Equals(input.MaxSizeToIndexPDF))
                ) && 
                (
                    this.MaxSizeToIndexOther == input.MaxSizeToIndexOther ||
                    (this.MaxSizeToIndexOther != null &&
                    this.MaxSizeToIndexOther.Equals(input.MaxSizeToIndexOther))
                ) && 
                (
                    this.OtherFileTypesToLimitText == input.OtherFileTypesToLimitText ||
                    (this.OtherFileTypesToLimitText != null &&
                    this.OtherFileTypesToLimitText.Equals(input.OtherFileTypesToLimitText))
                ) && 
                (
                    this.Descriptor == input.Descriptor ||
                    (this.Descriptor != null &&
                    this.Descriptor.Equals(input.Descriptor))
                ) && 
                (
                    this.GraphQLTextSetId == input.GraphQLTextSetId ||
                    (this.GraphQLTextSetId != null &&
                    this.GraphQLTextSetId.Equals(input.GraphQLTextSetId))
                ) && 
                (
                    this.GraphQLTextSetKey == input.GraphQLTextSetKey ||
                    (this.GraphQLTextSetKey != null &&
                    this.GraphQLTextSetKey.Equals(input.GraphQLTextSetKey))
                ) && 
                (
                    this.GraphQLCaseId == input.GraphQLCaseId ||
                    (this.GraphQLCaseId != null &&
                    this.GraphQLCaseId.Equals(input.GraphQLCaseId))
                ) && 
                (
                    this.GraphQLTemplateIndexName == input.GraphQLTemplateIndexName ||
                    (this.GraphQLTemplateIndexName != null &&
                    this.GraphQLTemplateIndexName.Equals(input.GraphQLTemplateIndexName))
                ) && 
                (
                    this.GraphQLTemplateId == input.GraphQLTemplateId ||
                    (this.GraphQLTemplateId != null &&
                    this.GraphQLTemplateId.Equals(input.GraphQLTemplateId))
                ) && 
                (
                    this.GraphQLTemplateRoutingKey == input.GraphQLTemplateRoutingKey ||
                    (this.GraphQLTemplateRoutingKey != null &&
                    this.GraphQLTemplateRoutingKey.Equals(input.GraphQLTemplateRoutingKey))
                ) && 
                (
                    this.GraphQLTemplateTextField == input.GraphQLTemplateTextField ||
                    (this.GraphQLTemplateTextField != null &&
                    this.GraphQLTemplateTextField.Equals(input.GraphQLTemplateTextField))
                ) && 
                (
                    this.GraphQLTemplateBulkIndexLines == input.GraphQLTemplateBulkIndexLines ||
                    (this.GraphQLTemplateBulkIndexLines != null &&
                    this.GraphQLTemplateBulkIndexLines.Equals(input.GraphQLTemplateBulkIndexLines))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentTextSetId != null)
                    hashCode = hashCode * 59 + this.DocumentTextSetId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.IndexName != null)
                    hashCode = hashCode * 59 + this.IndexName.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.LoadFileFieldName != null)
                    hashCode = hashCode * 59 + this.LoadFileFieldName.GetHashCode();
                if (this.StopWordsType != null)
                    hashCode = hashCode * 59 + this.StopWordsType.GetHashCode();
                if (this.AnalyzerType != null)
                    hashCode = hashCode * 59 + this.AnalyzerType.GetHashCode();
                if (this.MaxSizeToIndexExcel != null)
                    hashCode = hashCode * 59 + this.MaxSizeToIndexExcel.GetHashCode();
                if (this.MaxSizeToIndexMSWord != null)
                    hashCode = hashCode * 59 + this.MaxSizeToIndexMSWord.GetHashCode();
                if (this.MaxSizeToIndexMSPP != null)
                    hashCode = hashCode * 59 + this.MaxSizeToIndexMSPP.GetHashCode();
                if (this.MaxSizeToIndexPDF != null)
                    hashCode = hashCode * 59 + this.MaxSizeToIndexPDF.GetHashCode();
                if (this.MaxSizeToIndexOther != null)
                    hashCode = hashCode * 59 + this.MaxSizeToIndexOther.GetHashCode();
                if (this.OtherFileTypesToLimitText != null)
                    hashCode = hashCode * 59 + this.OtherFileTypesToLimitText.GetHashCode();
                if (this.Descriptor != null)
                    hashCode = hashCode * 59 + this.Descriptor.GetHashCode();
                if (this.GraphQLTextSetId != null)
                    hashCode = hashCode * 59 + this.GraphQLTextSetId.GetHashCode();
                if (this.GraphQLTextSetKey != null)
                    hashCode = hashCode * 59 + this.GraphQLTextSetKey.GetHashCode();
                if (this.GraphQLCaseId != null)
                    hashCode = hashCode * 59 + this.GraphQLCaseId.GetHashCode();
                if (this.GraphQLTemplateIndexName != null)
                    hashCode = hashCode * 59 + this.GraphQLTemplateIndexName.GetHashCode();
                if (this.GraphQLTemplateId != null)
                    hashCode = hashCode * 59 + this.GraphQLTemplateId.GetHashCode();
                if (this.GraphQLTemplateRoutingKey != null)
                    hashCode = hashCode * 59 + this.GraphQLTemplateRoutingKey.GetHashCode();
                if (this.GraphQLTemplateTextField != null)
                    hashCode = hashCode * 59 + this.GraphQLTemplateTextField.GetHashCode();
                if (this.GraphQLTemplateBulkIndexLines != null)
                    hashCode = hashCode * 59 + this.GraphQLTemplateBulkIndexLines.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
