/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DeletionJobCreate
    /// </summary>
    [DataContract]
    public partial class DeletionJobCreate :  IEquatable<DeletionJobCreate>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DeletionPresetSelection
        /// </summary>
        [DataMember(Name="deletionPresetSelection", EmitDefaultValue=false)]
        public DocumentDeletionOption? DeletionPresetSelection { get; set; }
        /// <summary>
        /// Gets or Sets DocumentSelectionType
        /// </summary>
        [DataMember(Name="documentSelectionType", EmitDefaultValue=false)]
        public DocumentSelection? DocumentSelectionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeletionJobCreate" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="ImageSetIds">ImageSetIds.</param>
        /// <param name="TextSetImportIds">TextSetImportIds.</param>
        /// <param name="TextSetIndexIds">TextSetIndexIds.</param>
        /// <param name="DeletionPresetSelection">DeletionPresetSelection.</param>
        /// <param name="DocumentSelectionType">DocumentSelectionType.</param>
        /// <param name="SelectedDocumentItemIds">SelectedDocumentItemIds.</param>
        /// <param name="SearchJobId">SearchJobId.</param>
        /// <param name="SearchCriteria">SearchCriteria.</param>
        public DeletionJobCreate(string Name = default(string), List<int?> ImageSetIds = default(List<int?>), List<int?> TextSetImportIds = default(List<int?>), List<int?> TextSetIndexIds = default(List<int?>), DocumentDeletionOption? DeletionPresetSelection = default(DocumentDeletionOption?), DocumentSelection? DocumentSelectionType = default(DocumentSelection?), List<long?> SelectedDocumentItemIds = default(List<long?>), long? SearchJobId = default(long?), BulkActionSearchCriteria SearchCriteria = default(BulkActionSearchCriteria))
        {
            this.Name = Name;
            this.ImageSetIds = ImageSetIds;
            this.TextSetImportIds = TextSetImportIds;
            this.TextSetIndexIds = TextSetIndexIds;
            this.DeletionPresetSelection = DeletionPresetSelection;
            this.DocumentSelectionType = DocumentSelectionType;
            this.SelectedDocumentItemIds = SelectedDocumentItemIds;
            this.SearchJobId = SearchJobId;
            this.SearchCriteria = SearchCriteria;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ImageSetIds
        /// </summary>
        [DataMember(Name="imageSetIds", EmitDefaultValue=false)]
        public List<int?> ImageSetIds { get; set; }

        /// <summary>
        /// Gets or Sets TextSetImportIds
        /// </summary>
        [DataMember(Name="textSetImportIds", EmitDefaultValue=false)]
        public List<int?> TextSetImportIds { get; set; }

        /// <summary>
        /// Gets or Sets TextSetIndexIds
        /// </summary>
        [DataMember(Name="textSetIndexIds", EmitDefaultValue=false)]
        public List<int?> TextSetIndexIds { get; set; }



        /// <summary>
        /// Gets or Sets SelectedDocumentItemIds
        /// </summary>
        [DataMember(Name="selectedDocumentItemIds", EmitDefaultValue=false)]
        public List<long?> SelectedDocumentItemIds { get; set; }

        /// <summary>
        /// Gets or Sets SearchJobId
        /// </summary>
        [DataMember(Name="searchJobId", EmitDefaultValue=false)]
        public long? SearchJobId { get; set; }

        /// <summary>
        /// Gets or Sets SearchCriteria
        /// </summary>
        [DataMember(Name="searchCriteria", EmitDefaultValue=false)]
        public BulkActionSearchCriteria SearchCriteria { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeletionJobCreate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ImageSetIds: ").Append(ImageSetIds).Append("\n");
            sb.Append("  TextSetImportIds: ").Append(TextSetImportIds).Append("\n");
            sb.Append("  TextSetIndexIds: ").Append(TextSetIndexIds).Append("\n");
            sb.Append("  DeletionPresetSelection: ").Append(DeletionPresetSelection).Append("\n");
            sb.Append("  DocumentSelectionType: ").Append(DocumentSelectionType).Append("\n");
            sb.Append("  SelectedDocumentItemIds: ").Append(SelectedDocumentItemIds).Append("\n");
            sb.Append("  SearchJobId: ").Append(SearchJobId).Append("\n");
            sb.Append("  SearchCriteria: ").Append(SearchCriteria).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeletionJobCreate);
        }

        /// <summary>
        /// Returns true if DeletionJobCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of DeletionJobCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeletionJobCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ImageSetIds == input.ImageSetIds ||
                    this.ImageSetIds != null &&
                    this.ImageSetIds.SequenceEqual(input.ImageSetIds)
                ) && 
                (
                    this.TextSetImportIds == input.TextSetImportIds ||
                    this.TextSetImportIds != null &&
                    this.TextSetImportIds.SequenceEqual(input.TextSetImportIds)
                ) && 
                (
                    this.TextSetIndexIds == input.TextSetIndexIds ||
                    this.TextSetIndexIds != null &&
                    this.TextSetIndexIds.SequenceEqual(input.TextSetIndexIds)
                ) && 
                (
                    this.DeletionPresetSelection == input.DeletionPresetSelection ||
                    (this.DeletionPresetSelection != null &&
                    this.DeletionPresetSelection.Equals(input.DeletionPresetSelection))
                ) && 
                (
                    this.DocumentSelectionType == input.DocumentSelectionType ||
                    (this.DocumentSelectionType != null &&
                    this.DocumentSelectionType.Equals(input.DocumentSelectionType))
                ) && 
                (
                    this.SelectedDocumentItemIds == input.SelectedDocumentItemIds ||
                    this.SelectedDocumentItemIds != null &&
                    this.SelectedDocumentItemIds.SequenceEqual(input.SelectedDocumentItemIds)
                ) && 
                (
                    this.SearchJobId == input.SearchJobId ||
                    (this.SearchJobId != null &&
                    this.SearchJobId.Equals(input.SearchJobId))
                ) && 
                (
                    this.SearchCriteria == input.SearchCriteria ||
                    (this.SearchCriteria != null &&
                    this.SearchCriteria.Equals(input.SearchCriteria))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ImageSetIds != null)
                    hashCode = hashCode * 59 + this.ImageSetIds.GetHashCode();
                if (this.TextSetImportIds != null)
                    hashCode = hashCode * 59 + this.TextSetImportIds.GetHashCode();
                if (this.TextSetIndexIds != null)
                    hashCode = hashCode * 59 + this.TextSetIndexIds.GetHashCode();
                if (this.DeletionPresetSelection != null)
                    hashCode = hashCode * 59 + this.DeletionPresetSelection.GetHashCode();
                if (this.DocumentSelectionType != null)
                    hashCode = hashCode * 59 + this.DocumentSelectionType.GetHashCode();
                if (this.SelectedDocumentItemIds != null)
                    hashCode = hashCode * 59 + this.SelectedDocumentItemIds.GetHashCode();
                if (this.SearchJobId != null)
                    hashCode = hashCode * 59 + this.SearchJobId.GetHashCode();
                if (this.SearchCriteria != null)
                    hashCode = hashCode * 59 + this.SearchCriteria.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
