/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SampleJobCreate
    /// </summary>
    [DataContract]
    public partial class SampleJobCreate :  IEquatable<SampleJobCreate>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets SampleType
        /// </summary>
        [DataMember(Name="sampleType", EmitDefaultValue=false)]
        public RandomSampleType? SampleType { get; set; }
        /// <summary>
        /// Gets or Sets DocumentSelectionType
        /// </summary>
        [DataMember(Name="documentSelectionType", EmitDefaultValue=false)]
        public DocumentSelection? DocumentSelectionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SampleJobCreate" /> class.
        /// </summary>
        /// <param name="SampleType">SampleType.</param>
        /// <param name="SampleDocumentCount">SampleDocumentCount.</param>
        /// <param name="SamplePercent">SamplePercent.</param>
        /// <param name="SampleConfidence">SampleConfidence.</param>
        /// <param name="SampleMarginOfError">SampleMarginOfError.</param>
        /// <param name="Query">Query.</param>
        /// <param name="TotalQueryDocuments">TotalQueryDocuments.</param>
        /// <param name="FolderId">FolderId.</param>
        /// <param name="SavedSearchFolderId">SavedSearchFolderId.</param>
        /// <param name="SavedSearchName">SavedSearchName.</param>
        /// <param name="DocumentSelectionType">DocumentSelectionType.</param>
        /// <param name="SelectedDocumentItemIds">SelectedDocumentItemIds.</param>
        /// <param name="SearchJobId">SearchJobId.</param>
        /// <param name="SearchCriteria">SearchCriteria.</param>
        /// <param name="Name">Name.</param>
        public SampleJobCreate(RandomSampleType? SampleType = default(RandomSampleType?), int? SampleDocumentCount = default(int?), int? SamplePercent = default(int?), int? SampleConfidence = default(int?), int? SampleMarginOfError = default(int?), DocumentQuery Query = default(DocumentQuery), int? TotalQueryDocuments = default(int?), int? FolderId = default(int?), int? SavedSearchFolderId = default(int?), string SavedSearchName = default(string), DocumentSelection? DocumentSelectionType = default(DocumentSelection?), List<long?> SelectedDocumentItemIds = default(List<long?>), long? SearchJobId = default(long?), BulkActionSearchCriteria SearchCriteria = default(BulkActionSearchCriteria), string Name = default(string))
        {
            this.SampleType = SampleType;
            this.SampleDocumentCount = SampleDocumentCount;
            this.SamplePercent = SamplePercent;
            this.SampleConfidence = SampleConfidence;
            this.SampleMarginOfError = SampleMarginOfError;
            this.Query = Query;
            this.TotalQueryDocuments = TotalQueryDocuments;
            this.FolderId = FolderId;
            this.SavedSearchFolderId = SavedSearchFolderId;
            this.SavedSearchName = SavedSearchName;
            this.DocumentSelectionType = DocumentSelectionType;
            this.SelectedDocumentItemIds = SelectedDocumentItemIds;
            this.SearchJobId = SearchJobId;
            this.SearchCriteria = SearchCriteria;
            this.Name = Name;
        }
        

        /// <summary>
        /// Gets or Sets SampleDocumentCount
        /// </summary>
        [DataMember(Name="sampleDocumentCount", EmitDefaultValue=false)]
        public int? SampleDocumentCount { get; set; }

        /// <summary>
        /// Gets or Sets SamplePercent
        /// </summary>
        [DataMember(Name="samplePercent", EmitDefaultValue=false)]
        public int? SamplePercent { get; set; }

        /// <summary>
        /// Gets or Sets SampleConfidence
        /// </summary>
        [DataMember(Name="sampleConfidence", EmitDefaultValue=false)]
        public int? SampleConfidence { get; set; }

        /// <summary>
        /// Gets or Sets SampleMarginOfError
        /// </summary>
        [DataMember(Name="sampleMarginOfError", EmitDefaultValue=false)]
        public int? SampleMarginOfError { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name="query", EmitDefaultValue=false)]
        public DocumentQuery Query { get; set; }

        /// <summary>
        /// Gets or Sets TotalQueryDocuments
        /// </summary>
        [DataMember(Name="totalQueryDocuments", EmitDefaultValue=false)]
        public int? TotalQueryDocuments { get; set; }

        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [DataMember(Name="folderId", EmitDefaultValue=false)]
        public int? FolderId { get; set; }

        /// <summary>
        /// Gets or Sets SavedSearchFolderId
        /// </summary>
        [DataMember(Name="savedSearchFolderId", EmitDefaultValue=false)]
        public int? SavedSearchFolderId { get; set; }

        /// <summary>
        /// Gets or Sets SavedSearchName
        /// </summary>
        [DataMember(Name="savedSearchName", EmitDefaultValue=false)]
        public string SavedSearchName { get; set; }


        /// <summary>
        /// Gets or Sets SelectedDocumentItemIds
        /// </summary>
        [DataMember(Name="selectedDocumentItemIds", EmitDefaultValue=false)]
        public List<long?> SelectedDocumentItemIds { get; set; }

        /// <summary>
        /// Gets or Sets SearchJobId
        /// </summary>
        [DataMember(Name="searchJobId", EmitDefaultValue=false)]
        public long? SearchJobId { get; set; }

        /// <summary>
        /// Gets or Sets SearchCriteria
        /// </summary>
        [DataMember(Name="searchCriteria", EmitDefaultValue=false)]
        public BulkActionSearchCriteria SearchCriteria { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SampleJobCreate {\n");
            sb.Append("  SampleType: ").Append(SampleType).Append("\n");
            sb.Append("  SampleDocumentCount: ").Append(SampleDocumentCount).Append("\n");
            sb.Append("  SamplePercent: ").Append(SamplePercent).Append("\n");
            sb.Append("  SampleConfidence: ").Append(SampleConfidence).Append("\n");
            sb.Append("  SampleMarginOfError: ").Append(SampleMarginOfError).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  TotalQueryDocuments: ").Append(TotalQueryDocuments).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  SavedSearchFolderId: ").Append(SavedSearchFolderId).Append("\n");
            sb.Append("  SavedSearchName: ").Append(SavedSearchName).Append("\n");
            sb.Append("  DocumentSelectionType: ").Append(DocumentSelectionType).Append("\n");
            sb.Append("  SelectedDocumentItemIds: ").Append(SelectedDocumentItemIds).Append("\n");
            sb.Append("  SearchJobId: ").Append(SearchJobId).Append("\n");
            sb.Append("  SearchCriteria: ").Append(SearchCriteria).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SampleJobCreate);
        }

        /// <summary>
        /// Returns true if SampleJobCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of SampleJobCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SampleJobCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SampleType == input.SampleType ||
                    (this.SampleType != null &&
                    this.SampleType.Equals(input.SampleType))
                ) && 
                (
                    this.SampleDocumentCount == input.SampleDocumentCount ||
                    (this.SampleDocumentCount != null &&
                    this.SampleDocumentCount.Equals(input.SampleDocumentCount))
                ) && 
                (
                    this.SamplePercent == input.SamplePercent ||
                    (this.SamplePercent != null &&
                    this.SamplePercent.Equals(input.SamplePercent))
                ) && 
                (
                    this.SampleConfidence == input.SampleConfidence ||
                    (this.SampleConfidence != null &&
                    this.SampleConfidence.Equals(input.SampleConfidence))
                ) && 
                (
                    this.SampleMarginOfError == input.SampleMarginOfError ||
                    (this.SampleMarginOfError != null &&
                    this.SampleMarginOfError.Equals(input.SampleMarginOfError))
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.TotalQueryDocuments == input.TotalQueryDocuments ||
                    (this.TotalQueryDocuments != null &&
                    this.TotalQueryDocuments.Equals(input.TotalQueryDocuments))
                ) && 
                (
                    this.FolderId == input.FolderId ||
                    (this.FolderId != null &&
                    this.FolderId.Equals(input.FolderId))
                ) && 
                (
                    this.SavedSearchFolderId == input.SavedSearchFolderId ||
                    (this.SavedSearchFolderId != null &&
                    this.SavedSearchFolderId.Equals(input.SavedSearchFolderId))
                ) && 
                (
                    this.SavedSearchName == input.SavedSearchName ||
                    (this.SavedSearchName != null &&
                    this.SavedSearchName.Equals(input.SavedSearchName))
                ) && 
                (
                    this.DocumentSelectionType == input.DocumentSelectionType ||
                    (this.DocumentSelectionType != null &&
                    this.DocumentSelectionType.Equals(input.DocumentSelectionType))
                ) && 
                (
                    this.SelectedDocumentItemIds == input.SelectedDocumentItemIds ||
                    this.SelectedDocumentItemIds != null &&
                    this.SelectedDocumentItemIds.SequenceEqual(input.SelectedDocumentItemIds)
                ) && 
                (
                    this.SearchJobId == input.SearchJobId ||
                    (this.SearchJobId != null &&
                    this.SearchJobId.Equals(input.SearchJobId))
                ) && 
                (
                    this.SearchCriteria == input.SearchCriteria ||
                    (this.SearchCriteria != null &&
                    this.SearchCriteria.Equals(input.SearchCriteria))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SampleType != null)
                    hashCode = hashCode * 59 + this.SampleType.GetHashCode();
                if (this.SampleDocumentCount != null)
                    hashCode = hashCode * 59 + this.SampleDocumentCount.GetHashCode();
                if (this.SamplePercent != null)
                    hashCode = hashCode * 59 + this.SamplePercent.GetHashCode();
                if (this.SampleConfidence != null)
                    hashCode = hashCode * 59 + this.SampleConfidence.GetHashCode();
                if (this.SampleMarginOfError != null)
                    hashCode = hashCode * 59 + this.SampleMarginOfError.GetHashCode();
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                if (this.TotalQueryDocuments != null)
                    hashCode = hashCode * 59 + this.TotalQueryDocuments.GetHashCode();
                if (this.FolderId != null)
                    hashCode = hashCode * 59 + this.FolderId.GetHashCode();
                if (this.SavedSearchFolderId != null)
                    hashCode = hashCode * 59 + this.SavedSearchFolderId.GetHashCode();
                if (this.SavedSearchName != null)
                    hashCode = hashCode * 59 + this.SavedSearchName.GetHashCode();
                if (this.DocumentSelectionType != null)
                    hashCode = hashCode * 59 + this.DocumentSelectionType.GetHashCode();
                if (this.SelectedDocumentItemIds != null)
                    hashCode = hashCode * 59 + this.SelectedDocumentItemIds.GetHashCode();
                if (this.SearchJobId != null)
                    hashCode = hashCode * 59 + this.SearchJobId.GetHashCode();
                if (this.SearchCriteria != null)
                    hashCode = hashCode * 59 + this.SearchCriteria.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
