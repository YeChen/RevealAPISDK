/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserWithTeamQuery
    /// </summary>
    [DataContract]
    public partial class UserWithTeamQuery :  IEquatable<UserWithTeamQuery>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets _Operator
        /// </summary>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public SearchExpressionOperators? _Operator { get; set; }
        /// <summary>
        /// Gets or Sets FilterType
        /// </summary>
        [DataMember(Name="filterType", EmitDefaultValue=false)]
        public UserWithTeamQueryType? FilterType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserWithTeamQuery" /> class.
        /// </summary>
        /// <param name="Query">Query.</param>
        /// <param name="_Operator">_Operator.</param>
        /// <param name="FilterType">FilterType.</param>
        public UserWithTeamQuery(string Query = default(string), SearchExpressionOperators? _Operator = default(SearchExpressionOperators?), UserWithTeamQueryType? FilterType = default(UserWithTeamQueryType?))
        {
            this.Query = Query;
            this._Operator = _Operator;
            this.FilterType = FilterType;
        }
        
        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name="query", EmitDefaultValue=false)]
        public string Query { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserWithTeamQuery {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  _Operator: ").Append(_Operator).Append("\n");
            sb.Append("  FilterType: ").Append(FilterType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserWithTeamQuery);
        }

        /// <summary>
        /// Returns true if UserWithTeamQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of UserWithTeamQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserWithTeamQuery input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this._Operator == input._Operator ||
                    (this._Operator != null &&
                    this._Operator.Equals(input._Operator))
                ) && 
                (
                    this.FilterType == input.FilterType ||
                    (this.FilterType != null &&
                    this.FilterType.Equals(input.FilterType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                if (this._Operator != null)
                    hashCode = hashCode * 59 + this._Operator.GetHashCode();
                if (this.FilterType != null)
                    hashCode = hashCode * 59 + this.FilterType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
