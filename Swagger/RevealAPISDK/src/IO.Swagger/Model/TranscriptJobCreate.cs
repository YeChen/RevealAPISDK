/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TranscriptJobCreate
    /// </summary>
    [DataContract]
    public partial class TranscriptJobCreate :  IEquatable<TranscriptJobCreate>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets FilterOption
        /// </summary>
        [DataMember(Name="filterOption", EmitDefaultValue=false)]
        public TranscriptJobType? FilterOption { get; set; }
        /// <summary>
        /// Gets or Sets PageNumberLocation
        /// </summary>
        [DataMember(Name="pageNumberLocation", EmitDefaultValue=false)]
        public TranscriptPageNumberLocation? PageNumberLocation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TranscriptJobCreate" /> class.
        /// </summary>
        /// <param name="FilterOption">FilterOption.</param>
        /// <param name="FolderIds">FolderIds.</param>
        /// <param name="Name">Name.</param>
        /// <param name="PagesToSkip">PagesToSkip.</param>
        /// <param name="PageNumberLocation">PageNumberLocation.</param>
        /// <param name="PageNumberStartColumn">PageNumberStartColumn.</param>
        /// <param name="LineNumberEndColumn">LineNumberEndColumn.</param>
        /// <param name="SpacesAfterLineNumber">SpacesAfterLineNumber.</param>
        public TranscriptJobCreate(TranscriptJobType? FilterOption = default(TranscriptJobType?), List<long?> FolderIds = default(List<long?>), string Name = default(string), int? PagesToSkip = default(int?), TranscriptPageNumberLocation? PageNumberLocation = default(TranscriptPageNumberLocation?), int? PageNumberStartColumn = default(int?), int? LineNumberEndColumn = default(int?), int? SpacesAfterLineNumber = default(int?))
        {
            this.FilterOption = FilterOption;
            this.FolderIds = FolderIds;
            this.Name = Name;
            this.PagesToSkip = PagesToSkip;
            this.PageNumberLocation = PageNumberLocation;
            this.PageNumberStartColumn = PageNumberStartColumn;
            this.LineNumberEndColumn = LineNumberEndColumn;
            this.SpacesAfterLineNumber = SpacesAfterLineNumber;
        }
        

        /// <summary>
        /// Gets or Sets FolderIds
        /// </summary>
        [DataMember(Name="folderIds", EmitDefaultValue=false)]
        public List<long?> FolderIds { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PagesToSkip
        /// </summary>
        [DataMember(Name="pagesToSkip", EmitDefaultValue=false)]
        public int? PagesToSkip { get; set; }


        /// <summary>
        /// Gets or Sets PageNumberStartColumn
        /// </summary>
        [DataMember(Name="pageNumberStartColumn", EmitDefaultValue=false)]
        public int? PageNumberStartColumn { get; set; }

        /// <summary>
        /// Gets or Sets LineNumberEndColumn
        /// </summary>
        [DataMember(Name="lineNumberEndColumn", EmitDefaultValue=false)]
        public int? LineNumberEndColumn { get; set; }

        /// <summary>
        /// Gets or Sets SpacesAfterLineNumber
        /// </summary>
        [DataMember(Name="spacesAfterLineNumber", EmitDefaultValue=false)]
        public int? SpacesAfterLineNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TranscriptJobCreate {\n");
            sb.Append("  FilterOption: ").Append(FilterOption).Append("\n");
            sb.Append("  FolderIds: ").Append(FolderIds).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PagesToSkip: ").Append(PagesToSkip).Append("\n");
            sb.Append("  PageNumberLocation: ").Append(PageNumberLocation).Append("\n");
            sb.Append("  PageNumberStartColumn: ").Append(PageNumberStartColumn).Append("\n");
            sb.Append("  LineNumberEndColumn: ").Append(LineNumberEndColumn).Append("\n");
            sb.Append("  SpacesAfterLineNumber: ").Append(SpacesAfterLineNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TranscriptJobCreate);
        }

        /// <summary>
        /// Returns true if TranscriptJobCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of TranscriptJobCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranscriptJobCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FilterOption == input.FilterOption ||
                    (this.FilterOption != null &&
                    this.FilterOption.Equals(input.FilterOption))
                ) && 
                (
                    this.FolderIds == input.FolderIds ||
                    this.FolderIds != null &&
                    this.FolderIds.SequenceEqual(input.FolderIds)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PagesToSkip == input.PagesToSkip ||
                    (this.PagesToSkip != null &&
                    this.PagesToSkip.Equals(input.PagesToSkip))
                ) && 
                (
                    this.PageNumberLocation == input.PageNumberLocation ||
                    (this.PageNumberLocation != null &&
                    this.PageNumberLocation.Equals(input.PageNumberLocation))
                ) && 
                (
                    this.PageNumberStartColumn == input.PageNumberStartColumn ||
                    (this.PageNumberStartColumn != null &&
                    this.PageNumberStartColumn.Equals(input.PageNumberStartColumn))
                ) && 
                (
                    this.LineNumberEndColumn == input.LineNumberEndColumn ||
                    (this.LineNumberEndColumn != null &&
                    this.LineNumberEndColumn.Equals(input.LineNumberEndColumn))
                ) && 
                (
                    this.SpacesAfterLineNumber == input.SpacesAfterLineNumber ||
                    (this.SpacesAfterLineNumber != null &&
                    this.SpacesAfterLineNumber.Equals(input.SpacesAfterLineNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FilterOption != null)
                    hashCode = hashCode * 59 + this.FilterOption.GetHashCode();
                if (this.FolderIds != null)
                    hashCode = hashCode * 59 + this.FolderIds.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PagesToSkip != null)
                    hashCode = hashCode * 59 + this.PagesToSkip.GetHashCode();
                if (this.PageNumberLocation != null)
                    hashCode = hashCode * 59 + this.PageNumberLocation.GetHashCode();
                if (this.PageNumberStartColumn != null)
                    hashCode = hashCode * 59 + this.PageNumberStartColumn.GetHashCode();
                if (this.LineNumberEndColumn != null)
                    hashCode = hashCode * 59 + this.LineNumberEndColumn.GetHashCode();
                if (this.SpacesAfterLineNumber != null)
                    hashCode = hashCode * 59 + this.SpacesAfterLineNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
