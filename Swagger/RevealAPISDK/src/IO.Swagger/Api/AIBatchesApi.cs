/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAIBatchesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Start a background job to create batch for a set of docs in one of the AI queues and assign to the provided user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateJobResponse</returns>
        CreateJobResponse AIBatchesAssignQueue (int? caseId, AssignQueueRequest body = null);

        /// <summary>
        /// Start a background job to create batch for a set of docs in one of the AI queues and assign to the provided user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateJobResponse</returns>
        ApiResponse<CreateJobResponse> AIBatchesAssignQueueWithHttpInfo (int? caseId, AssignQueueRequest body = null);
        /// <summary>
        /// Get model statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="modelId"> (optional)</param>
        /// <returns>ModelStatistics</returns>
        ModelStatistics AIBatchesGetModelStatistics (int? caseId, int? userId = null, int? modelId = null);

        /// <summary>
        /// Get model statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="modelId"> (optional)</param>
        /// <returns>ApiResponse of ModelStatistics</returns>
        ApiResponse<ModelStatistics> AIBatchesGetModelStatisticsWithHttpInfo (int? caseId, int? userId = null, int? modelId = null);
        /// <summary>
        /// Get AI models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <returns>PaginatedOfListOfAIModel</returns>
        PaginatedOfListOfAIModel AIBatchesGetModels (int? caseId, int? userId = null, int? start = null, int? count = null);

        /// <summary>
        /// Get AI models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <returns>ApiResponse of PaginatedOfListOfAIModel</returns>
        ApiResponse<PaginatedOfListOfAIModel> AIBatchesGetModelsWithHttpInfo (int? caseId, int? userId = null, int? start = null, int? count = null);
        /// <summary>
        /// Get Cosmic queues
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="modelId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>List&lt;CosmicQueue&gt;</returns>
        List<CosmicQueue> AIBatchesGetQueues (int? caseId, int? modelId = null, int? userId = null);

        /// <summary>
        /// Get Cosmic queues
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="modelId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CosmicQueue&gt;</returns>
        ApiResponse<List<CosmicQueue>> AIBatchesGetQueuesWithHttpInfo (int? caseId, int? modelId = null, int? userId = null);
        /// <summary>
        /// Get tag profiles that contain the specified model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="modelId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <returns>PaginatedOfListOfTagProfile</returns>
        PaginatedOfListOfTagProfile AIBatchesGetTagProfiles (int? caseId, int? modelId = null, int? userId = null, int? start = null, int? count = null);

        /// <summary>
        /// Get tag profiles that contain the specified model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="modelId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <returns>ApiResponse of PaginatedOfListOfTagProfile</returns>
        ApiResponse<PaginatedOfListOfTagProfile> AIBatchesGetTagProfilesWithHttpInfo (int? caseId, int? modelId = null, int? userId = null, int? start = null, int? count = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Start a background job to create batch for a set of docs in one of the AI queues and assign to the provided user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CreateJobResponse</returns>
        System.Threading.Tasks.Task<CreateJobResponse> AIBatchesAssignQueueAsync (int? caseId, AssignQueueRequest body = null);

        /// <summary>
        /// Start a background job to create batch for a set of docs in one of the AI queues and assign to the provided user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateJobResponse>> AIBatchesAssignQueueAsyncWithHttpInfo (int? caseId, AssignQueueRequest body = null);
        /// <summary>
        /// Get model statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="modelId"> (optional)</param>
        /// <returns>Task of ModelStatistics</returns>
        System.Threading.Tasks.Task<ModelStatistics> AIBatchesGetModelStatisticsAsync (int? caseId, int? userId = null, int? modelId = null);

        /// <summary>
        /// Get model statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="modelId"> (optional)</param>
        /// <returns>Task of ApiResponse (ModelStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelStatistics>> AIBatchesGetModelStatisticsAsyncWithHttpInfo (int? caseId, int? userId = null, int? modelId = null);
        /// <summary>
        /// Get AI models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <returns>Task of PaginatedOfListOfAIModel</returns>
        System.Threading.Tasks.Task<PaginatedOfListOfAIModel> AIBatchesGetModelsAsync (int? caseId, int? userId = null, int? start = null, int? count = null);

        /// <summary>
        /// Get AI models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <returns>Task of ApiResponse (PaginatedOfListOfAIModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedOfListOfAIModel>> AIBatchesGetModelsAsyncWithHttpInfo (int? caseId, int? userId = null, int? start = null, int? count = null);
        /// <summary>
        /// Get Cosmic queues
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="modelId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>Task of List&lt;CosmicQueue&gt;</returns>
        System.Threading.Tasks.Task<List<CosmicQueue>> AIBatchesGetQueuesAsync (int? caseId, int? modelId = null, int? userId = null);

        /// <summary>
        /// Get Cosmic queues
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="modelId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CosmicQueue&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CosmicQueue>>> AIBatchesGetQueuesAsyncWithHttpInfo (int? caseId, int? modelId = null, int? userId = null);
        /// <summary>
        /// Get tag profiles that contain the specified model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="modelId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <returns>Task of PaginatedOfListOfTagProfile</returns>
        System.Threading.Tasks.Task<PaginatedOfListOfTagProfile> AIBatchesGetTagProfilesAsync (int? caseId, int? modelId = null, int? userId = null, int? start = null, int? count = null);

        /// <summary>
        /// Get tag profiles that contain the specified model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="modelId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <returns>Task of ApiResponse (PaginatedOfListOfTagProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedOfListOfTagProfile>> AIBatchesGetTagProfilesAsyncWithHttpInfo (int? caseId, int? modelId = null, int? userId = null, int? start = null, int? count = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AIBatchesApi : IAIBatchesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AIBatchesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AIBatchesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AIBatchesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AIBatchesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Start a background job to create batch for a set of docs in one of the AI queues and assign to the provided user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateJobResponse</returns>
        public CreateJobResponse AIBatchesAssignQueue (int? caseId, AssignQueueRequest body = null)
        {
             ApiResponse<CreateJobResponse> localVarResponse = AIBatchesAssignQueueWithHttpInfo(caseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start a background job to create batch for a set of docs in one of the AI queues and assign to the provided user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateJobResponse</returns>
        public ApiResponse< CreateJobResponse > AIBatchesAssignQueueWithHttpInfo (int? caseId, AssignQueueRequest body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling AIBatchesApi->AIBatchesAssignQueue");

            var localVarPath = "/api/v2/{caseId}/aIBatches/queues/assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AIBatchesAssignQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateJobResponse)));
        }

        /// <summary>
        /// Start a background job to create batch for a set of docs in one of the AI queues and assign to the provided user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CreateJobResponse</returns>
        public async System.Threading.Tasks.Task<CreateJobResponse> AIBatchesAssignQueueAsync (int? caseId, AssignQueueRequest body = null)
        {
             ApiResponse<CreateJobResponse> localVarResponse = await AIBatchesAssignQueueAsyncWithHttpInfo(caseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start a background job to create batch for a set of docs in one of the AI queues and assign to the provided user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateJobResponse>> AIBatchesAssignQueueAsyncWithHttpInfo (int? caseId, AssignQueueRequest body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling AIBatchesApi->AIBatchesAssignQueue");

            var localVarPath = "/api/v2/{caseId}/aIBatches/queues/assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AIBatchesAssignQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateJobResponse)));
        }

        /// <summary>
        /// Get model statistics 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="modelId"> (optional)</param>
        /// <returns>ModelStatistics</returns>
        public ModelStatistics AIBatchesGetModelStatistics (int? caseId, int? userId = null, int? modelId = null)
        {
             ApiResponse<ModelStatistics> localVarResponse = AIBatchesGetModelStatisticsWithHttpInfo(caseId, userId, modelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get model statistics 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="modelId"> (optional)</param>
        /// <returns>ApiResponse of ModelStatistics</returns>
        public ApiResponse< ModelStatistics > AIBatchesGetModelStatisticsWithHttpInfo (int? caseId, int? userId = null, int? modelId = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling AIBatchesApi->AIBatchesGetModelStatistics");

            var localVarPath = "/api/v2/{caseId}/aIBatches/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (modelId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "modelId", modelId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AIBatchesGetModelStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelStatistics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelStatistics)));
        }

        /// <summary>
        /// Get model statistics 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="modelId"> (optional)</param>
        /// <returns>Task of ModelStatistics</returns>
        public async System.Threading.Tasks.Task<ModelStatistics> AIBatchesGetModelStatisticsAsync (int? caseId, int? userId = null, int? modelId = null)
        {
             ApiResponse<ModelStatistics> localVarResponse = await AIBatchesGetModelStatisticsAsyncWithHttpInfo(caseId, userId, modelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get model statistics 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="modelId"> (optional)</param>
        /// <returns>Task of ApiResponse (ModelStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelStatistics>> AIBatchesGetModelStatisticsAsyncWithHttpInfo (int? caseId, int? userId = null, int? modelId = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling AIBatchesApi->AIBatchesGetModelStatistics");

            var localVarPath = "/api/v2/{caseId}/aIBatches/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (modelId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "modelId", modelId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AIBatchesGetModelStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelStatistics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelStatistics)));
        }

        /// <summary>
        /// Get AI models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <returns>PaginatedOfListOfAIModel</returns>
        public PaginatedOfListOfAIModel AIBatchesGetModels (int? caseId, int? userId = null, int? start = null, int? count = null)
        {
             ApiResponse<PaginatedOfListOfAIModel> localVarResponse = AIBatchesGetModelsWithHttpInfo(caseId, userId, start, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get AI models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <returns>ApiResponse of PaginatedOfListOfAIModel</returns>
        public ApiResponse< PaginatedOfListOfAIModel > AIBatchesGetModelsWithHttpInfo (int? caseId, int? userId = null, int? start = null, int? count = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling AIBatchesApi->AIBatchesGetModels");

            var localVarPath = "/api/v2/{caseId}/aIBatches/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (start != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AIBatchesGetModels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedOfListOfAIModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaginatedOfListOfAIModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedOfListOfAIModel)));
        }

        /// <summary>
        /// Get AI models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <returns>Task of PaginatedOfListOfAIModel</returns>
        public async System.Threading.Tasks.Task<PaginatedOfListOfAIModel> AIBatchesGetModelsAsync (int? caseId, int? userId = null, int? start = null, int? count = null)
        {
             ApiResponse<PaginatedOfListOfAIModel> localVarResponse = await AIBatchesGetModelsAsyncWithHttpInfo(caseId, userId, start, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get AI models 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <returns>Task of ApiResponse (PaginatedOfListOfAIModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaginatedOfListOfAIModel>> AIBatchesGetModelsAsyncWithHttpInfo (int? caseId, int? userId = null, int? start = null, int? count = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling AIBatchesApi->AIBatchesGetModels");

            var localVarPath = "/api/v2/{caseId}/aIBatches/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (start != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AIBatchesGetModels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedOfListOfAIModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaginatedOfListOfAIModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedOfListOfAIModel)));
        }

        /// <summary>
        /// Get Cosmic queues 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="modelId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>List&lt;CosmicQueue&gt;</returns>
        public List<CosmicQueue> AIBatchesGetQueues (int? caseId, int? modelId = null, int? userId = null)
        {
             ApiResponse<List<CosmicQueue>> localVarResponse = AIBatchesGetQueuesWithHttpInfo(caseId, modelId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Cosmic queues 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="modelId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CosmicQueue&gt;</returns>
        public ApiResponse< List<CosmicQueue> > AIBatchesGetQueuesWithHttpInfo (int? caseId, int? modelId = null, int? userId = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling AIBatchesApi->AIBatchesGetQueues");

            var localVarPath = "/api/v2/{caseId}/aIBatches/queues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (modelId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "modelId", modelId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AIBatchesGetQueues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CosmicQueue>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CosmicQueue>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CosmicQueue>)));
        }

        /// <summary>
        /// Get Cosmic queues 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="modelId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>Task of List&lt;CosmicQueue&gt;</returns>
        public async System.Threading.Tasks.Task<List<CosmicQueue>> AIBatchesGetQueuesAsync (int? caseId, int? modelId = null, int? userId = null)
        {
             ApiResponse<List<CosmicQueue>> localVarResponse = await AIBatchesGetQueuesAsyncWithHttpInfo(caseId, modelId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Cosmic queues 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="modelId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CosmicQueue&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CosmicQueue>>> AIBatchesGetQueuesAsyncWithHttpInfo (int? caseId, int? modelId = null, int? userId = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling AIBatchesApi->AIBatchesGetQueues");

            var localVarPath = "/api/v2/{caseId}/aIBatches/queues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (modelId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "modelId", modelId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AIBatchesGetQueues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CosmicQueue>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CosmicQueue>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CosmicQueue>)));
        }

        /// <summary>
        /// Get tag profiles that contain the specified model 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="modelId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <returns>PaginatedOfListOfTagProfile</returns>
        public PaginatedOfListOfTagProfile AIBatchesGetTagProfiles (int? caseId, int? modelId = null, int? userId = null, int? start = null, int? count = null)
        {
             ApiResponse<PaginatedOfListOfTagProfile> localVarResponse = AIBatchesGetTagProfilesWithHttpInfo(caseId, modelId, userId, start, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get tag profiles that contain the specified model 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="modelId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <returns>ApiResponse of PaginatedOfListOfTagProfile</returns>
        public ApiResponse< PaginatedOfListOfTagProfile > AIBatchesGetTagProfilesWithHttpInfo (int? caseId, int? modelId = null, int? userId = null, int? start = null, int? count = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling AIBatchesApi->AIBatchesGetTagProfiles");

            var localVarPath = "/api/v2/{caseId}/aIBatches/tagProfiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (modelId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "modelId", modelId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (start != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AIBatchesGetTagProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedOfListOfTagProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaginatedOfListOfTagProfile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedOfListOfTagProfile)));
        }

        /// <summary>
        /// Get tag profiles that contain the specified model 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="modelId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <returns>Task of PaginatedOfListOfTagProfile</returns>
        public async System.Threading.Tasks.Task<PaginatedOfListOfTagProfile> AIBatchesGetTagProfilesAsync (int? caseId, int? modelId = null, int? userId = null, int? start = null, int? count = null)
        {
             ApiResponse<PaginatedOfListOfTagProfile> localVarResponse = await AIBatchesGetTagProfilesAsyncWithHttpInfo(caseId, modelId, userId, start, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get tag profiles that contain the specified model 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="modelId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 2147483647)</param>
        /// <returns>Task of ApiResponse (PaginatedOfListOfTagProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaginatedOfListOfTagProfile>> AIBatchesGetTagProfilesAsyncWithHttpInfo (int? caseId, int? modelId = null, int? userId = null, int? start = null, int? count = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling AIBatchesApi->AIBatchesGetTagProfiles");

            var localVarPath = "/api/v2/{caseId}/aIBatches/tagProfiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (modelId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "modelId", modelId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (start != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AIBatchesGetTagProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedOfListOfTagProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaginatedOfListOfTagProfile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedOfListOfTagProfile)));
        }

    }
}
