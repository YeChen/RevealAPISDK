/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITagsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// get Tags (Name, AI Model id) by UserId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"></param>
        /// <returns>List&lt;AIModelTag&gt;</returns>
        List<AIModelTag> TagV2GetAIModelTagsByUser (int? caseId, int? userId);

        /// <summary>
        /// get Tags (Name, AI Model id) by UserId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of List&lt;AIModelTag&gt;</returns>
        ApiResponse<List<AIModelTag>> TagV2GetAIModelTagsByUserWithHttpInfo (int? caseId, int? userId);
        /// <summary>
        /// get all tags for an AI Model (Cosmic Model)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="aiModelId"></param>
        /// <returns>List&lt;AIModelTagSet&gt;</returns>
        List<AIModelTagSet> TagV2GetRevealAITags (int? caseId, int? aiModelId);

        /// <summary>
        /// get all tags for an AI Model (Cosmic Model)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="aiModelId"></param>
        /// <returns>ApiResponse of List&lt;AIModelTagSet&gt;</returns>
        ApiResponse<List<AIModelTagSet>> TagV2GetRevealAITagsWithHttpInfo (int? caseId, int? aiModelId);
        /// <summary>
        /// get doc count for list of tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AggregationSearchResults</returns>
        AggregationSearchResults TagV2GetTagDocCount (int? caseId, TagCountQuery body = null);

        /// <summary>
        /// get doc count for list of tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AggregationSearchResults</returns>
        ApiResponse<AggregationSearchResults> TagV2GetTagDocCountWithHttpInfo (int? caseId, TagCountQuery body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// get Tags (Name, AI Model id) by UserId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of List&lt;AIModelTag&gt;</returns>
        System.Threading.Tasks.Task<List<AIModelTag>> TagV2GetAIModelTagsByUserAsync (int? caseId, int? userId);

        /// <summary>
        /// get Tags (Name, AI Model id) by UserId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (List&lt;AIModelTag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AIModelTag>>> TagV2GetAIModelTagsByUserAsyncWithHttpInfo (int? caseId, int? userId);
        /// <summary>
        /// get all tags for an AI Model (Cosmic Model)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="aiModelId"></param>
        /// <returns>Task of List&lt;AIModelTagSet&gt;</returns>
        System.Threading.Tasks.Task<List<AIModelTagSet>> TagV2GetRevealAITagsAsync (int? caseId, int? aiModelId);

        /// <summary>
        /// get all tags for an AI Model (Cosmic Model)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="aiModelId"></param>
        /// <returns>Task of ApiResponse (List&lt;AIModelTagSet&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AIModelTagSet>>> TagV2GetRevealAITagsAsyncWithHttpInfo (int? caseId, int? aiModelId);
        /// <summary>
        /// get doc count for list of tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AggregationSearchResults</returns>
        System.Threading.Tasks.Task<AggregationSearchResults> TagV2GetTagDocCountAsync (int? caseId, TagCountQuery body = null);

        /// <summary>
        /// get doc count for list of tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AggregationSearchResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationSearchResults>> TagV2GetTagDocCountAsyncWithHttpInfo (int? caseId, TagCountQuery body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TagsApi : ITagsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TagsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TagsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// get Tags (Name, AI Model id) by UserId 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"></param>
        /// <returns>List&lt;AIModelTag&gt;</returns>
        public List<AIModelTag> TagV2GetAIModelTagsByUser (int? caseId, int? userId)
        {
             ApiResponse<List<AIModelTag>> localVarResponse = TagV2GetAIModelTagsByUserWithHttpInfo(caseId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get Tags (Name, AI Model id) by UserId 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of List&lt;AIModelTag&gt;</returns>
        public ApiResponse< List<AIModelTag> > TagV2GetAIModelTagsByUserWithHttpInfo (int? caseId, int? userId)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling TagsApi->TagV2GetAIModelTagsByUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TagsApi->TagV2GetAIModelTagsByUser");

            var localVarPath = "/api/v2/{caseId}/tags/userId/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagV2GetAIModelTagsByUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AIModelTag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AIModelTag>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AIModelTag>)));
        }

        /// <summary>
        /// get Tags (Name, AI Model id) by UserId 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of List&lt;AIModelTag&gt;</returns>
        public async System.Threading.Tasks.Task<List<AIModelTag>> TagV2GetAIModelTagsByUserAsync (int? caseId, int? userId)
        {
             ApiResponse<List<AIModelTag>> localVarResponse = await TagV2GetAIModelTagsByUserAsyncWithHttpInfo(caseId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get Tags (Name, AI Model id) by UserId 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (List&lt;AIModelTag&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AIModelTag>>> TagV2GetAIModelTagsByUserAsyncWithHttpInfo (int? caseId, int? userId)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling TagsApi->TagV2GetAIModelTagsByUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TagsApi->TagV2GetAIModelTagsByUser");

            var localVarPath = "/api/v2/{caseId}/tags/userId/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagV2GetAIModelTagsByUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AIModelTag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AIModelTag>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AIModelTag>)));
        }

        /// <summary>
        /// get all tags for an AI Model (Cosmic Model) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="aiModelId"></param>
        /// <returns>List&lt;AIModelTagSet&gt;</returns>
        public List<AIModelTagSet> TagV2GetRevealAITags (int? caseId, int? aiModelId)
        {
             ApiResponse<List<AIModelTagSet>> localVarResponse = TagV2GetRevealAITagsWithHttpInfo(caseId, aiModelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get all tags for an AI Model (Cosmic Model) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="aiModelId"></param>
        /// <returns>ApiResponse of List&lt;AIModelTagSet&gt;</returns>
        public ApiResponse< List<AIModelTagSet> > TagV2GetRevealAITagsWithHttpInfo (int? caseId, int? aiModelId)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling TagsApi->TagV2GetRevealAITags");
            // verify the required parameter 'aiModelId' is set
            if (aiModelId == null)
                throw new ApiException(400, "Missing required parameter 'aiModelId' when calling TagsApi->TagV2GetRevealAITags");

            var localVarPath = "/api/v2/{caseId}/tags/aiModelId/{aiModelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (aiModelId != null) localVarPathParams.Add("aiModelId", Configuration.ApiClient.ParameterToString(aiModelId)); // path parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagV2GetRevealAITags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AIModelTagSet>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AIModelTagSet>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AIModelTagSet>)));
        }

        /// <summary>
        /// get all tags for an AI Model (Cosmic Model) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="aiModelId"></param>
        /// <returns>Task of List&lt;AIModelTagSet&gt;</returns>
        public async System.Threading.Tasks.Task<List<AIModelTagSet>> TagV2GetRevealAITagsAsync (int? caseId, int? aiModelId)
        {
             ApiResponse<List<AIModelTagSet>> localVarResponse = await TagV2GetRevealAITagsAsyncWithHttpInfo(caseId, aiModelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get all tags for an AI Model (Cosmic Model) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="aiModelId"></param>
        /// <returns>Task of ApiResponse (List&lt;AIModelTagSet&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AIModelTagSet>>> TagV2GetRevealAITagsAsyncWithHttpInfo (int? caseId, int? aiModelId)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling TagsApi->TagV2GetRevealAITags");
            // verify the required parameter 'aiModelId' is set
            if (aiModelId == null)
                throw new ApiException(400, "Missing required parameter 'aiModelId' when calling TagsApi->TagV2GetRevealAITags");

            var localVarPath = "/api/v2/{caseId}/tags/aiModelId/{aiModelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (aiModelId != null) localVarPathParams.Add("aiModelId", Configuration.ApiClient.ParameterToString(aiModelId)); // path parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagV2GetRevealAITags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AIModelTagSet>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AIModelTagSet>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AIModelTagSet>)));
        }

        /// <summary>
        /// get doc count for list of tags 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AggregationSearchResults</returns>
        public AggregationSearchResults TagV2GetTagDocCount (int? caseId, TagCountQuery body = null)
        {
             ApiResponse<AggregationSearchResults> localVarResponse = TagV2GetTagDocCountWithHttpInfo(caseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get doc count for list of tags 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AggregationSearchResults</returns>
        public ApiResponse< AggregationSearchResults > TagV2GetTagDocCountWithHttpInfo (int? caseId, TagCountQuery body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling TagsApi->TagV2GetTagDocCount");

            var localVarPath = "/api/v2/{caseId}/tags/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagV2GetTagDocCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationSearchResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationSearchResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationSearchResults)));
        }

        /// <summary>
        /// get doc count for list of tags 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AggregationSearchResults</returns>
        public async System.Threading.Tasks.Task<AggregationSearchResults> TagV2GetTagDocCountAsync (int? caseId, TagCountQuery body = null)
        {
             ApiResponse<AggregationSearchResults> localVarResponse = await TagV2GetTagDocCountAsyncWithHttpInfo(caseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get doc count for list of tags 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AggregationSearchResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationSearchResults>> TagV2GetTagDocCountAsyncWithHttpInfo (int? caseId, TagCountQuery body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling TagsApi->TagV2GetTagDocCount");

            var localVarPath = "/api/v2/{caseId}/tags/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagV2GetTagDocCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationSearchResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationSearchResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationSearchResults)));
        }

    }
}
