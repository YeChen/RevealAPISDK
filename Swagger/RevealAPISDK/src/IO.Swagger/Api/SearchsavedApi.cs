/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchsavedApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete A search from a specific folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="search"> (optional)</param>
        /// <returns></returns>
        void SavedSearchDeleteSearchFromSearchFolder (int? caseId, int? folderId, long? search = null);

        /// <summary>
        /// Delete A search from a specific folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SavedSearchDeleteSearchFromSearchFolderWithHttpInfo (int? caseId, int? folderId, long? search = null);
        /// <summary>
        /// Get Saved Searches
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="query"> (optional)</param>
        /// <param name="folderId"> (optional, default to 0)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="sortByAsc"> (optional, default to true)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 10)</param>
        /// <returns>PaginatedOfListOfSavedSearch</returns>
        PaginatedOfListOfSavedSearch SavedSearchGetSavedSearches (int? caseId, string query = null, int? folderId = null, string type = null, bool? sortByAsc = null, int? start = null, int? count = null);

        /// <summary>
        /// Get Saved Searches
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="query"> (optional)</param>
        /// <param name="folderId"> (optional, default to 0)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="sortByAsc"> (optional, default to true)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 10)</param>
        /// <returns>ApiResponse of PaginatedOfListOfSavedSearch</returns>
        ApiResponse<PaginatedOfListOfSavedSearch> SavedSearchGetSavedSearchesWithHttpInfo (int? caseId, string query = null, int? folderId = null, string type = null, bool? sortByAsc = null, int? start = null, int? count = null);
        /// <summary>
        /// Create a Saved Search and optionally run it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchJobResponse</returns>
        SearchJobResponse SavedSearchSaveSearch (int? caseId, SavedSearchCreate body = null);

        /// <summary>
        /// Create a Saved Search and optionally run it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchJobResponse</returns>
        ApiResponse<SearchJobResponse> SavedSearchSaveSearchWithHttpInfo (int? caseId, SavedSearchCreate body = null);
        /// <summary>
        /// Update a Saved Search and optionally run it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchJobResponse</returns>
        SearchJobResponse SavedSearchUpdateSavedSearch (int? caseId, long? id, SavedSearchCreate body = null);

        /// <summary>
        /// Update a Saved Search and optionally run it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchJobResponse</returns>
        ApiResponse<SearchJobResponse> SavedSearchUpdateSavedSearchWithHttpInfo (int? caseId, long? id, SavedSearchCreate body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete A search from a specific folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SavedSearchDeleteSearchFromSearchFolderAsync (int? caseId, int? folderId, long? search = null);

        /// <summary>
        /// Delete A search from a specific folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SavedSearchDeleteSearchFromSearchFolderAsyncWithHttpInfo (int? caseId, int? folderId, long? search = null);
        /// <summary>
        /// Get Saved Searches
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="query"> (optional)</param>
        /// <param name="folderId"> (optional, default to 0)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="sortByAsc"> (optional, default to true)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 10)</param>
        /// <returns>Task of PaginatedOfListOfSavedSearch</returns>
        System.Threading.Tasks.Task<PaginatedOfListOfSavedSearch> SavedSearchGetSavedSearchesAsync (int? caseId, string query = null, int? folderId = null, string type = null, bool? sortByAsc = null, int? start = null, int? count = null);

        /// <summary>
        /// Get Saved Searches
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="query"> (optional)</param>
        /// <param name="folderId"> (optional, default to 0)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="sortByAsc"> (optional, default to true)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (PaginatedOfListOfSavedSearch)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedOfListOfSavedSearch>> SavedSearchGetSavedSearchesAsyncWithHttpInfo (int? caseId, string query = null, int? folderId = null, string type = null, bool? sortByAsc = null, int? start = null, int? count = null);
        /// <summary>
        /// Create a Saved Search and optionally run it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SearchJobResponse</returns>
        System.Threading.Tasks.Task<SearchJobResponse> SavedSearchSaveSearchAsync (int? caseId, SavedSearchCreate body = null);

        /// <summary>
        /// Create a Saved Search and optionally run it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SearchJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchJobResponse>> SavedSearchSaveSearchAsyncWithHttpInfo (int? caseId, SavedSearchCreate body = null);
        /// <summary>
        /// Update a Saved Search and optionally run it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SearchJobResponse</returns>
        System.Threading.Tasks.Task<SearchJobResponse> SavedSearchUpdateSavedSearchAsync (int? caseId, long? id, SavedSearchCreate body = null);

        /// <summary>
        /// Update a Saved Search and optionally run it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SearchJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchJobResponse>> SavedSearchUpdateSavedSearchAsyncWithHttpInfo (int? caseId, long? id, SavedSearchCreate body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchsavedApi : ISearchsavedApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchsavedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchsavedApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchsavedApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchsavedApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete A search from a specific folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="search"> (optional)</param>
        /// <returns></returns>
        public void SavedSearchDeleteSearchFromSearchFolder (int? caseId, int? folderId, long? search = null)
        {
             SavedSearchDeleteSearchFromSearchFolderWithHttpInfo(caseId, folderId, search);
        }

        /// <summary>
        /// Delete A search from a specific folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SavedSearchDeleteSearchFromSearchFolderWithHttpInfo (int? caseId, int? folderId, long? search = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling SearchsavedApi->SavedSearchDeleteSearchFromSearchFolder");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling SearchsavedApi->SavedSearchDeleteSearchFromSearchFolder");

            var localVarPath = "/api/v2/{caseId}/search/saved/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (search != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SavedSearchDeleteSearchFromSearchFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete A search from a specific folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SavedSearchDeleteSearchFromSearchFolderAsync (int? caseId, int? folderId, long? search = null)
        {
             await SavedSearchDeleteSearchFromSearchFolderAsyncWithHttpInfo(caseId, folderId, search);

        }

        /// <summary>
        /// Delete A search from a specific folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SavedSearchDeleteSearchFromSearchFolderAsyncWithHttpInfo (int? caseId, int? folderId, long? search = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling SearchsavedApi->SavedSearchDeleteSearchFromSearchFolder");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling SearchsavedApi->SavedSearchDeleteSearchFromSearchFolder");

            var localVarPath = "/api/v2/{caseId}/search/saved/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (search != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SavedSearchDeleteSearchFromSearchFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Saved Searches 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="query"> (optional)</param>
        /// <param name="folderId"> (optional, default to 0)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="sortByAsc"> (optional, default to true)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 10)</param>
        /// <returns>PaginatedOfListOfSavedSearch</returns>
        public PaginatedOfListOfSavedSearch SavedSearchGetSavedSearches (int? caseId, string query = null, int? folderId = null, string type = null, bool? sortByAsc = null, int? start = null, int? count = null)
        {
             ApiResponse<PaginatedOfListOfSavedSearch> localVarResponse = SavedSearchGetSavedSearchesWithHttpInfo(caseId, query, folderId, type, sortByAsc, start, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Saved Searches 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="query"> (optional)</param>
        /// <param name="folderId"> (optional, default to 0)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="sortByAsc"> (optional, default to true)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 10)</param>
        /// <returns>ApiResponse of PaginatedOfListOfSavedSearch</returns>
        public ApiResponse< PaginatedOfListOfSavedSearch > SavedSearchGetSavedSearchesWithHttpInfo (int? caseId, string query = null, int? folderId = null, string type = null, bool? sortByAsc = null, int? start = null, int? count = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling SearchsavedApi->SavedSearchGetSavedSearches");

            var localVarPath = "/api/v2/{caseId}/search/saved";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (query != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (folderId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (sortByAsc != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortByAsc", sortByAsc)); // query parameter
            if (start != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SavedSearchGetSavedSearches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedOfListOfSavedSearch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaginatedOfListOfSavedSearch) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedOfListOfSavedSearch)));
        }

        /// <summary>
        /// Get Saved Searches 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="query"> (optional)</param>
        /// <param name="folderId"> (optional, default to 0)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="sortByAsc"> (optional, default to true)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 10)</param>
        /// <returns>Task of PaginatedOfListOfSavedSearch</returns>
        public async System.Threading.Tasks.Task<PaginatedOfListOfSavedSearch> SavedSearchGetSavedSearchesAsync (int? caseId, string query = null, int? folderId = null, string type = null, bool? sortByAsc = null, int? start = null, int? count = null)
        {
             ApiResponse<PaginatedOfListOfSavedSearch> localVarResponse = await SavedSearchGetSavedSearchesAsyncWithHttpInfo(caseId, query, folderId, type, sortByAsc, start, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Saved Searches 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="query"> (optional)</param>
        /// <param name="folderId"> (optional, default to 0)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="sortByAsc"> (optional, default to true)</param>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="count"> (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (PaginatedOfListOfSavedSearch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaginatedOfListOfSavedSearch>> SavedSearchGetSavedSearchesAsyncWithHttpInfo (int? caseId, string query = null, int? folderId = null, string type = null, bool? sortByAsc = null, int? start = null, int? count = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling SearchsavedApi->SavedSearchGetSavedSearches");

            var localVarPath = "/api/v2/{caseId}/search/saved";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (query != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (folderId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (sortByAsc != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortByAsc", sortByAsc)); // query parameter
            if (start != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SavedSearchGetSavedSearches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedOfListOfSavedSearch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaginatedOfListOfSavedSearch) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedOfListOfSavedSearch)));
        }

        /// <summary>
        /// Create a Saved Search and optionally run it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchJobResponse</returns>
        public SearchJobResponse SavedSearchSaveSearch (int? caseId, SavedSearchCreate body = null)
        {
             ApiResponse<SearchJobResponse> localVarResponse = SavedSearchSaveSearchWithHttpInfo(caseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Saved Search and optionally run it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchJobResponse</returns>
        public ApiResponse< SearchJobResponse > SavedSearchSaveSearchWithHttpInfo (int? caseId, SavedSearchCreate body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling SearchsavedApi->SavedSearchSaveSearch");

            var localVarPath = "/api/v2/{caseId}/search/saved";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SavedSearchSaveSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchJobResponse)));
        }

        /// <summary>
        /// Create a Saved Search and optionally run it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SearchJobResponse</returns>
        public async System.Threading.Tasks.Task<SearchJobResponse> SavedSearchSaveSearchAsync (int? caseId, SavedSearchCreate body = null)
        {
             ApiResponse<SearchJobResponse> localVarResponse = await SavedSearchSaveSearchAsyncWithHttpInfo(caseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Saved Search and optionally run it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SearchJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchJobResponse>> SavedSearchSaveSearchAsyncWithHttpInfo (int? caseId, SavedSearchCreate body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling SearchsavedApi->SavedSearchSaveSearch");

            var localVarPath = "/api/v2/{caseId}/search/saved";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SavedSearchSaveSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchJobResponse)));
        }

        /// <summary>
        /// Update a Saved Search and optionally run it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchJobResponse</returns>
        public SearchJobResponse SavedSearchUpdateSavedSearch (int? caseId, long? id, SavedSearchCreate body = null)
        {
             ApiResponse<SearchJobResponse> localVarResponse = SavedSearchUpdateSavedSearchWithHttpInfo(caseId, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Saved Search and optionally run it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchJobResponse</returns>
        public ApiResponse< SearchJobResponse > SavedSearchUpdateSavedSearchWithHttpInfo (int? caseId, long? id, SavedSearchCreate body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling SearchsavedApi->SavedSearchUpdateSavedSearch");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SearchsavedApi->SavedSearchUpdateSavedSearch");

            var localVarPath = "/api/v2/{caseId}/search/saved/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SavedSearchUpdateSavedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchJobResponse)));
        }

        /// <summary>
        /// Update a Saved Search and optionally run it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SearchJobResponse</returns>
        public async System.Threading.Tasks.Task<SearchJobResponse> SavedSearchUpdateSavedSearchAsync (int? caseId, long? id, SavedSearchCreate body = null)
        {
             ApiResponse<SearchJobResponse> localVarResponse = await SavedSearchUpdateSavedSearchAsyncWithHttpInfo(caseId, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Saved Search and optionally run it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SearchJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchJobResponse>> SavedSearchUpdateSavedSearchAsyncWithHttpInfo (int? caseId, long? id, SavedSearchCreate body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling SearchsavedApi->SavedSearchUpdateSavedSearch");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SearchsavedApi->SavedSearchUpdateSavedSearch");

            var localVarPath = "/api/v2/{caseId}/search/saved/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SavedSearchUpdateSavedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchJobResponse)));
        }

    }
}
