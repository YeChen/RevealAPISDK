/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a list of date histograms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;DateHistogramSearchResult&gt;</returns>
        List<DateHistogramSearchResult> DocumentV2GetDateHistogramResults (int? caseId, DateHistogramSearchCriteria body = null);

        /// <summary>
        /// Get a list of date histograms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DateHistogramSearchResult&gt;</returns>
        ApiResponse<List<DateHistogramSearchResult>> DocumentV2GetDateHistogramResultsWithHttpInfo (int? caseId, DateHistogramSearchCriteria body = null);
        /// <summary>
        /// Get the count of documents for the specified field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="fieldName">Database field name, for example FILE_EXTENSION (optional)</param>
        /// <param name="returnCountsGreaterThan">Optional. Only return counts greater than this value (optional, default to 0)</param>
        /// <param name="sortByValue">If true, the returned items will be sorted by the value instead of the count (optional, default to false)</param>
        /// <param name="sortAscending">True for ascending sort, false for descending (optional, default to false)</param>
        /// <param name="body">Start is zero based page index. Count is records per page (optional)</param>
        /// <returns>DocumentFieldCountResponse</returns>
        DocumentFieldCountResponse DocumentV2GetDocumentCountsForField (int? caseId, string fieldName = null, int? returnCountsGreaterThan = null, bool? sortByValue = null, bool? sortAscending = null, DocumentQuery body = null);

        /// <summary>
        /// Get the count of documents for the specified field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="fieldName">Database field name, for example FILE_EXTENSION (optional)</param>
        /// <param name="returnCountsGreaterThan">Optional. Only return counts greater than this value (optional, default to 0)</param>
        /// <param name="sortByValue">If true, the returned items will be sorted by the value instead of the count (optional, default to false)</param>
        /// <param name="sortAscending">True for ascending sort, false for descending (optional, default to false)</param>
        /// <param name="body">Start is zero based page index. Count is records per page (optional)</param>
        /// <returns>ApiResponse of DocumentFieldCountResponse</returns>
        ApiResponse<DocumentFieldCountResponse> DocumentV2GetDocumentCountsForFieldWithHttpInfo (int? caseId, string fieldName = null, int? returnCountsGreaterThan = null, bool? sortByValue = null, bool? sortAscending = null, DocumentQuery body = null);
        /// <summary>
        /// Get the count of documents for the specified fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body">Start is zero based page index. Count is records per page (optional)</param>
        /// <returns>List&lt;DocumentFieldCountResponse&gt;</returns>
        List<DocumentFieldCountResponse> DocumentV2GetDocumentCountsForField2 (int? caseId, DocumentFieldCountQuery body = null);

        /// <summary>
        /// Get the count of documents for the specified fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body">Start is zero based page index. Count is records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentFieldCountResponse&gt;</returns>
        ApiResponse<List<DocumentFieldCountResponse>> DocumentV2GetDocumentCountsForField2WithHttpInfo (int? caseId, DocumentFieldCountQuery body = null);
        /// <summary>
        /// Get documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body">Start is the zero based first record to return. Count is the number of records (optional)</param>
        /// <returns>DocumentQueryResults2</returns>
        DocumentQueryResults2 DocumentV2QueryDocs (int? caseId, DocumentQuery body = null);

        /// <summary>
        /// Get documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body">Start is the zero based first record to return. Count is the number of records (optional)</param>
        /// <returns>ApiResponse of DocumentQueryResults2</returns>
        ApiResponse<DocumentQueryResults2> DocumentV2QueryDocsWithHttpInfo (int? caseId, DocumentQuery body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a list of date histograms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;DateHistogramSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<DateHistogramSearchResult>> DocumentV2GetDateHistogramResultsAsync (int? caseId, DateHistogramSearchCriteria body = null);

        /// <summary>
        /// Get a list of date histograms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DateHistogramSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DateHistogramSearchResult>>> DocumentV2GetDateHistogramResultsAsyncWithHttpInfo (int? caseId, DateHistogramSearchCriteria body = null);
        /// <summary>
        /// Get the count of documents for the specified field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="fieldName">Database field name, for example FILE_EXTENSION (optional)</param>
        /// <param name="returnCountsGreaterThan">Optional. Only return counts greater than this value (optional, default to 0)</param>
        /// <param name="sortByValue">If true, the returned items will be sorted by the value instead of the count (optional, default to false)</param>
        /// <param name="sortAscending">True for ascending sort, false for descending (optional, default to false)</param>
        /// <param name="body">Start is zero based page index. Count is records per page (optional)</param>
        /// <returns>Task of DocumentFieldCountResponse</returns>
        System.Threading.Tasks.Task<DocumentFieldCountResponse> DocumentV2GetDocumentCountsForFieldAsync (int? caseId, string fieldName = null, int? returnCountsGreaterThan = null, bool? sortByValue = null, bool? sortAscending = null, DocumentQuery body = null);

        /// <summary>
        /// Get the count of documents for the specified field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="fieldName">Database field name, for example FILE_EXTENSION (optional)</param>
        /// <param name="returnCountsGreaterThan">Optional. Only return counts greater than this value (optional, default to 0)</param>
        /// <param name="sortByValue">If true, the returned items will be sorted by the value instead of the count (optional, default to false)</param>
        /// <param name="sortAscending">True for ascending sort, false for descending (optional, default to false)</param>
        /// <param name="body">Start is zero based page index. Count is records per page (optional)</param>
        /// <returns>Task of ApiResponse (DocumentFieldCountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldCountResponse>> DocumentV2GetDocumentCountsForFieldAsyncWithHttpInfo (int? caseId, string fieldName = null, int? returnCountsGreaterThan = null, bool? sortByValue = null, bool? sortAscending = null, DocumentQuery body = null);
        /// <summary>
        /// Get the count of documents for the specified fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body">Start is zero based page index. Count is records per page (optional)</param>
        /// <returns>Task of List&lt;DocumentFieldCountResponse&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentFieldCountResponse>> DocumentV2GetDocumentCountsForField2Async (int? caseId, DocumentFieldCountQuery body = null);

        /// <summary>
        /// Get the count of documents for the specified fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body">Start is zero based page index. Count is records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentFieldCountResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentFieldCountResponse>>> DocumentV2GetDocumentCountsForField2AsyncWithHttpInfo (int? caseId, DocumentFieldCountQuery body = null);
        /// <summary>
        /// Get documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body">Start is the zero based first record to return. Count is the number of records (optional)</param>
        /// <returns>Task of DocumentQueryResults2</returns>
        System.Threading.Tasks.Task<DocumentQueryResults2> DocumentV2QueryDocsAsync (int? caseId, DocumentQuery body = null);

        /// <summary>
        /// Get documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body">Start is the zero based first record to return. Count is the number of records (optional)</param>
        /// <returns>Task of ApiResponse (DocumentQueryResults2)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentQueryResults2>> DocumentV2QueryDocsAsyncWithHttpInfo (int? caseId, DocumentQuery body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocsApi : IDocsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a list of date histograms 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;DateHistogramSearchResult&gt;</returns>
        public List<DateHistogramSearchResult> DocumentV2GetDateHistogramResults (int? caseId, DateHistogramSearchCriteria body = null)
        {
             ApiResponse<List<DateHistogramSearchResult>> localVarResponse = DocumentV2GetDateHistogramResultsWithHttpInfo(caseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of date histograms 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DateHistogramSearchResult&gt;</returns>
        public ApiResponse< List<DateHistogramSearchResult> > DocumentV2GetDateHistogramResultsWithHttpInfo (int? caseId, DateHistogramSearchCriteria body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling DocsApi->DocumentV2GetDateHistogramResults");

            var localVarPath = "/api/v2/{caseId}/docs/date-histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentV2GetDateHistogramResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DateHistogramSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DateHistogramSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DateHistogramSearchResult>)));
        }

        /// <summary>
        /// Get a list of date histograms 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;DateHistogramSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<DateHistogramSearchResult>> DocumentV2GetDateHistogramResultsAsync (int? caseId, DateHistogramSearchCriteria body = null)
        {
             ApiResponse<List<DateHistogramSearchResult>> localVarResponse = await DocumentV2GetDateHistogramResultsAsyncWithHttpInfo(caseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of date histograms 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DateHistogramSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DateHistogramSearchResult>>> DocumentV2GetDateHistogramResultsAsyncWithHttpInfo (int? caseId, DateHistogramSearchCriteria body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling DocsApi->DocumentV2GetDateHistogramResults");

            var localVarPath = "/api/v2/{caseId}/docs/date-histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentV2GetDateHistogramResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DateHistogramSearchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DateHistogramSearchResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DateHistogramSearchResult>)));
        }

        /// <summary>
        /// Get the count of documents for the specified field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="fieldName">Database field name, for example FILE_EXTENSION (optional)</param>
        /// <param name="returnCountsGreaterThan">Optional. Only return counts greater than this value (optional, default to 0)</param>
        /// <param name="sortByValue">If true, the returned items will be sorted by the value instead of the count (optional, default to false)</param>
        /// <param name="sortAscending">True for ascending sort, false for descending (optional, default to false)</param>
        /// <param name="body">Start is zero based page index. Count is records per page (optional)</param>
        /// <returns>DocumentFieldCountResponse</returns>
        public DocumentFieldCountResponse DocumentV2GetDocumentCountsForField (int? caseId, string fieldName = null, int? returnCountsGreaterThan = null, bool? sortByValue = null, bool? sortAscending = null, DocumentQuery body = null)
        {
             ApiResponse<DocumentFieldCountResponse> localVarResponse = DocumentV2GetDocumentCountsForFieldWithHttpInfo(caseId, fieldName, returnCountsGreaterThan, sortByValue, sortAscending, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the count of documents for the specified field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="fieldName">Database field name, for example FILE_EXTENSION (optional)</param>
        /// <param name="returnCountsGreaterThan">Optional. Only return counts greater than this value (optional, default to 0)</param>
        /// <param name="sortByValue">If true, the returned items will be sorted by the value instead of the count (optional, default to false)</param>
        /// <param name="sortAscending">True for ascending sort, false for descending (optional, default to false)</param>
        /// <param name="body">Start is zero based page index. Count is records per page (optional)</param>
        /// <returns>ApiResponse of DocumentFieldCountResponse</returns>
        public ApiResponse< DocumentFieldCountResponse > DocumentV2GetDocumentCountsForFieldWithHttpInfo (int? caseId, string fieldName = null, int? returnCountsGreaterThan = null, bool? sortByValue = null, bool? sortAscending = null, DocumentQuery body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling DocsApi->DocumentV2GetDocumentCountsForField");

            var localVarPath = "/api/v2/{caseId}/docs/countsbyfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (fieldName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fieldName", fieldName)); // query parameter
            if (returnCountsGreaterThan != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "returnCountsGreaterThan", returnCountsGreaterThan)); // query parameter
            if (sortByValue != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortByValue", sortByValue)); // query parameter
            if (sortAscending != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortAscending", sortAscending)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentV2GetDocumentCountsForField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentFieldCountResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldCountResponse)));
        }

        /// <summary>
        /// Get the count of documents for the specified field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="fieldName">Database field name, for example FILE_EXTENSION (optional)</param>
        /// <param name="returnCountsGreaterThan">Optional. Only return counts greater than this value (optional, default to 0)</param>
        /// <param name="sortByValue">If true, the returned items will be sorted by the value instead of the count (optional, default to false)</param>
        /// <param name="sortAscending">True for ascending sort, false for descending (optional, default to false)</param>
        /// <param name="body">Start is zero based page index. Count is records per page (optional)</param>
        /// <returns>Task of DocumentFieldCountResponse</returns>
        public async System.Threading.Tasks.Task<DocumentFieldCountResponse> DocumentV2GetDocumentCountsForFieldAsync (int? caseId, string fieldName = null, int? returnCountsGreaterThan = null, bool? sortByValue = null, bool? sortAscending = null, DocumentQuery body = null)
        {
             ApiResponse<DocumentFieldCountResponse> localVarResponse = await DocumentV2GetDocumentCountsForFieldAsyncWithHttpInfo(caseId, fieldName, returnCountsGreaterThan, sortByValue, sortAscending, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the count of documents for the specified field 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="fieldName">Database field name, for example FILE_EXTENSION (optional)</param>
        /// <param name="returnCountsGreaterThan">Optional. Only return counts greater than this value (optional, default to 0)</param>
        /// <param name="sortByValue">If true, the returned items will be sorted by the value instead of the count (optional, default to false)</param>
        /// <param name="sortAscending">True for ascending sort, false for descending (optional, default to false)</param>
        /// <param name="body">Start is zero based page index. Count is records per page (optional)</param>
        /// <returns>Task of ApiResponse (DocumentFieldCountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldCountResponse>> DocumentV2GetDocumentCountsForFieldAsyncWithHttpInfo (int? caseId, string fieldName = null, int? returnCountsGreaterThan = null, bool? sortByValue = null, bool? sortAscending = null, DocumentQuery body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling DocsApi->DocumentV2GetDocumentCountsForField");

            var localVarPath = "/api/v2/{caseId}/docs/countsbyfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (fieldName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fieldName", fieldName)); // query parameter
            if (returnCountsGreaterThan != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "returnCountsGreaterThan", returnCountsGreaterThan)); // query parameter
            if (sortByValue != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortByValue", sortByValue)); // query parameter
            if (sortAscending != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortAscending", sortAscending)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentV2GetDocumentCountsForField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentFieldCountResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldCountResponse)));
        }

        /// <summary>
        /// Get the count of documents for the specified fields 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body">Start is zero based page index. Count is records per page (optional)</param>
        /// <returns>List&lt;DocumentFieldCountResponse&gt;</returns>
        public List<DocumentFieldCountResponse> DocumentV2GetDocumentCountsForField2 (int? caseId, DocumentFieldCountQuery body = null)
        {
             ApiResponse<List<DocumentFieldCountResponse>> localVarResponse = DocumentV2GetDocumentCountsForField2WithHttpInfo(caseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the count of documents for the specified fields 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body">Start is zero based page index. Count is records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentFieldCountResponse&gt;</returns>
        public ApiResponse< List<DocumentFieldCountResponse> > DocumentV2GetDocumentCountsForField2WithHttpInfo (int? caseId, DocumentFieldCountQuery body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling DocsApi->DocumentV2GetDocumentCountsForField2");

            var localVarPath = "/api/v2/{caseId}/docs/countsbyfield2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentV2GetDocumentCountsForField2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentFieldCountResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentFieldCountResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentFieldCountResponse>)));
        }

        /// <summary>
        /// Get the count of documents for the specified fields 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body">Start is zero based page index. Count is records per page (optional)</param>
        /// <returns>Task of List&lt;DocumentFieldCountResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentFieldCountResponse>> DocumentV2GetDocumentCountsForField2Async (int? caseId, DocumentFieldCountQuery body = null)
        {
             ApiResponse<List<DocumentFieldCountResponse>> localVarResponse = await DocumentV2GetDocumentCountsForField2AsyncWithHttpInfo(caseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the count of documents for the specified fields 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body">Start is zero based page index. Count is records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentFieldCountResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentFieldCountResponse>>> DocumentV2GetDocumentCountsForField2AsyncWithHttpInfo (int? caseId, DocumentFieldCountQuery body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling DocsApi->DocumentV2GetDocumentCountsForField2");

            var localVarPath = "/api/v2/{caseId}/docs/countsbyfield2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentV2GetDocumentCountsForField2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentFieldCountResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentFieldCountResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentFieldCountResponse>)));
        }

        /// <summary>
        /// Get documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body">Start is the zero based first record to return. Count is the number of records (optional)</param>
        /// <returns>DocumentQueryResults2</returns>
        public DocumentQueryResults2 DocumentV2QueryDocs (int? caseId, DocumentQuery body = null)
        {
             ApiResponse<DocumentQueryResults2> localVarResponse = DocumentV2QueryDocsWithHttpInfo(caseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body">Start is the zero based first record to return. Count is the number of records (optional)</param>
        /// <returns>ApiResponse of DocumentQueryResults2</returns>
        public ApiResponse< DocumentQueryResults2 > DocumentV2QueryDocsWithHttpInfo (int? caseId, DocumentQuery body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling DocsApi->DocumentV2QueryDocs");

            var localVarPath = "/api/v2/{caseId}/docs/query2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentV2QueryDocs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentQueryResults2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentQueryResults2) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentQueryResults2)));
        }

        /// <summary>
        /// Get documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body">Start is the zero based first record to return. Count is the number of records (optional)</param>
        /// <returns>Task of DocumentQueryResults2</returns>
        public async System.Threading.Tasks.Task<DocumentQueryResults2> DocumentV2QueryDocsAsync (int? caseId, DocumentQuery body = null)
        {
             ApiResponse<DocumentQueryResults2> localVarResponse = await DocumentV2QueryDocsAsyncWithHttpInfo(caseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get documents 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Project ID</param>
        /// <param name="body">Start is the zero based first record to return. Count is the number of records (optional)</param>
        /// <returns>Task of ApiResponse (DocumentQueryResults2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentQueryResults2>> DocumentV2QueryDocsAsyncWithHttpInfo (int? caseId, DocumentQuery body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling DocsApi->DocumentV2QueryDocs");

            var localVarPath = "/api/v2/{caseId}/docs/query2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentV2QueryDocs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentQueryResults2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentQueryResults2) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentQueryResults2)));
        }

    }
}
