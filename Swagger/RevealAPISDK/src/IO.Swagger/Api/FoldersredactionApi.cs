/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersredactionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a redaction folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="organization">Where we are creating the folder (leave blank if Review) (optional)</param>
        /// <param name="parentId">Which folder should be the folder&#39;s parent (2 is root) (optional, default to 0)</param>
        /// <param name="displayOrder">1 based index to order under parent or 0-alphabetically, -1-place at end (optional, default to 0)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>WorkFolder</returns>
        WorkFolder RedactionFoldersCreateFolder (int? caseId, string organization = null, int? parentId = null, int? displayOrder = null, WorkFolderCreate body = null);

        /// <summary>
        /// Creates a redaction folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="organization">Where we are creating the folder (leave blank if Review) (optional)</param>
        /// <param name="parentId">Which folder should be the folder&#39;s parent (2 is root) (optional, default to 0)</param>
        /// <param name="displayOrder">1 based index to order under parent or 0-alphabetically, -1-place at end (optional, default to 0)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of WorkFolder</returns>
        ApiResponse<WorkFolder> RedactionFoldersCreateFolderWithHttpInfo (int? caseId, string organization = null, int? parentId = null, int? displayOrder = null, WorkFolderCreate body = null);
        /// <summary>
        /// Deletes a redaction folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        void RedactionFoldersDelete (int? caseId, int? id);

        /// <summary>
        /// Deletes a redaction folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFoldersDeleteWithHttpInfo (int? caseId, int? id);
        /// <summary>
        /// Get redaction folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="immediateOnly"> (optional, default to true)</param>
        /// <param name="getDocumentCounts"> (optional, default to true)</param>
        /// <param name="uniqueId"> (optional)</param>
        /// <param name="filterQuery">Partial folder name match (optional)</param>
        /// <param name="filterOperator"> (optional)</param>
        /// <param name="isAdminView"> (optional, default to false)</param>
        /// <param name="userIdRequested"> (optional, default to false)</param>
        /// <returns>List&lt;WorkFolder&gt;</returns>
        List<WorkFolder> RedactionFoldersGet (int? caseId, long? folderId, int? userId = null, bool? immediateOnly = null, bool? getDocumentCounts = null, string uniqueId = null, string filterQuery = null, string filterOperator = null, bool? isAdminView = null, bool? userIdRequested = null);

        /// <summary>
        /// Get redaction folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="immediateOnly"> (optional, default to true)</param>
        /// <param name="getDocumentCounts"> (optional, default to true)</param>
        /// <param name="uniqueId"> (optional)</param>
        /// <param name="filterQuery">Partial folder name match (optional)</param>
        /// <param name="filterOperator"> (optional)</param>
        /// <param name="isAdminView"> (optional, default to false)</param>
        /// <param name="userIdRequested"> (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;WorkFolder&gt;</returns>
        ApiResponse<List<WorkFolder>> RedactionFoldersGetWithHttpInfo (int? caseId, long? folderId, int? userId = null, bool? immediateOnly = null, bool? getDocumentCounts = null, string uniqueId = null, string filterQuery = null, string filterOperator = null, bool? isAdminView = null, bool? userIdRequested = null);
        /// <summary>
        /// Get ACL permission data for a redaction folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>List&lt;FolderAccessControl&gt;</returns>
        List<FolderAccessControl> RedactionFoldersGetFolderAccessControl (int? caseId, int? id);

        /// <summary>
        /// Get ACL permission data for a redaction folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;FolderAccessControl&gt;</returns>
        ApiResponse<List<FolderAccessControl>> RedactionFoldersGetFolderAccessControlWithHttpInfo (int? caseId, int? id);
        /// <summary>
        /// Locks or unlocks the contents in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Folder we are updating</param>
        /// <param name="lockFolder">True to lock, false to unlock (optional)</param>
        /// <param name="body">What aspects of the folder to lock/unlock (optional)</param>
        /// <returns></returns>
        void RedactionFoldersLockDownFolder (int? caseId, int? id, bool? lockFolder = null, LockWorkFolder body = null);

        /// <summary>
        /// Locks or unlocks the contents in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Folder we are updating</param>
        /// <param name="lockFolder">True to lock, false to unlock (optional)</param>
        /// <param name="body">What aspects of the folder to lock/unlock (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFoldersLockDownFolderWithHttpInfo (int? caseId, int? id, bool? lockFolder = null, LockWorkFolder body = null);
        /// <summary>
        /// Updates a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Id for folder whose name we are changing</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void RedactionFoldersModifyFolder (int? caseId, int? id, FolderUpdate body = null);

        /// <summary>
        /// Updates a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Id for folder whose name we are changing</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFoldersModifyFolderWithHttpInfo (int? caseId, int? id, FolderUpdate body = null);
        /// <summary>
        /// Move a folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Id for folder whose name we are changing</param>
        /// <param name="parentId">Parent folder to move under. Must be a redaction folder. Specify 0 keeps same parent (optional, default to 0)</param>
        /// <param name="displayOrder">Order under parent. Starting value is 1. 0-order alphabetically (optional, default to 0)</param>
        /// <returns></returns>
        void RedactionFoldersMoveFolder (int? caseId, int? id, long? parentId = null, int? displayOrder = null);

        /// <summary>
        /// Move a folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Id for folder whose name we are changing</param>
        /// <param name="parentId">Parent folder to move under. Must be a redaction folder. Specify 0 keeps same parent (optional, default to 0)</param>
        /// <param name="displayOrder">Order under parent. Starting value is 1. 0-order alphabetically (optional, default to 0)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFoldersMoveFolderWithHttpInfo (int? caseId, int? id, long? parentId = null, int? displayOrder = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a redaction folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="organization">Where we are creating the folder (leave blank if Review) (optional)</param>
        /// <param name="parentId">Which folder should be the folder&#39;s parent (2 is root) (optional, default to 0)</param>
        /// <param name="displayOrder">1 based index to order under parent or 0-alphabetically, -1-place at end (optional, default to 0)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of WorkFolder</returns>
        System.Threading.Tasks.Task<WorkFolder> RedactionFoldersCreateFolderAsync (int? caseId, string organization = null, int? parentId = null, int? displayOrder = null, WorkFolderCreate body = null);

        /// <summary>
        /// Creates a redaction folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="organization">Where we are creating the folder (leave blank if Review) (optional)</param>
        /// <param name="parentId">Which folder should be the folder&#39;s parent (2 is root) (optional, default to 0)</param>
        /// <param name="displayOrder">1 based index to order under parent or 0-alphabetically, -1-place at end (optional, default to 0)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (WorkFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkFolder>> RedactionFoldersCreateFolderAsyncWithHttpInfo (int? caseId, string organization = null, int? parentId = null, int? displayOrder = null, WorkFolderCreate body = null);
        /// <summary>
        /// Deletes a redaction folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFoldersDeleteAsync (int? caseId, int? id);

        /// <summary>
        /// Deletes a redaction folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFoldersDeleteAsyncWithHttpInfo (int? caseId, int? id);
        /// <summary>
        /// Get redaction folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="immediateOnly"> (optional, default to true)</param>
        /// <param name="getDocumentCounts"> (optional, default to true)</param>
        /// <param name="uniqueId"> (optional)</param>
        /// <param name="filterQuery">Partial folder name match (optional)</param>
        /// <param name="filterOperator"> (optional)</param>
        /// <param name="isAdminView"> (optional, default to false)</param>
        /// <param name="userIdRequested"> (optional, default to false)</param>
        /// <returns>Task of List&lt;WorkFolder&gt;</returns>
        System.Threading.Tasks.Task<List<WorkFolder>> RedactionFoldersGetAsync (int? caseId, long? folderId, int? userId = null, bool? immediateOnly = null, bool? getDocumentCounts = null, string uniqueId = null, string filterQuery = null, string filterOperator = null, bool? isAdminView = null, bool? userIdRequested = null);

        /// <summary>
        /// Get redaction folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="immediateOnly"> (optional, default to true)</param>
        /// <param name="getDocumentCounts"> (optional, default to true)</param>
        /// <param name="uniqueId"> (optional)</param>
        /// <param name="filterQuery">Partial folder name match (optional)</param>
        /// <param name="filterOperator"> (optional)</param>
        /// <param name="isAdminView"> (optional, default to false)</param>
        /// <param name="userIdRequested"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;WorkFolder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkFolder>>> RedactionFoldersGetAsyncWithHttpInfo (int? caseId, long? folderId, int? userId = null, bool? immediateOnly = null, bool? getDocumentCounts = null, string uniqueId = null, string filterQuery = null, string filterOperator = null, bool? isAdminView = null, bool? userIdRequested = null);
        /// <summary>
        /// Get ACL permission data for a redaction folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;FolderAccessControl&gt;</returns>
        System.Threading.Tasks.Task<List<FolderAccessControl>> RedactionFoldersGetFolderAccessControlAsync (int? caseId, int? id);

        /// <summary>
        /// Get ACL permission data for a redaction folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;FolderAccessControl&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FolderAccessControl>>> RedactionFoldersGetFolderAccessControlAsyncWithHttpInfo (int? caseId, int? id);
        /// <summary>
        /// Locks or unlocks the contents in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Folder we are updating</param>
        /// <param name="lockFolder">True to lock, false to unlock (optional)</param>
        /// <param name="body">What aspects of the folder to lock/unlock (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFoldersLockDownFolderAsync (int? caseId, int? id, bool? lockFolder = null, LockWorkFolder body = null);

        /// <summary>
        /// Locks or unlocks the contents in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Folder we are updating</param>
        /// <param name="lockFolder">True to lock, false to unlock (optional)</param>
        /// <param name="body">What aspects of the folder to lock/unlock (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFoldersLockDownFolderAsyncWithHttpInfo (int? caseId, int? id, bool? lockFolder = null, LockWorkFolder body = null);
        /// <summary>
        /// Updates a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Id for folder whose name we are changing</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFoldersModifyFolderAsync (int? caseId, int? id, FolderUpdate body = null);

        /// <summary>
        /// Updates a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Id for folder whose name we are changing</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFoldersModifyFolderAsyncWithHttpInfo (int? caseId, int? id, FolderUpdate body = null);
        /// <summary>
        /// Move a folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Id for folder whose name we are changing</param>
        /// <param name="parentId">Parent folder to move under. Must be a redaction folder. Specify 0 keeps same parent (optional, default to 0)</param>
        /// <param name="displayOrder">Order under parent. Starting value is 1. 0-order alphabetically (optional, default to 0)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFoldersMoveFolderAsync (int? caseId, int? id, long? parentId = null, int? displayOrder = null);

        /// <summary>
        /// Move a folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Id for folder whose name we are changing</param>
        /// <param name="parentId">Parent folder to move under. Must be a redaction folder. Specify 0 keeps same parent (optional, default to 0)</param>
        /// <param name="displayOrder">Order under parent. Starting value is 1. 0-order alphabetically (optional, default to 0)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFoldersMoveFolderAsyncWithHttpInfo (int? caseId, int? id, long? parentId = null, int? displayOrder = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FoldersredactionApi : IFoldersredactionApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersredactionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersredactionApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersredactionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FoldersredactionApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a redaction folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="organization">Where we are creating the folder (leave blank if Review) (optional)</param>
        /// <param name="parentId">Which folder should be the folder&#39;s parent (2 is root) (optional, default to 0)</param>
        /// <param name="displayOrder">1 based index to order under parent or 0-alphabetically, -1-place at end (optional, default to 0)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>WorkFolder</returns>
        public WorkFolder RedactionFoldersCreateFolder (int? caseId, string organization = null, int? parentId = null, int? displayOrder = null, WorkFolderCreate body = null)
        {
             ApiResponse<WorkFolder> localVarResponse = RedactionFoldersCreateFolderWithHttpInfo(caseId, organization, parentId, displayOrder, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a redaction folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="organization">Where we are creating the folder (leave blank if Review) (optional)</param>
        /// <param name="parentId">Which folder should be the folder&#39;s parent (2 is root) (optional, default to 0)</param>
        /// <param name="displayOrder">1 based index to order under parent or 0-alphabetically, -1-place at end (optional, default to 0)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of WorkFolder</returns>
        public ApiResponse< WorkFolder > RedactionFoldersCreateFolderWithHttpInfo (int? caseId, string organization = null, int? parentId = null, int? displayOrder = null, WorkFolderCreate body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersredactionApi->RedactionFoldersCreateFolder");

            var localVarPath = "/api/v2/{caseId}/folders/redaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (organization != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "organization", organization)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (displayOrder != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "displayOrder", displayOrder)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFoldersCreateFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkFolder)));
        }

        /// <summary>
        /// Creates a redaction folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="organization">Where we are creating the folder (leave blank if Review) (optional)</param>
        /// <param name="parentId">Which folder should be the folder&#39;s parent (2 is root) (optional, default to 0)</param>
        /// <param name="displayOrder">1 based index to order under parent or 0-alphabetically, -1-place at end (optional, default to 0)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of WorkFolder</returns>
        public async System.Threading.Tasks.Task<WorkFolder> RedactionFoldersCreateFolderAsync (int? caseId, string organization = null, int? parentId = null, int? displayOrder = null, WorkFolderCreate body = null)
        {
             ApiResponse<WorkFolder> localVarResponse = await RedactionFoldersCreateFolderAsyncWithHttpInfo(caseId, organization, parentId, displayOrder, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a redaction folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="organization">Where we are creating the folder (leave blank if Review) (optional)</param>
        /// <param name="parentId">Which folder should be the folder&#39;s parent (2 is root) (optional, default to 0)</param>
        /// <param name="displayOrder">1 based index to order under parent or 0-alphabetically, -1-place at end (optional, default to 0)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (WorkFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkFolder>> RedactionFoldersCreateFolderAsyncWithHttpInfo (int? caseId, string organization = null, int? parentId = null, int? displayOrder = null, WorkFolderCreate body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersredactionApi->RedactionFoldersCreateFolder");

            var localVarPath = "/api/v2/{caseId}/folders/redaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (organization != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "organization", organization)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (displayOrder != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "displayOrder", displayOrder)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFoldersCreateFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkFolder)));
        }

        /// <summary>
        /// Deletes a redaction folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void RedactionFoldersDelete (int? caseId, int? id)
        {
             RedactionFoldersDeleteWithHttpInfo(caseId, id);
        }

        /// <summary>
        /// Deletes a redaction folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFoldersDeleteWithHttpInfo (int? caseId, int? id)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersredactionApi->RedactionFoldersDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersredactionApi->RedactionFoldersDelete");

            var localVarPath = "/api/v2/{caseId}/folders/redaction/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFoldersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a redaction folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFoldersDeleteAsync (int? caseId, int? id)
        {
             await RedactionFoldersDeleteAsyncWithHttpInfo(caseId, id);

        }

        /// <summary>
        /// Deletes a redaction folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFoldersDeleteAsyncWithHttpInfo (int? caseId, int? id)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersredactionApi->RedactionFoldersDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersredactionApi->RedactionFoldersDelete");

            var localVarPath = "/api/v2/{caseId}/folders/redaction/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFoldersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get redaction folders 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="immediateOnly"> (optional, default to true)</param>
        /// <param name="getDocumentCounts"> (optional, default to true)</param>
        /// <param name="uniqueId"> (optional)</param>
        /// <param name="filterQuery">Partial folder name match (optional)</param>
        /// <param name="filterOperator"> (optional)</param>
        /// <param name="isAdminView"> (optional, default to false)</param>
        /// <param name="userIdRequested"> (optional, default to false)</param>
        /// <returns>List&lt;WorkFolder&gt;</returns>
        public List<WorkFolder> RedactionFoldersGet (int? caseId, long? folderId, int? userId = null, bool? immediateOnly = null, bool? getDocumentCounts = null, string uniqueId = null, string filterQuery = null, string filterOperator = null, bool? isAdminView = null, bool? userIdRequested = null)
        {
             ApiResponse<List<WorkFolder>> localVarResponse = RedactionFoldersGetWithHttpInfo(caseId, folderId, userId, immediateOnly, getDocumentCounts, uniqueId, filterQuery, filterOperator, isAdminView, userIdRequested);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get redaction folders 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="immediateOnly"> (optional, default to true)</param>
        /// <param name="getDocumentCounts"> (optional, default to true)</param>
        /// <param name="uniqueId"> (optional)</param>
        /// <param name="filterQuery">Partial folder name match (optional)</param>
        /// <param name="filterOperator"> (optional)</param>
        /// <param name="isAdminView"> (optional, default to false)</param>
        /// <param name="userIdRequested"> (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;WorkFolder&gt;</returns>
        public ApiResponse< List<WorkFolder> > RedactionFoldersGetWithHttpInfo (int? caseId, long? folderId, int? userId = null, bool? immediateOnly = null, bool? getDocumentCounts = null, string uniqueId = null, string filterQuery = null, string filterOperator = null, bool? isAdminView = null, bool? userIdRequested = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersredactionApi->RedactionFoldersGet");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FoldersredactionApi->RedactionFoldersGet");

            var localVarPath = "/api/v2/{caseId}/folders/redaction/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (immediateOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "immediateOnly", immediateOnly)); // query parameter
            if (getDocumentCounts != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "getDocumentCounts", getDocumentCounts)); // query parameter
            if (uniqueId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "uniqueId", uniqueId)); // query parameter
            if (filterQuery != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filterQuery", filterQuery)); // query parameter
            if (filterOperator != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filterOperator", filterOperator)); // query parameter
            if (isAdminView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isAdminView", isAdminView)); // query parameter
            if (userIdRequested != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userIdRequested", userIdRequested)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WorkFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkFolder>)));
        }

        /// <summary>
        /// Get redaction folders 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="immediateOnly"> (optional, default to true)</param>
        /// <param name="getDocumentCounts"> (optional, default to true)</param>
        /// <param name="uniqueId"> (optional)</param>
        /// <param name="filterQuery">Partial folder name match (optional)</param>
        /// <param name="filterOperator"> (optional)</param>
        /// <param name="isAdminView"> (optional, default to false)</param>
        /// <param name="userIdRequested"> (optional, default to false)</param>
        /// <returns>Task of List&lt;WorkFolder&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkFolder>> RedactionFoldersGetAsync (int? caseId, long? folderId, int? userId = null, bool? immediateOnly = null, bool? getDocumentCounts = null, string uniqueId = null, string filterQuery = null, string filterOperator = null, bool? isAdminView = null, bool? userIdRequested = null)
        {
             ApiResponse<List<WorkFolder>> localVarResponse = await RedactionFoldersGetAsyncWithHttpInfo(caseId, folderId, userId, immediateOnly, getDocumentCounts, uniqueId, filterQuery, filterOperator, isAdminView, userIdRequested);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get redaction folders 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="folderId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="immediateOnly"> (optional, default to true)</param>
        /// <param name="getDocumentCounts"> (optional, default to true)</param>
        /// <param name="uniqueId"> (optional)</param>
        /// <param name="filterQuery">Partial folder name match (optional)</param>
        /// <param name="filterOperator"> (optional)</param>
        /// <param name="isAdminView"> (optional, default to false)</param>
        /// <param name="userIdRequested"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;WorkFolder&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WorkFolder>>> RedactionFoldersGetAsyncWithHttpInfo (int? caseId, long? folderId, int? userId = null, bool? immediateOnly = null, bool? getDocumentCounts = null, string uniqueId = null, string filterQuery = null, string filterOperator = null, bool? isAdminView = null, bool? userIdRequested = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersredactionApi->RedactionFoldersGet");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FoldersredactionApi->RedactionFoldersGet");

            var localVarPath = "/api/v2/{caseId}/folders/redaction/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (immediateOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "immediateOnly", immediateOnly)); // query parameter
            if (getDocumentCounts != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "getDocumentCounts", getDocumentCounts)); // query parameter
            if (uniqueId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "uniqueId", uniqueId)); // query parameter
            if (filterQuery != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filterQuery", filterQuery)); // query parameter
            if (filterOperator != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filterOperator", filterOperator)); // query parameter
            if (isAdminView != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isAdminView", isAdminView)); // query parameter
            if (userIdRequested != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userIdRequested", userIdRequested)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WorkFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkFolder>)));
        }

        /// <summary>
        /// Get ACL permission data for a redaction folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>List&lt;FolderAccessControl&gt;</returns>
        public List<FolderAccessControl> RedactionFoldersGetFolderAccessControl (int? caseId, int? id)
        {
             ApiResponse<List<FolderAccessControl>> localVarResponse = RedactionFoldersGetFolderAccessControlWithHttpInfo(caseId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get ACL permission data for a redaction folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;FolderAccessControl&gt;</returns>
        public ApiResponse< List<FolderAccessControl> > RedactionFoldersGetFolderAccessControlWithHttpInfo (int? caseId, int? id)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersredactionApi->RedactionFoldersGetFolderAccessControl");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersredactionApi->RedactionFoldersGetFolderAccessControl");

            var localVarPath = "/api/v2/{caseId}/folders/redaction/{id}/accessControl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFoldersGetFolderAccessControl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderAccessControl>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderAccessControl>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderAccessControl>)));
        }

        /// <summary>
        /// Get ACL permission data for a redaction folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;FolderAccessControl&gt;</returns>
        public async System.Threading.Tasks.Task<List<FolderAccessControl>> RedactionFoldersGetFolderAccessControlAsync (int? caseId, int? id)
        {
             ApiResponse<List<FolderAccessControl>> localVarResponse = await RedactionFoldersGetFolderAccessControlAsyncWithHttpInfo(caseId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get ACL permission data for a redaction folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;FolderAccessControl&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FolderAccessControl>>> RedactionFoldersGetFolderAccessControlAsyncWithHttpInfo (int? caseId, int? id)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersredactionApi->RedactionFoldersGetFolderAccessControl");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersredactionApi->RedactionFoldersGetFolderAccessControl");

            var localVarPath = "/api/v2/{caseId}/folders/redaction/{id}/accessControl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFoldersGetFolderAccessControl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FolderAccessControl>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FolderAccessControl>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FolderAccessControl>)));
        }

        /// <summary>
        /// Locks or unlocks the contents in a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Folder we are updating</param>
        /// <param name="lockFolder">True to lock, false to unlock (optional)</param>
        /// <param name="body">What aspects of the folder to lock/unlock (optional)</param>
        /// <returns></returns>
        public void RedactionFoldersLockDownFolder (int? caseId, int? id, bool? lockFolder = null, LockWorkFolder body = null)
        {
             RedactionFoldersLockDownFolderWithHttpInfo(caseId, id, lockFolder, body);
        }

        /// <summary>
        /// Locks or unlocks the contents in a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Folder we are updating</param>
        /// <param name="lockFolder">True to lock, false to unlock (optional)</param>
        /// <param name="body">What aspects of the folder to lock/unlock (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFoldersLockDownFolderWithHttpInfo (int? caseId, int? id, bool? lockFolder = null, LockWorkFolder body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersredactionApi->RedactionFoldersLockDownFolder");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersredactionApi->RedactionFoldersLockDownFolder");

            var localVarPath = "/api/v2/{caseId}/folders/redaction/{id}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lockFolder != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lockFolder", lockFolder)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFoldersLockDownFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Locks or unlocks the contents in a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Folder we are updating</param>
        /// <param name="lockFolder">True to lock, false to unlock (optional)</param>
        /// <param name="body">What aspects of the folder to lock/unlock (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFoldersLockDownFolderAsync (int? caseId, int? id, bool? lockFolder = null, LockWorkFolder body = null)
        {
             await RedactionFoldersLockDownFolderAsyncWithHttpInfo(caseId, id, lockFolder, body);

        }

        /// <summary>
        /// Locks or unlocks the contents in a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Folder we are updating</param>
        /// <param name="lockFolder">True to lock, false to unlock (optional)</param>
        /// <param name="body">What aspects of the folder to lock/unlock (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFoldersLockDownFolderAsyncWithHttpInfo (int? caseId, int? id, bool? lockFolder = null, LockWorkFolder body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersredactionApi->RedactionFoldersLockDownFolder");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersredactionApi->RedactionFoldersLockDownFolder");

            var localVarPath = "/api/v2/{caseId}/folders/redaction/{id}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lockFolder != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lockFolder", lockFolder)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFoldersLockDownFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Id for folder whose name we are changing</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void RedactionFoldersModifyFolder (int? caseId, int? id, FolderUpdate body = null)
        {
             RedactionFoldersModifyFolderWithHttpInfo(caseId, id, body);
        }

        /// <summary>
        /// Updates a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Id for folder whose name we are changing</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFoldersModifyFolderWithHttpInfo (int? caseId, int? id, FolderUpdate body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersredactionApi->RedactionFoldersModifyFolder");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersredactionApi->RedactionFoldersModifyFolder");

            var localVarPath = "/api/v2/{caseId}/folders/redaction/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFoldersModifyFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Id for folder whose name we are changing</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFoldersModifyFolderAsync (int? caseId, int? id, FolderUpdate body = null)
        {
             await RedactionFoldersModifyFolderAsyncWithHttpInfo(caseId, id, body);

        }

        /// <summary>
        /// Updates a folder 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Id for folder whose name we are changing</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFoldersModifyFolderAsyncWithHttpInfo (int? caseId, int? id, FolderUpdate body = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersredactionApi->RedactionFoldersModifyFolder");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersredactionApi->RedactionFoldersModifyFolder");

            var localVarPath = "/api/v2/{caseId}/folders/redaction/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFoldersModifyFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Move a folder. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Id for folder whose name we are changing</param>
        /// <param name="parentId">Parent folder to move under. Must be a redaction folder. Specify 0 keeps same parent (optional, default to 0)</param>
        /// <param name="displayOrder">Order under parent. Starting value is 1. 0-order alphabetically (optional, default to 0)</param>
        /// <returns></returns>
        public void RedactionFoldersMoveFolder (int? caseId, int? id, long? parentId = null, int? displayOrder = null)
        {
             RedactionFoldersMoveFolderWithHttpInfo(caseId, id, parentId, displayOrder);
        }

        /// <summary>
        /// Move a folder. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Id for folder whose name we are changing</param>
        /// <param name="parentId">Parent folder to move under. Must be a redaction folder. Specify 0 keeps same parent (optional, default to 0)</param>
        /// <param name="displayOrder">Order under parent. Starting value is 1. 0-order alphabetically (optional, default to 0)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFoldersMoveFolderWithHttpInfo (int? caseId, int? id, long? parentId = null, int? displayOrder = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersredactionApi->RedactionFoldersMoveFolder");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersredactionApi->RedactionFoldersMoveFolder");

            var localVarPath = "/api/v2/{caseId}/folders/redaction/{id}/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (parentId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (displayOrder != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "displayOrder", displayOrder)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFoldersMoveFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Move a folder. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Id for folder whose name we are changing</param>
        /// <param name="parentId">Parent folder to move under. Must be a redaction folder. Specify 0 keeps same parent (optional, default to 0)</param>
        /// <param name="displayOrder">Order under parent. Starting value is 1. 0-order alphabetically (optional, default to 0)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFoldersMoveFolderAsync (int? caseId, int? id, long? parentId = null, int? displayOrder = null)
        {
             await RedactionFoldersMoveFolderAsyncWithHttpInfo(caseId, id, parentId, displayOrder);

        }

        /// <summary>
        /// Move a folder. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"></param>
        /// <param name="id">Id for folder whose name we are changing</param>
        /// <param name="parentId">Parent folder to move under. Must be a redaction folder. Specify 0 keeps same parent (optional, default to 0)</param>
        /// <param name="displayOrder">Order under parent. Starting value is 1. 0-order alphabetically (optional, default to 0)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFoldersMoveFolderAsyncWithHttpInfo (int? caseId, int? id, long? parentId = null, int? displayOrder = null)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling FoldersredactionApi->RedactionFoldersMoveFolder");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FoldersredactionApi->RedactionFoldersMoveFolder");

            var localVarPath = "/api/v2/{caseId}/folders/redaction/{id}/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (parentId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (displayOrder != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "displayOrder", displayOrder)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFoldersMoveFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
