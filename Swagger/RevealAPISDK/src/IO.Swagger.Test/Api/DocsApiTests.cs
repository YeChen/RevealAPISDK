/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DocsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DocsApiTests
    {
        private DocsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DocsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DocsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DocsApi
            //Assert.IsInstanceOfType(typeof(DocsApi), instance, "instance is a DocsApi");
        }

        
        /// <summary>
        /// Test DocumentV2GetDateHistogramResults
        /// </summary>
        [Test]
        public void DocumentV2GetDateHistogramResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //DateHistogramSearchCriteria body = null;
            //var response = instance.DocumentV2GetDateHistogramResults(caseId, body);
            //Assert.IsInstanceOf<List<DateHistogramSearchResult>> (response, "response is List<DateHistogramSearchResult>");
        }
        
        /// <summary>
        /// Test DocumentV2GetDocumentCountsForField
        /// </summary>
        [Test]
        public void DocumentV2GetDocumentCountsForFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //string fieldName = null;
            //int? returnCountsGreaterThan = null;
            //bool? sortByValue = null;
            //bool? sortAscending = null;
            //DocumentQuery body = null;
            //var response = instance.DocumentV2GetDocumentCountsForField(caseId, fieldName, returnCountsGreaterThan, sortByValue, sortAscending, body);
            //Assert.IsInstanceOf<DocumentFieldCountResponse> (response, "response is DocumentFieldCountResponse");
        }
        
        /// <summary>
        /// Test DocumentV2GetDocumentCountsForField2
        /// </summary>
        [Test]
        public void DocumentV2GetDocumentCountsForField2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //DocumentFieldCountQuery body = null;
            //var response = instance.DocumentV2GetDocumentCountsForField2(caseId, body);
            //Assert.IsInstanceOf<List<DocumentFieldCountResponse>> (response, "response is List<DocumentFieldCountResponse>");
        }
        
        /// <summary>
        /// Test DocumentV2QueryDocs
        /// </summary>
        [Test]
        public void DocumentV2QueryDocsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //DocumentQuery body = null;
            //var response = instance.DocumentV2QueryDocs(caseId, body);
            //Assert.IsInstanceOf<DocumentQueryResults2> (response, "response is DocumentQueryResults2");
        }
        
    }

}
