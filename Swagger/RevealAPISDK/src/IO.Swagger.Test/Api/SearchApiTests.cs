/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SearchApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SearchApiTests
    {
        private SearchApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SearchApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SearchApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SearchApi
            //Assert.IsInstanceOfType(typeof(SearchApi), instance, "instance is a SearchApi");
        }

        
        /// <summary>
        /// Test SearchGetSearchOperatorsForField
        /// </summary>
        [Test]
        public void SearchGetSearchOperatorsForFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? id = null;
            //var response = instance.SearchGetSearchOperatorsForField(caseId, id);
            //Assert.IsInstanceOf<List<SearchExpressionOperators>> (response, "response is List<SearchExpressionOperators>");
        }
        
        /// <summary>
        /// Test SearchSearch
        /// </summary>
        [Test]
        public void SearchSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //SearchCriteria body = null;
            //var response = instance.SearchSearch(caseId, body);
            //Assert.IsInstanceOf<SearchResults> (response, "response is SearchResults");
        }
        
        /// <summary>
        /// Test SearchValidate
        /// </summary>
        [Test]
        public void SearchValidateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //QueryRequest body = null;
            //var response = instance.SearchValidate(caseId, body);
            //Assert.IsInstanceOf<List<ValidationResult>> (response, "response is List<ValidationResult>");
        }
        
    }

}
