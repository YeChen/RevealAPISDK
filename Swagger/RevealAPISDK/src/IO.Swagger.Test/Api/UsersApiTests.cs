/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UsersApiTests
    {
        private UsersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UsersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UsersApi
            //Assert.IsInstanceOfType(typeof(UsersApi), instance, "instance is a UsersApi");
        }

        
        /// <summary>
        /// Test UsersV2Enable
        /// </summary>
        [Test]
        public void UsersV2EnableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //bool? enable = null;
            //instance.UsersV2Enable(id, enable);
            
        }
        
        /// <summary>
        /// Test UsersV2GetAll
        /// </summary>
        [Test]
        public void UsersV2GetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? count = null;
            //var response = instance.UsersV2GetAll(start, count);
            //Assert.IsInstanceOf<PaginatedListOfUser> (response, "response is PaginatedListOfUser");
        }
        
        /// <summary>
        /// Test UsersV2GetAllPermissions
        /// </summary>
        [Test]
        public void UsersV2GetAllPermissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //var response = instance.UsersV2GetAllPermissions(caseId);
            //Assert.IsInstanceOf<List<Permission>> (response, "response is List<Permission>");
        }
        
        /// <summary>
        /// Test UsersV2GetAllowedJobtypes
        /// </summary>
        [Test]
        public void UsersV2GetAllowedJobtypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //var response = instance.UsersV2GetAllowedJobtypes(caseId);
            //Assert.IsInstanceOf<List<JobType>> (response, "response is List<JobType>");
        }
        
        /// <summary>
        /// Test UsersV2GetGroups
        /// </summary>
        [Test]
        public void UsersV2GetGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? userId = null;
            //string filter = null;
            //var response = instance.UsersV2GetGroups(caseId, userId, filter);
            //Assert.IsInstanceOf<List<Group>> (response, "response is List<Group>");
        }
        
        /// <summary>
        /// Test UsersV2GetPermissions
        /// </summary>
        [Test]
        public void UsersV2GetPermissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? userId = null;
            //var response = instance.UsersV2GetPermissions(caseId, userId);
            //Assert.IsInstanceOf<List<Permission>> (response, "response is List<Permission>");
        }
        
        /// <summary>
        /// Test UsersV2GetPermissionsV2
        /// </summary>
        [Test]
        public void UsersV2GetPermissionsV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int?> body = null;
            //var response = instance.UsersV2GetPermissionsV2(body);
            //Assert.IsInstanceOf<List<ProjectPermissions>> (response, "response is List<ProjectPermissions>");
        }
        
        /// <summary>
        /// Test UsersV2GetTeams
        /// </summary>
        [Test]
        public void UsersV2GetTeamsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? userId = null;
            //string filter = null;
            //var response = instance.UsersV2GetTeams(caseId, userId, filter);
            //Assert.IsInstanceOf<List<Team>> (response, "response is List<Team>");
        }
        
        /// <summary>
        /// Test UsersV2GetUser
        /// </summary>
        [Test]
        public void UsersV2GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.UsersV2GetUser(id);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test UsersV2GetUserByProject
        /// </summary>
        [Test]
        public void UsersV2GetUserByProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? id = null;
            //var response = instance.UsersV2GetUserByProject(caseId, id);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test UsersV2GetUsersByProject
        /// </summary>
        [Test]
        public void UsersV2GetUsersByProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? start = null;
            //int? count = null;
            //string filter = null;
            //var response = instance.UsersV2GetUsersByProject(caseId, start, count, filter);
            //Assert.IsInstanceOf<PaginatedListOfUser> (response, "response is PaginatedListOfUser");
        }
        
        /// <summary>
        /// Test UsersV2GetUsersByProjectWithTeams
        /// </summary>
        [Test]
        public void UsersV2GetUsersByProjectWithTeamsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? start = null;
            //int? count = null;
            //List<UserWithTeamQuery> body = null;
            //var response = instance.UsersV2GetUsersByProjectWithTeams(caseId, start, count, body);
            //Assert.IsInstanceOf<PaginatedListOfUserWithTeams> (response, "response is PaginatedListOfUserWithTeams");
        }
        
        /// <summary>
        /// Test UsersV2Post
        /// </summary>
        [Test]
        public void UsersV2PostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //User body = null;
            //var response = instance.UsersV2Post(body);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test UsersV2Put
        /// </summary>
        [Test]
        public void UsersV2PutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //User body = null;
            //var response = instance.UsersV2Put(body);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
    }

}
