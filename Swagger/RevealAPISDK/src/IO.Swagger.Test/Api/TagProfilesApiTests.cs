/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TagProfilesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TagProfilesApiTests
    {
        private TagProfilesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TagProfilesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TagProfilesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TagProfilesApi
            //Assert.IsInstanceOfType(typeof(TagProfilesApi), instance, "instance is a TagProfilesApi");
        }

        
        /// <summary>
        /// Test TagProfileV2Delete
        /// </summary>
        [Test]
        public void TagProfileV2DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //string name = null;
            //instance.TagProfileV2Delete(caseId, name);
            
        }
        
        /// <summary>
        /// Test TagProfileV2GetSingleTagProfileById
        /// </summary>
        [Test]
        public void TagProfileV2GetSingleTagProfileByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? id = null;
            //var response = instance.TagProfileV2GetSingleTagProfileById(caseId, id);
            //Assert.IsInstanceOf<TagProfile> (response, "response is TagProfile");
        }
        
        /// <summary>
        /// Test TagProfileV2GetSingleTagProfileByName
        /// </summary>
        [Test]
        public void TagProfileV2GetSingleTagProfileByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //string name = null;
            //var response = instance.TagProfileV2GetSingleTagProfileByName(caseId, name);
            //Assert.IsInstanceOf<TagProfile> (response, "response is TagProfile");
        }
        
        /// <summary>
        /// Test TagProfileV2GetTagProfilesList
        /// </summary>
        [Test]
        public void TagProfileV2GetTagProfilesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? start = null;
            //int? count = null;
            //var response = instance.TagProfileV2GetTagProfilesList(caseId, start, count);
            //Assert.IsInstanceOf<PaginatedOfIEnumerableOfTagProfile> (response, "response is PaginatedOfIEnumerableOfTagProfile");
        }
        
        /// <summary>
        /// Test TagProfileV2GetTagProfilesList2
        /// </summary>
        [Test]
        public void TagProfileV2GetTagProfilesList2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? start = null;
            //int? count = null;
            //var response = instance.TagProfileV2GetTagProfilesList2(caseId, start, count);
            //Assert.IsInstanceOf<PaginatedOfIEnumerableOfTagProfile> (response, "response is PaginatedOfIEnumerableOfTagProfile");
        }
        
        /// <summary>
        /// Test TagProfileV2GetTagProfilesWithModel
        /// </summary>
        [Test]
        public void TagProfileV2GetTagProfilesWithModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? aiModelId = null;
            //int? userId = null;
            //var response = instance.TagProfileV2GetTagProfilesWithModel(caseId, aiModelId, userId);
            //Assert.IsInstanceOf<List<TagProfile>> (response, "response is List<TagProfile>");
        }
        
        /// <summary>
        /// Test TagProfileV2Post
        /// </summary>
        [Test]
        public void TagProfileV2PostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //TagProfileCreateEdit body = null;
            //var response = instance.TagProfileV2Post(caseId, body);
            //Assert.IsInstanceOf<TagProfile> (response, "response is TagProfile");
        }
        
        /// <summary>
        /// Test TagProfileV2ValidateTagProfileUserPermissionById
        /// </summary>
        [Test]
        public void TagProfileV2ValidateTagProfileUserPermissionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? id = null;
            //TagProfileUserPermissionValitation body = null;
            //var response = instance.TagProfileV2ValidateTagProfileUserPermissionById(caseId, id, body);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
    }

}
