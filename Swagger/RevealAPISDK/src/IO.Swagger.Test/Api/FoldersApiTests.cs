/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing FoldersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FoldersApiTests
    {
        private FoldersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FoldersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FoldersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FoldersApi
            //Assert.IsInstanceOfType(typeof(FoldersApi), instance, "instance is a FoldersApi");
        }

        
        /// <summary>
        /// Test FoldersDeleteFolderByType
        /// </summary>
        [Test]
        public void FoldersDeleteFolderByTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //string folderType = null;
            //long? folderId = null;
            //var response = instance.FoldersDeleteFolderByType(caseId, folderType, folderId);
            //Assert.IsInstanceOf<List<FolderItem>> (response, "response is List<FolderItem>");
        }
        
        /// <summary>
        /// Test FoldersGetFolderCounts
        /// </summary>
        [Test]
        public void FoldersGetFolderCountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //bool? allSubFolders = null;
            //FolderCountsQuery body = null;
            //var response = instance.FoldersGetFolderCounts(caseId, allSubFolders, body);
            //Assert.IsInstanceOf<FolderDocumentCountsResultsList> (response, "response is FolderDocumentCountsResultsList");
        }
        
        /// <summary>
        /// Test FoldersGetFolders
        /// </summary>
        [Test]
        public void FoldersGetFoldersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? userId = null;
            //var response = instance.FoldersGetFolders(caseId, userId);
            //Assert.IsInstanceOf<List<FolderItem>> (response, "response is List<FolderItem>");
        }
        
        /// <summary>
        /// Test FoldersGetFoldersByType
        /// </summary>
        [Test]
        public void FoldersGetFoldersByTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //string folderType = null;
            //long? folderId = null;
            //int? userId = null;
            //string uniqueId = null;
            //bool? isAdminView = null;
            //bool? userIdRequested = null;
            //var response = instance.FoldersGetFoldersByType(caseId, folderType, folderId, userId, uniqueId, isAdminView, userIdRequested);
            //Assert.IsInstanceOf<List<FolderItem>> (response, "response is List<FolderItem>");
        }
        
    }

}
