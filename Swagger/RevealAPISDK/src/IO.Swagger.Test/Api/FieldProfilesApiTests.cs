/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing FieldProfilesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FieldProfilesApiTests
    {
        private FieldProfilesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FieldProfilesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FieldProfilesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FieldProfilesApi
            //Assert.IsInstanceOfType(typeof(FieldProfilesApi), instance, "instance is a FieldProfilesApi");
        }

        
        /// <summary>
        /// Test FieldProfileV2AssociateWithFields
        /// </summary>
        [Test]
        public void FieldProfileV2AssociateWithFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? id = null;
            //List<FieldIdVisibleAssociation> body = null;
            //instance.FieldProfileV2AssociateWithFields(caseId, id, body);
            
        }
        
        /// <summary>
        /// Test FieldProfileV2Delete
        /// </summary>
        [Test]
        public void FieldProfileV2DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? id = null;
            //instance.FieldProfileV2Delete(caseId, id);
            
        }
        
        /// <summary>
        /// Test FieldProfileV2Get
        /// </summary>
        [Test]
        public void FieldProfileV2GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? userId = null;
            //int? start = null;
            //int? count = null;
            //var response = instance.FieldProfileV2Get(caseId, userId, start, count);
            //Assert.IsInstanceOf<PaginatedOfListOfFieldProfile> (response, "response is PaginatedOfListOfFieldProfile");
        }
        
        /// <summary>
        /// Test FieldProfileV2GetByName
        /// </summary>
        [Test]
        public void FieldProfileV2GetByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //string name = null;
            //int? userId = null;
            //int? start = null;
            //int? count = null;
            //var response = instance.FieldProfileV2GetByName(caseId, name, userId, start, count);
            //Assert.IsInstanceOf<PaginatedOfListOfFieldProfile> (response, "response is PaginatedOfListOfFieldProfile");
        }
        
        /// <summary>
        /// Test FieldProfileV2GetDefaultFields
        /// </summary>
        [Test]
        public void FieldProfileV2GetDefaultFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? id = null;
            //int? start = null;
            //int? count = null;
            //var response = instance.FieldProfileV2GetDefaultFields(caseId, id, start, count);
            //Assert.IsInstanceOf<PaginatedOfListOfProfileFieldInclusionItem> (response, "response is PaginatedOfListOfProfileFieldInclusionItem");
        }
        
        /// <summary>
        /// Test FieldProfileV2GetFields
        /// </summary>
        [Test]
        public void FieldProfileV2GetFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? id = null;
            //int? userId = null;
            //bool? combineDateTimeFields = null;
            //bool? includeSpecial = null;
            //int? start = null;
            //int? count = null;
            //var response = instance.FieldProfileV2GetFields(caseId, id, userId, combineDateTimeFields, includeSpecial, start, count);
            //Assert.IsInstanceOf<PaginatedOfListOfManagedField> (response, "response is PaginatedOfListOfManagedField");
        }
        
        /// <summary>
        /// Test FieldProfileV2Post
        /// </summary>
        [Test]
        public void FieldProfileV2PostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //FieldProfileCreate body = null;
            //var response = instance.FieldProfileV2Post(caseId, body);
            //Assert.IsInstanceOf<FieldProfileCreate> (response, "response is FieldProfileCreate");
        }
        
        /// <summary>
        /// Test FieldProfileV2Put
        /// </summary>
        [Test]
        public void FieldProfileV2PutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //FieldProfileUpdate body = null;
            //var response = instance.FieldProfileV2Put(caseId, body);
            //Assert.IsInstanceOf<FieldProfileUpdate> (response, "response is FieldProfileUpdate");
        }
        
        /// <summary>
        /// Test FieldProfileV2SetDefaultFieldsDisplayOrder
        /// </summary>
        [Test]
        public void FieldProfileV2SetDefaultFieldsDisplayOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? id = null;
            //bool? overwriteUserProfiles = null;
            //List<ManagedFieldDisplayOrdering> body = null;
            //instance.FieldProfileV2SetDefaultFieldsDisplayOrder(caseId, id, overwriteUserProfiles, body);
            
        }
        
        /// <summary>
        /// Test FieldProfileV2SetDefaultFieldsSortOrder
        /// </summary>
        [Test]
        public void FieldProfileV2SetDefaultFieldsSortOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? id = null;
            //bool? overwriteUserProfiles = null;
            //List<ManagedFieldSortOrdering> body = null;
            //instance.FieldProfileV2SetDefaultFieldsSortOrder(caseId, id, overwriteUserProfiles, body);
            
        }
        
        /// <summary>
        /// Test FieldProfileV2SetFieldsDisplayOrder
        /// </summary>
        [Test]
        public void FieldProfileV2SetFieldsDisplayOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? id = null;
            //int? userId = null;
            //List<ManagedFieldDisplayOrdering> body = null;
            //instance.FieldProfileV2SetFieldsDisplayOrder(caseId, id, userId, body);
            
        }
        
        /// <summary>
        /// Test FieldProfileV2SetFieldsSortOrder
        /// </summary>
        [Test]
        public void FieldProfileV2SetFieldsSortOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? id = null;
            //int? userId = null;
            //List<ManagedFieldSortOrdering> body = null;
            //instance.FieldProfileV2SetFieldsSortOrder(caseId, id, userId, body);
            
        }
        
        /// <summary>
        /// Test FieldProfileV2UnAssociateWithFields
        /// </summary>
        [Test]
        public void FieldProfileV2UnAssociateWithFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? id = null;
            //List<int?> body = null;
            //instance.FieldProfileV2UnAssociateWithFields(caseId, id, body);
            
        }
        
    }

}
