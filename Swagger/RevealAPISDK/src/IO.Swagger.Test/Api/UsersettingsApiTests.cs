/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing UsersettingsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UsersettingsApiTests
    {
        private UsersettingsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UsersettingsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UsersettingsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UsersettingsApi
            //Assert.IsInstanceOfType(typeof(UsersettingsApi), instance, "instance is a UsersettingsApi");
        }

        
        /// <summary>
        /// Test UserSettingsFormData
        /// </summary>
        [Test]
        public void UserSettingsFormDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? userId = null;
            //var response = instance.UserSettingsFormData(caseId, userId);
            //Assert.IsInstanceOf<UserSettingsForm> (response, "response is UserSettingsForm");
        }
        
        /// <summary>
        /// Test UserSettingsGetSetting
        /// </summary>
        [Test]
        public void UserSettingsGetSettingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? userId = null;
            //int? id = null;
            //var response = instance.UserSettingsGetSetting(caseId, userId, id);
            //Assert.IsInstanceOf<UserSetting> (response, "response is UserSetting");
        }
        
        /// <summary>
        /// Test UserSettingsGetSettings
        /// </summary>
        [Test]
        public void UserSettingsGetSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? userId = null;
            //List<UserSettings> userSettings = null;
            //int? start = null;
            //int? count = null;
            //var response = instance.UserSettingsGetSettings(caseId, userId, userSettings, start, count);
            //Assert.IsInstanceOf<PaginatedOfListOfUserSetting> (response, "response is PaginatedOfListOfUserSetting");
        }
        
        /// <summary>
        /// Test UserSettingsSaveSettings
        /// </summary>
        [Test]
        public void UserSettingsSaveSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? userId = null;
            //List<UserSetting> body = null;
            //instance.UserSettingsSaveSettings(caseId, userId, body);
            
        }
        
    }

}
