/* 
 * Reveal API v2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing FoldersassignmentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FoldersassignmentApiTests
    {
        private FoldersassignmentApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FoldersassignmentApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FoldersassignmentApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FoldersassignmentApi
            //Assert.IsInstanceOfType(typeof(FoldersassignmentApi), instance, "instance is a FoldersassignmentApi");
        }

        
        /// <summary>
        /// Test AssignmentFoldersV2Delete
        /// </summary>
        [Test]
        public void AssignmentFoldersV2DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //List<int?> body = null;
            //instance.AssignmentFoldersV2Delete(caseId, body);
            
        }
        
        /// <summary>
        /// Test AssignmentFoldersV2DeleteSingle
        /// </summary>
        [Test]
        public void AssignmentFoldersV2DeleteSingleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? id = null;
            //instance.AssignmentFoldersV2DeleteSingle(caseId, id);
            
        }
        
        /// <summary>
        /// Test AssignmentFoldersV2Get
        /// </summary>
        [Test]
        public void AssignmentFoldersV2GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //string filterOption = null;
            //int? start = null;
            //int? count = null;
            //AssignmentBatchQuery body = null;
            //var response = instance.AssignmentFoldersV2Get(caseId, filterOption, start, count, body);
            //Assert.IsInstanceOf<PaginatedOfIEnumerableOfAssignmentBatchFolder> (response, "response is PaginatedOfIEnumerableOfAssignmentBatchFolder");
        }
        
        /// <summary>
        /// Test AssignmentFoldersV2GetAssignmentFolders
        /// </summary>
        [Test]
        public void AssignmentFoldersV2GetAssignmentFoldersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? folderId = null;
            //int? userId = null;
            //bool? getWithDetails = null;
            //string uniqueId = null;
            //var response = instance.AssignmentFoldersV2GetAssignmentFolders(caseId, folderId, userId, getWithDetails, uniqueId);
            //Assert.IsInstanceOf<List<FolderItem>> (response, "response is List<FolderItem>");
        }
        
        /// <summary>
        /// Test AssignmentFoldersV2GetTopLevelAssignmentFolders
        /// </summary>
        [Test]
        public void AssignmentFoldersV2GetTopLevelAssignmentFoldersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //int? start = null;
            //int? count = null;
            //string filter = null;
            //var response = instance.AssignmentFoldersV2GetTopLevelAssignmentFolders(caseId, start, count, filter);
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test AssignmentFoldersV2UpadateUserAssignment
        /// </summary>
        [Test]
        public void AssignmentFoldersV2UpadateUserAssignmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? caseId = null;
            //AssignmentBatchFoldersAssignment body = null;
            //instance.AssignmentFoldersV2UpadateUserAssignment(caseId, body);
            
        }
        
    }

}
