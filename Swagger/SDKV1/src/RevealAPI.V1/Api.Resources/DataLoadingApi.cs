/* 
 * Reveal API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using RevealAPI.V1.Client;
using RevealAPI.V1.Models.Resources;

namespace RevealAPI.V1.Api.Resources
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataLoadingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel a loading job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loading job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns></returns>
        void DataLoadingDelete (int? id, int? caseId = null);

        /// <summary>
        /// Cancel a loading job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loading job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataLoadingDeleteWithHttpInfo (int? id, int? caseId = null);
        /// <summary>
        /// Gets a list of loading jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="start">Optional. Jobs to skip. Specify 0 to get first record (optional, default to 0)</param>
        /// <param name="count">Optional. Number of jobs to return (optional, default to 2147483647)</param>
        /// <returns>List&lt;DataLoaderJob&gt;</returns>
        List<DataLoaderJob> DataLoadingGet (int? caseId = null, int? start = null, int? count = null);

        /// <summary>
        /// Gets a list of loading jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="start">Optional. Jobs to skip. Specify 0 to get first record (optional, default to 0)</param>
        /// <param name="count">Optional. Number of jobs to return (optional, default to 2147483647)</param>
        /// <returns>ApiResponse of List&lt;DataLoaderJob&gt;</returns>
        ApiResponse<List<DataLoaderJob>> DataLoadingGetWithHttpInfo (int? caseId = null, int? start = null, int? count = null);
        /// <summary>
        /// Get loading document error file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loader job id. If 0, then error file for last loading job is returned</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>string</returns>
        string DataLoadingGetDocumentErrorFile (int? id, int? caseId = null);

        /// <summary>
        /// Get loading document error file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loader job id. If 0, then error file for last loading job is returned</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DataLoadingGetDocumentErrorFileWithHttpInfo (int? id, int? caseId = null);
        /// <summary>
        /// Get loading log file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="id">if not specified, then log for last job is retrieved (optional, default to 0)</param>
        /// <returns>string</returns>
        string DataLoadingGetLogFile (int? caseId = null, int? id = null);

        /// <summary>
        /// Get loading log file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="id">if not specified, then log for last job is retrieved (optional, default to 0)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DataLoadingGetLogFileWithHttpInfo (int? caseId = null, int? id = null);
        /// <summary>
        /// Gets the status of a single loading job with errors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loading job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>DataLoaderJob</returns>
        DataLoaderJob DataLoadingGet_0 (int? id, int? caseId = null);

        /// <summary>
        /// Gets the status of a single loading job with errors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loading job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>ApiResponse of DataLoaderJob</returns>
        ApiResponse<DataLoaderJob> DataLoadingGet_0WithHttpInfo (int? id, int? caseId = null);
        /// <summary>
        /// Load documents into case from import file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="loadfile">Load file name (fully qualified path) (optional)</param>
        /// <param name="fieldMappingId">Optional. Field mapping Id or 0 to use first mapping found in case (optional, default to 0)</param>
        /// <returns>DataLoaderJob</returns>
        DataLoaderJob DataLoadingLoadData (int? caseId = null, string loadfile = null, int? fieldMappingId = null);

        /// <summary>
        /// Load documents into case from import file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="loadfile">Load file name (fully qualified path) (optional)</param>
        /// <param name="fieldMappingId">Optional. Field mapping Id or 0 to use first mapping found in case (optional, default to 0)</param>
        /// <returns>ApiResponse of DataLoaderJob</returns>
        ApiResponse<DataLoaderJob> DataLoadingLoadDataWithHttpInfo (int? caseId = null, string loadfile = null, int? fieldMappingId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel a loading job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loading job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataLoadingDeleteAsync (int? id, int? caseId = null);

        /// <summary>
        /// Cancel a loading job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loading job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataLoadingDeleteAsyncWithHttpInfo (int? id, int? caseId = null);
        /// <summary>
        /// Gets a list of loading jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="start">Optional. Jobs to skip. Specify 0 to get first record (optional, default to 0)</param>
        /// <param name="count">Optional. Number of jobs to return (optional, default to 2147483647)</param>
        /// <returns>Task of List&lt;DataLoaderJob&gt;</returns>
        System.Threading.Tasks.Task<List<DataLoaderJob>> DataLoadingGetAsync (int? caseId = null, int? start = null, int? count = null);

        /// <summary>
        /// Gets a list of loading jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="start">Optional. Jobs to skip. Specify 0 to get first record (optional, default to 0)</param>
        /// <param name="count">Optional. Number of jobs to return (optional, default to 2147483647)</param>
        /// <returns>Task of ApiResponse (List&lt;DataLoaderJob&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DataLoaderJob>>> DataLoadingGetAsyncWithHttpInfo (int? caseId = null, int? start = null, int? count = null);
        /// <summary>
        /// Get loading document error file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loader job id. If 0, then error file for last loading job is returned</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DataLoadingGetDocumentErrorFileAsync (int? id, int? caseId = null);

        /// <summary>
        /// Get loading document error file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loader job id. If 0, then error file for last loading job is returned</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DataLoadingGetDocumentErrorFileAsyncWithHttpInfo (int? id, int? caseId = null);
        /// <summary>
        /// Get loading log file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="id">if not specified, then log for last job is retrieved (optional, default to 0)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DataLoadingGetLogFileAsync (int? caseId = null, int? id = null);

        /// <summary>
        /// Get loading log file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="id">if not specified, then log for last job is retrieved (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DataLoadingGetLogFileAsyncWithHttpInfo (int? caseId = null, int? id = null);
        /// <summary>
        /// Gets the status of a single loading job with errors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loading job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of DataLoaderJob</returns>
        System.Threading.Tasks.Task<DataLoaderJob> DataLoadingGet_0Async (int? id, int? caseId = null);

        /// <summary>
        /// Gets the status of a single loading job with errors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loading job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of ApiResponse (DataLoaderJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataLoaderJob>> DataLoadingGet_0AsyncWithHttpInfo (int? id, int? caseId = null);
        /// <summary>
        /// Load documents into case from import file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="loadfile">Load file name (fully qualified path) (optional)</param>
        /// <param name="fieldMappingId">Optional. Field mapping Id or 0 to use first mapping found in case (optional, default to 0)</param>
        /// <returns>Task of DataLoaderJob</returns>
        System.Threading.Tasks.Task<DataLoaderJob> DataLoadingLoadDataAsync (int? caseId = null, string loadfile = null, int? fieldMappingId = null);

        /// <summary>
        /// Load documents into case from import file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="loadfile">Load file name (fully qualified path) (optional)</param>
        /// <param name="fieldMappingId">Optional. Field mapping Id or 0 to use first mapping found in case (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (DataLoaderJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataLoaderJob>> DataLoadingLoadDataAsyncWithHttpInfo (int? caseId = null, string loadfile = null, int? fieldMappingId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataLoadingApi : IDataLoadingApi
    {
        private RevealAPI.V1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataLoadingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataLoadingApi(String basePath)
        {
            this.Configuration = new RevealAPI.V1.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RevealAPI.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataLoadingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataLoadingApi(RevealAPI.V1.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RevealAPI.V1.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RevealAPI.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RevealAPI.V1.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RevealAPI.V1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel a loading job 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loading job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns></returns>
        public void DataLoadingDelete (int? id, int? caseId = null)
        {
             DataLoadingDeleteWithHttpInfo(id, caseId);
        }

        /// <summary>
        /// Cancel a loading job 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loading job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataLoadingDeleteWithHttpInfo (int? id, int? caseId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataLoadingApi->DataLoadingDelete");

            var localVarPath = "/api/dataLoading/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLoadingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a loading job 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loading job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataLoadingDeleteAsync (int? id, int? caseId = null)
        {
             await DataLoadingDeleteAsyncWithHttpInfo(id, caseId);

        }

        /// <summary>
        /// Cancel a loading job 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loading job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataLoadingDeleteAsyncWithHttpInfo (int? id, int? caseId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataLoadingApi->DataLoadingDelete");

            var localVarPath = "/api/dataLoading/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLoadingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a list of loading jobs 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="start">Optional. Jobs to skip. Specify 0 to get first record (optional, default to 0)</param>
        /// <param name="count">Optional. Number of jobs to return (optional, default to 2147483647)</param>
        /// <returns>List&lt;DataLoaderJob&gt;</returns>
        public List<DataLoaderJob> DataLoadingGet (int? caseId = null, int? start = null, int? count = null)
        {
             ApiResponse<List<DataLoaderJob>> localVarResponse = DataLoadingGetWithHttpInfo(caseId, start, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of loading jobs 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="start">Optional. Jobs to skip. Specify 0 to get first record (optional, default to 0)</param>
        /// <param name="count">Optional. Number of jobs to return (optional, default to 2147483647)</param>
        /// <returns>ApiResponse of List&lt;DataLoaderJob&gt;</returns>
        public ApiResponse< List<DataLoaderJob> > DataLoadingGetWithHttpInfo (int? caseId = null, int? start = null, int? count = null)
        {

            var localVarPath = "/api/dataLoading";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLoadingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataLoaderJob>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataLoaderJob>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataLoaderJob>)));
        }

        /// <summary>
        /// Gets a list of loading jobs 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="start">Optional. Jobs to skip. Specify 0 to get first record (optional, default to 0)</param>
        /// <param name="count">Optional. Number of jobs to return (optional, default to 2147483647)</param>
        /// <returns>Task of List&lt;DataLoaderJob&gt;</returns>
        public async System.Threading.Tasks.Task<List<DataLoaderJob>> DataLoadingGetAsync (int? caseId = null, int? start = null, int? count = null)
        {
             ApiResponse<List<DataLoaderJob>> localVarResponse = await DataLoadingGetAsyncWithHttpInfo(caseId, start, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of loading jobs 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="start">Optional. Jobs to skip. Specify 0 to get first record (optional, default to 0)</param>
        /// <param name="count">Optional. Number of jobs to return (optional, default to 2147483647)</param>
        /// <returns>Task of ApiResponse (List&lt;DataLoaderJob&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DataLoaderJob>>> DataLoadingGetAsyncWithHttpInfo (int? caseId = null, int? start = null, int? count = null)
        {

            var localVarPath = "/api/dataLoading";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLoadingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataLoaderJob>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataLoaderJob>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataLoaderJob>)));
        }

        /// <summary>
        /// Get loading document error file 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loader job id. If 0, then error file for last loading job is returned</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>string</returns>
        public string DataLoadingGetDocumentErrorFile (int? id, int? caseId = null)
        {
             ApiResponse<string> localVarResponse = DataLoadingGetDocumentErrorFileWithHttpInfo(id, caseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get loading document error file 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loader job id. If 0, then error file for last loading job is returned</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DataLoadingGetDocumentErrorFileWithHttpInfo (int? id, int? caseId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataLoadingApi->DataLoadingGetDocumentErrorFile");

            var localVarPath = "/api/dataLoading/{id}/errorfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLoadingGetDocumentErrorFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get loading document error file 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loader job id. If 0, then error file for last loading job is returned</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DataLoadingGetDocumentErrorFileAsync (int? id, int? caseId = null)
        {
             ApiResponse<string> localVarResponse = await DataLoadingGetDocumentErrorFileAsyncWithHttpInfo(id, caseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get loading document error file 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loader job id. If 0, then error file for last loading job is returned</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DataLoadingGetDocumentErrorFileAsyncWithHttpInfo (int? id, int? caseId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataLoadingApi->DataLoadingGetDocumentErrorFile");

            var localVarPath = "/api/dataLoading/{id}/errorfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLoadingGetDocumentErrorFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get loading log file. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="id">if not specified, then log for last job is retrieved (optional, default to 0)</param>
        /// <returns>string</returns>
        public string DataLoadingGetLogFile (int? caseId = null, int? id = null)
        {
             ApiResponse<string> localVarResponse = DataLoadingGetLogFileWithHttpInfo(caseId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get loading log file. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="id">if not specified, then log for last job is retrieved (optional, default to 0)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DataLoadingGetLogFileWithHttpInfo (int? caseId = null, int? id = null)
        {

            var localVarPath = "/api/dataLoading/logfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLoadingGetLogFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get loading log file. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="id">if not specified, then log for last job is retrieved (optional, default to 0)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DataLoadingGetLogFileAsync (int? caseId = null, int? id = null)
        {
             ApiResponse<string> localVarResponse = await DataLoadingGetLogFileAsyncWithHttpInfo(caseId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get loading log file. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="id">if not specified, then log for last job is retrieved (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DataLoadingGetLogFileAsyncWithHttpInfo (int? caseId = null, int? id = null)
        {

            var localVarPath = "/api/dataLoading/logfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLoadingGetLogFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets the status of a single loading job with errors 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loading job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>DataLoaderJob</returns>
        public DataLoaderJob DataLoadingGet_0 (int? id, int? caseId = null)
        {
             ApiResponse<DataLoaderJob> localVarResponse = DataLoadingGet_0WithHttpInfo(id, caseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the status of a single loading job with errors 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loading job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>ApiResponse of DataLoaderJob</returns>
        public ApiResponse< DataLoaderJob > DataLoadingGet_0WithHttpInfo (int? id, int? caseId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataLoadingApi->DataLoadingGet_0");

            var localVarPath = "/api/dataLoading/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLoadingGet_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataLoaderJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataLoaderJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataLoaderJob)));
        }

        /// <summary>
        /// Gets the status of a single loading job with errors 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loading job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of DataLoaderJob</returns>
        public async System.Threading.Tasks.Task<DataLoaderJob> DataLoadingGet_0Async (int? id, int? caseId = null)
        {
             ApiResponse<DataLoaderJob> localVarResponse = await DataLoadingGet_0AsyncWithHttpInfo(id, caseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the status of a single loading job with errors 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Loading job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of ApiResponse (DataLoaderJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataLoaderJob>> DataLoadingGet_0AsyncWithHttpInfo (int? id, int? caseId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataLoadingApi->DataLoadingGet_0");

            var localVarPath = "/api/dataLoading/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLoadingGet_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataLoaderJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataLoaderJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataLoaderJob)));
        }

        /// <summary>
        /// Load documents into case from import file 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="loadfile">Load file name (fully qualified path) (optional)</param>
        /// <param name="fieldMappingId">Optional. Field mapping Id or 0 to use first mapping found in case (optional, default to 0)</param>
        /// <returns>DataLoaderJob</returns>
        public DataLoaderJob DataLoadingLoadData (int? caseId = null, string loadfile = null, int? fieldMappingId = null)
        {
             ApiResponse<DataLoaderJob> localVarResponse = DataLoadingLoadDataWithHttpInfo(caseId, loadfile, fieldMappingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Load documents into case from import file 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="loadfile">Load file name (fully qualified path) (optional)</param>
        /// <param name="fieldMappingId">Optional. Field mapping Id or 0 to use first mapping found in case (optional, default to 0)</param>
        /// <returns>ApiResponse of DataLoaderJob</returns>
        public ApiResponse< DataLoaderJob > DataLoadingLoadDataWithHttpInfo (int? caseId = null, string loadfile = null, int? fieldMappingId = null)
        {

            var localVarPath = "/api/dataLoading";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (loadfile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loadfile", loadfile)); // query parameter
            if (fieldMappingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fieldMappingId", fieldMappingId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLoadingLoadData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataLoaderJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataLoaderJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataLoaderJob)));
        }

        /// <summary>
        /// Load documents into case from import file 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="loadfile">Load file name (fully qualified path) (optional)</param>
        /// <param name="fieldMappingId">Optional. Field mapping Id or 0 to use first mapping found in case (optional, default to 0)</param>
        /// <returns>Task of DataLoaderJob</returns>
        public async System.Threading.Tasks.Task<DataLoaderJob> DataLoadingLoadDataAsync (int? caseId = null, string loadfile = null, int? fieldMappingId = null)
        {
             ApiResponse<DataLoaderJob> localVarResponse = await DataLoadingLoadDataAsyncWithHttpInfo(caseId, loadfile, fieldMappingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Load documents into case from import file 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="loadfile">Load file name (fully qualified path) (optional)</param>
        /// <param name="fieldMappingId">Optional. Field mapping Id or 0 to use first mapping found in case (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (DataLoaderJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataLoaderJob>> DataLoadingLoadDataAsyncWithHttpInfo (int? caseId = null, string loadfile = null, int? fieldMappingId = null)
        {

            var localVarPath = "/api/dataLoading";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (loadfile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loadfile", loadfile)); // query parameter
            if (fieldMappingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fieldMappingId", fieldMappingId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLoadingLoadData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataLoaderJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataLoaderJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataLoaderJob)));
        }

    }
}
