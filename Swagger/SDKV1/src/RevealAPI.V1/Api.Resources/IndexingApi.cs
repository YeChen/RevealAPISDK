/* 
 * Reveal API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using RevealAPI.V1.Client;
using RevealAPI.V1.Models.Resources;

namespace RevealAPI.V1.Api.Resources
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIndexingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Bulk adds documents to an index job. This is always additive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void IndexingAddIndexJobDocuments (int? id, int? caseId = null, IndexJobDocuments body = null);

        /// <summary>
        /// Bulk adds documents to an index job. This is always additive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IndexingAddIndexJobDocumentsWithHttpInfo (int? id, int? caseId = null, IndexJobDocuments body = null);
        /// <summary>
        /// Cancel an index job. This does not delete the job from the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns></returns>
        void IndexingCancelIndexJob (int? id, int? caseId = null);

        /// <summary>
        /// Cancel an index job. This does not delete the job from the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IndexingCancelIndexJobWithHttpInfo (int? id, int? caseId = null);
        /// <summary>
        /// Create a new index job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>IndexJob</returns>
        IndexJob IndexingCreateIndexJob (int? caseId = null, IndexJobCreate body = null);

        /// <summary>
        /// Create a new index job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of IndexJob</returns>
        ApiResponse<IndexJob> IndexingCreateIndexJobWithHttpInfo (int? caseId = null, IndexJobCreate body = null);
        /// <summary>
        /// Get document ids for an indexing job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Indexing job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="keyField">ITEMID or BEGDOC (optional)</param>
        /// <param name="startRow">Starting row offset. Use 0 for first request (optional)</param>
        /// <param name="batchSize">Chunksize of records to return (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> IndexingGetIndexJobDocumentIds (int? id, int? caseId = null, string keyField = null, int? startRow = null, int? batchSize = null);

        /// <summary>
        /// Get document ids for an indexing job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Indexing job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="keyField">ITEMID or BEGDOC (optional)</param>
        /// <param name="startRow">Starting row offset. Use 0 for first request (optional)</param>
        /// <param name="batchSize">Chunksize of records to return (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> IndexingGetIndexJobDocumentIdsWithHttpInfo (int? id, int? caseId = null, string keyField = null, int? startRow = null, int? batchSize = null);
        /// <summary>
        /// Get a list of indexes in a case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>List&lt;IndexInfo&gt;</returns>
        List<IndexInfo> IndexingGetIndexes (int? caseId = null);

        /// <summary>
        /// Get a list of indexes in a case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>ApiResponse of List&lt;IndexInfo&gt;</returns>
        ApiResponse<List<IndexInfo>> IndexingGetIndexesWithHttpInfo (int? caseId = null);
        /// <summary>
        /// Get indexing errors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Indexing job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>List&lt;IndexingError&gt;</returns>
        List<IndexingError> IndexingGetIndexingErrors (int? id, int? caseId = null);

        /// <summary>
        /// Get indexing errors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Indexing job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>ApiResponse of List&lt;IndexingError&gt;</returns>
        ApiResponse<List<IndexingError>> IndexingGetIndexingErrorsWithHttpInfo (int? id, int? caseId = null);
        /// <summary>
        /// Get a list of indexing jobs in a case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="status">-1-Any, 0-Created, 1-Submitted, 2-In Process, 3-Complete, 4-Error, 5-Cancelled, 6-Cancel Pending, 7-Deleted, 8-Modified (optional)</param>
        /// <returns>List&lt;IndexJob&gt;</returns>
        List<IndexJob> IndexingGetIndexingJobs (int? caseId = null, int? status = null);

        /// <summary>
        /// Get a list of indexing jobs in a case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="status">-1-Any, 0-Created, 1-Submitted, 2-In Process, 3-Complete, 4-Error, 5-Cancelled, 6-Cancel Pending, 7-Deleted, 8-Modified (optional)</param>
        /// <returns>ApiResponse of List&lt;IndexJob&gt;</returns>
        ApiResponse<List<IndexJob>> IndexingGetIndexingJobsWithHttpInfo (int? caseId = null, int? status = null);
        /// <summary>
        /// Get a single Index Job in a case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>IndexJob</returns>
        IndexJob IndexingGetSingleIndexJob (int? id, int? caseId = null);

        /// <summary>
        /// Get a single Index Job in a case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>ApiResponse of IndexJob</returns>
        ApiResponse<IndexJob> IndexingGetSingleIndexJobWithHttpInfo (int? id, int? caseId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Bulk adds documents to an index job. This is always additive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IndexingAddIndexJobDocumentsAsync (int? id, int? caseId = null, IndexJobDocuments body = null);

        /// <summary>
        /// Bulk adds documents to an index job. This is always additive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IndexingAddIndexJobDocumentsAsyncWithHttpInfo (int? id, int? caseId = null, IndexJobDocuments body = null);
        /// <summary>
        /// Cancel an index job. This does not delete the job from the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IndexingCancelIndexJobAsync (int? id, int? caseId = null);

        /// <summary>
        /// Cancel an index job. This does not delete the job from the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IndexingCancelIndexJobAsyncWithHttpInfo (int? id, int? caseId = null);
        /// <summary>
        /// Create a new index job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of IndexJob</returns>
        System.Threading.Tasks.Task<IndexJob> IndexingCreateIndexJobAsync (int? caseId = null, IndexJobCreate body = null);

        /// <summary>
        /// Create a new index job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (IndexJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<IndexJob>> IndexingCreateIndexJobAsyncWithHttpInfo (int? caseId = null, IndexJobCreate body = null);
        /// <summary>
        /// Get document ids for an indexing job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Indexing job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="keyField">ITEMID or BEGDOC (optional)</param>
        /// <param name="startRow">Starting row offset. Use 0 for first request (optional)</param>
        /// <param name="batchSize">Chunksize of records to return (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> IndexingGetIndexJobDocumentIdsAsync (int? id, int? caseId = null, string keyField = null, int? startRow = null, int? batchSize = null);

        /// <summary>
        /// Get document ids for an indexing job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Indexing job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="keyField">ITEMID or BEGDOC (optional)</param>
        /// <param name="startRow">Starting row offset. Use 0 for first request (optional)</param>
        /// <param name="batchSize">Chunksize of records to return (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> IndexingGetIndexJobDocumentIdsAsyncWithHttpInfo (int? id, int? caseId = null, string keyField = null, int? startRow = null, int? batchSize = null);
        /// <summary>
        /// Get a list of indexes in a case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of List&lt;IndexInfo&gt;</returns>
        System.Threading.Tasks.Task<List<IndexInfo>> IndexingGetIndexesAsync (int? caseId = null);

        /// <summary>
        /// Get a list of indexes in a case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IndexInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IndexInfo>>> IndexingGetIndexesAsyncWithHttpInfo (int? caseId = null);
        /// <summary>
        /// Get indexing errors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Indexing job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of List&lt;IndexingError&gt;</returns>
        System.Threading.Tasks.Task<List<IndexingError>> IndexingGetIndexingErrorsAsync (int? id, int? caseId = null);

        /// <summary>
        /// Get indexing errors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Indexing job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IndexingError&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IndexingError>>> IndexingGetIndexingErrorsAsyncWithHttpInfo (int? id, int? caseId = null);
        /// <summary>
        /// Get a list of indexing jobs in a case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="status">-1-Any, 0-Created, 1-Submitted, 2-In Process, 3-Complete, 4-Error, 5-Cancelled, 6-Cancel Pending, 7-Deleted, 8-Modified (optional)</param>
        /// <returns>Task of List&lt;IndexJob&gt;</returns>
        System.Threading.Tasks.Task<List<IndexJob>> IndexingGetIndexingJobsAsync (int? caseId = null, int? status = null);

        /// <summary>
        /// Get a list of indexing jobs in a case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="status">-1-Any, 0-Created, 1-Submitted, 2-In Process, 3-Complete, 4-Error, 5-Cancelled, 6-Cancel Pending, 7-Deleted, 8-Modified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IndexJob&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IndexJob>>> IndexingGetIndexingJobsAsyncWithHttpInfo (int? caseId = null, int? status = null);
        /// <summary>
        /// Get a single Index Job in a case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of IndexJob</returns>
        System.Threading.Tasks.Task<IndexJob> IndexingGetSingleIndexJobAsync (int? id, int? caseId = null);

        /// <summary>
        /// Get a single Index Job in a case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of ApiResponse (IndexJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<IndexJob>> IndexingGetSingleIndexJobAsyncWithHttpInfo (int? id, int? caseId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IndexingApi : IIndexingApi
    {
        private RevealAPI.V1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IndexingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IndexingApi(String basePath)
        {
            this.Configuration = new RevealAPI.V1.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RevealAPI.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IndexingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IndexingApi(RevealAPI.V1.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RevealAPI.V1.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RevealAPI.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RevealAPI.V1.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RevealAPI.V1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Bulk adds documents to an index job. This is always additive. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void IndexingAddIndexJobDocuments (int? id, int? caseId = null, IndexJobDocuments body = null)
        {
             IndexingAddIndexJobDocumentsWithHttpInfo(id, caseId, body);
        }

        /// <summary>
        /// Bulk adds documents to an index job. This is always additive. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IndexingAddIndexJobDocumentsWithHttpInfo (int? id, int? caseId = null, IndexJobDocuments body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IndexingApi->IndexingAddIndexJobDocuments");

            var localVarPath = "/api/Indexing/{id}/Documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IndexingAddIndexJobDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Bulk adds documents to an index job. This is always additive. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IndexingAddIndexJobDocumentsAsync (int? id, int? caseId = null, IndexJobDocuments body = null)
        {
             await IndexingAddIndexJobDocumentsAsyncWithHttpInfo(id, caseId, body);

        }

        /// <summary>
        /// Bulk adds documents to an index job. This is always additive. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IndexingAddIndexJobDocumentsAsyncWithHttpInfo (int? id, int? caseId = null, IndexJobDocuments body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IndexingApi->IndexingAddIndexJobDocuments");

            var localVarPath = "/api/Indexing/{id}/Documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IndexingAddIndexJobDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel an index job. This does not delete the job from the database. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns></returns>
        public void IndexingCancelIndexJob (int? id, int? caseId = null)
        {
             IndexingCancelIndexJobWithHttpInfo(id, caseId);
        }

        /// <summary>
        /// Cancel an index job. This does not delete the job from the database. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IndexingCancelIndexJobWithHttpInfo (int? id, int? caseId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IndexingApi->IndexingCancelIndexJob");

            var localVarPath = "/api/Indexing/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IndexingCancelIndexJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel an index job. This does not delete the job from the database. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IndexingCancelIndexJobAsync (int? id, int? caseId = null)
        {
             await IndexingCancelIndexJobAsyncWithHttpInfo(id, caseId);

        }

        /// <summary>
        /// Cancel an index job. This does not delete the job from the database. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IndexingCancelIndexJobAsyncWithHttpInfo (int? id, int? caseId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IndexingApi->IndexingCancelIndexJob");

            var localVarPath = "/api/Indexing/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IndexingCancelIndexJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new index job 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>IndexJob</returns>
        public IndexJob IndexingCreateIndexJob (int? caseId = null, IndexJobCreate body = null)
        {
             ApiResponse<IndexJob> localVarResponse = IndexingCreateIndexJobWithHttpInfo(caseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new index job 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of IndexJob</returns>
        public ApiResponse< IndexJob > IndexingCreateIndexJobWithHttpInfo (int? caseId = null, IndexJobCreate body = null)
        {

            var localVarPath = "/api/Indexing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IndexingCreateIndexJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IndexJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IndexJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IndexJob)));
        }

        /// <summary>
        /// Create a new index job 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of IndexJob</returns>
        public async System.Threading.Tasks.Task<IndexJob> IndexingCreateIndexJobAsync (int? caseId = null, IndexJobCreate body = null)
        {
             ApiResponse<IndexJob> localVarResponse = await IndexingCreateIndexJobAsyncWithHttpInfo(caseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new index job 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (IndexJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IndexJob>> IndexingCreateIndexJobAsyncWithHttpInfo (int? caseId = null, IndexJobCreate body = null)
        {

            var localVarPath = "/api/Indexing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IndexingCreateIndexJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IndexJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IndexJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IndexJob)));
        }

        /// <summary>
        /// Get document ids for an indexing job 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Indexing job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="keyField">ITEMID or BEGDOC (optional)</param>
        /// <param name="startRow">Starting row offset. Use 0 for first request (optional)</param>
        /// <param name="batchSize">Chunksize of records to return (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> IndexingGetIndexJobDocumentIds (int? id, int? caseId = null, string keyField = null, int? startRow = null, int? batchSize = null)
        {
             ApiResponse<List<string>> localVarResponse = IndexingGetIndexJobDocumentIdsWithHttpInfo(id, caseId, keyField, startRow, batchSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get document ids for an indexing job 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Indexing job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="keyField">ITEMID or BEGDOC (optional)</param>
        /// <param name="startRow">Starting row offset. Use 0 for first request (optional)</param>
        /// <param name="batchSize">Chunksize of records to return (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > IndexingGetIndexJobDocumentIdsWithHttpInfo (int? id, int? caseId = null, string keyField = null, int? startRow = null, int? batchSize = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IndexingApi->IndexingGetIndexJobDocumentIds");

            var localVarPath = "/api/Indexing/DocumentIds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (startRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startRow", startRow)); // query parameter
            if (batchSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchSize", batchSize)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IndexingGetIndexJobDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Get document ids for an indexing job 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Indexing job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="keyField">ITEMID or BEGDOC (optional)</param>
        /// <param name="startRow">Starting row offset. Use 0 for first request (optional)</param>
        /// <param name="batchSize">Chunksize of records to return (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> IndexingGetIndexJobDocumentIdsAsync (int? id, int? caseId = null, string keyField = null, int? startRow = null, int? batchSize = null)
        {
             ApiResponse<List<string>> localVarResponse = await IndexingGetIndexJobDocumentIdsAsyncWithHttpInfo(id, caseId, keyField, startRow, batchSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get document ids for an indexing job 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Indexing job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="keyField">ITEMID or BEGDOC (optional)</param>
        /// <param name="startRow">Starting row offset. Use 0 for first request (optional)</param>
        /// <param name="batchSize">Chunksize of records to return (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> IndexingGetIndexJobDocumentIdsAsyncWithHttpInfo (int? id, int? caseId = null, string keyField = null, int? startRow = null, int? batchSize = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IndexingApi->IndexingGetIndexJobDocumentIds");

            var localVarPath = "/api/Indexing/DocumentIds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (startRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startRow", startRow)); // query parameter
            if (batchSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchSize", batchSize)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IndexingGetIndexJobDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Get a list of indexes in a case 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>List&lt;IndexInfo&gt;</returns>
        public List<IndexInfo> IndexingGetIndexes (int? caseId = null)
        {
             ApiResponse<List<IndexInfo>> localVarResponse = IndexingGetIndexesWithHttpInfo(caseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of indexes in a case 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>ApiResponse of List&lt;IndexInfo&gt;</returns>
        public ApiResponse< List<IndexInfo> > IndexingGetIndexesWithHttpInfo (int? caseId = null)
        {

            var localVarPath = "/api/Indexing/Indexes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IndexingGetIndexes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IndexInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IndexInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IndexInfo>)));
        }

        /// <summary>
        /// Get a list of indexes in a case 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of List&lt;IndexInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<IndexInfo>> IndexingGetIndexesAsync (int? caseId = null)
        {
             ApiResponse<List<IndexInfo>> localVarResponse = await IndexingGetIndexesAsyncWithHttpInfo(caseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of indexes in a case 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IndexInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IndexInfo>>> IndexingGetIndexesAsyncWithHttpInfo (int? caseId = null)
        {

            var localVarPath = "/api/Indexing/Indexes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IndexingGetIndexes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IndexInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IndexInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IndexInfo>)));
        }

        /// <summary>
        /// Get indexing errors 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Indexing job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>List&lt;IndexingError&gt;</returns>
        public List<IndexingError> IndexingGetIndexingErrors (int? id, int? caseId = null)
        {
             ApiResponse<List<IndexingError>> localVarResponse = IndexingGetIndexingErrorsWithHttpInfo(id, caseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get indexing errors 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Indexing job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>ApiResponse of List&lt;IndexingError&gt;</returns>
        public ApiResponse< List<IndexingError> > IndexingGetIndexingErrorsWithHttpInfo (int? id, int? caseId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IndexingApi->IndexingGetIndexingErrors");

            var localVarPath = "/api/Indexing/Errors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IndexingGetIndexingErrors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IndexingError>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IndexingError>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IndexingError>)));
        }

        /// <summary>
        /// Get indexing errors 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Indexing job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of List&lt;IndexingError&gt;</returns>
        public async System.Threading.Tasks.Task<List<IndexingError>> IndexingGetIndexingErrorsAsync (int? id, int? caseId = null)
        {
             ApiResponse<List<IndexingError>> localVarResponse = await IndexingGetIndexingErrorsAsyncWithHttpInfo(id, caseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get indexing errors 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Indexing job Id</param>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IndexingError&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IndexingError>>> IndexingGetIndexingErrorsAsyncWithHttpInfo (int? id, int? caseId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IndexingApi->IndexingGetIndexingErrors");

            var localVarPath = "/api/Indexing/Errors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IndexingGetIndexingErrors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IndexingError>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IndexingError>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IndexingError>)));
        }

        /// <summary>
        /// Get a list of indexing jobs in a case 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="status">-1-Any, 0-Created, 1-Submitted, 2-In Process, 3-Complete, 4-Error, 5-Cancelled, 6-Cancel Pending, 7-Deleted, 8-Modified (optional)</param>
        /// <returns>List&lt;IndexJob&gt;</returns>
        public List<IndexJob> IndexingGetIndexingJobs (int? caseId = null, int? status = null)
        {
             ApiResponse<List<IndexJob>> localVarResponse = IndexingGetIndexingJobsWithHttpInfo(caseId, status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of indexing jobs in a case 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="status">-1-Any, 0-Created, 1-Submitted, 2-In Process, 3-Complete, 4-Error, 5-Cancelled, 6-Cancel Pending, 7-Deleted, 8-Modified (optional)</param>
        /// <returns>ApiResponse of List&lt;IndexJob&gt;</returns>
        public ApiResponse< List<IndexJob> > IndexingGetIndexingJobsWithHttpInfo (int? caseId = null, int? status = null)
        {

            var localVarPath = "/api/Indexing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IndexingGetIndexingJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IndexJob>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IndexJob>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IndexJob>)));
        }

        /// <summary>
        /// Get a list of indexing jobs in a case 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="status">-1-Any, 0-Created, 1-Submitted, 2-In Process, 3-Complete, 4-Error, 5-Cancelled, 6-Cancel Pending, 7-Deleted, 8-Modified (optional)</param>
        /// <returns>Task of List&lt;IndexJob&gt;</returns>
        public async System.Threading.Tasks.Task<List<IndexJob>> IndexingGetIndexingJobsAsync (int? caseId = null, int? status = null)
        {
             ApiResponse<List<IndexJob>> localVarResponse = await IndexingGetIndexingJobsAsyncWithHttpInfo(caseId, status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of indexing jobs in a case 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal case Id (optional)</param>
        /// <param name="status">-1-Any, 0-Created, 1-Submitted, 2-In Process, 3-Complete, 4-Error, 5-Cancelled, 6-Cancel Pending, 7-Deleted, 8-Modified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IndexJob&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IndexJob>>> IndexingGetIndexingJobsAsyncWithHttpInfo (int? caseId = null, int? status = null)
        {

            var localVarPath = "/api/Indexing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IndexingGetIndexingJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IndexJob>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IndexJob>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IndexJob>)));
        }

        /// <summary>
        /// Get a single Index Job in a case 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>IndexJob</returns>
        public IndexJob IndexingGetSingleIndexJob (int? id, int? caseId = null)
        {
             ApiResponse<IndexJob> localVarResponse = IndexingGetSingleIndexJobWithHttpInfo(id, caseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single Index Job in a case 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>ApiResponse of IndexJob</returns>
        public ApiResponse< IndexJob > IndexingGetSingleIndexJobWithHttpInfo (int? id, int? caseId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IndexingApi->IndexingGetSingleIndexJob");

            var localVarPath = "/api/Indexing/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IndexingGetSingleIndexJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IndexJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IndexJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IndexJob)));
        }

        /// <summary>
        /// Get a single Index Job in a case 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of IndexJob</returns>
        public async System.Threading.Tasks.Task<IndexJob> IndexingGetSingleIndexJobAsync (int? id, int? caseId = null)
        {
             ApiResponse<IndexJob> localVarResponse = await IndexingGetSingleIndexJobAsyncWithHttpInfo(id, caseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single Index Job in a case 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of ApiResponse (IndexJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IndexJob>> IndexingGetSingleIndexJobAsyncWithHttpInfo (int? id, int? caseId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IndexingApi->IndexingGetSingleIndexJob");

            var localVarPath = "/api/Indexing/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IndexingGetSingleIndexJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IndexJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IndexJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IndexJob)));
        }

    }
}
