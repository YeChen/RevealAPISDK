/* 
 * Reveal API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using RevealAPI.V1.Client;
using RevealAPI.V1.Models.Resources;

namespace RevealAPI.V1.Api.Resources
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRedactionFolderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds document to given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns></returns>
        void RedactionFolderAddDocumentIds (int? caseId = null, long? userId = null, string keyField = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null, List<string> body = null);

        /// <summary>
        /// Adds document to given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFolderAddDocumentIdsWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null, List<string> body = null);
        /// <summary>
        /// Adds document to given folder id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns></returns>
        void RedactionFolderAddDocumentIds_0 (int? caseId = null, long? userId = null, string keyField = null, int? folderId = null, bool? ignoreReadOnly = null, List<string> body = null);

        /// <summary>
        /// Adds document to given folder id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFolderAddDocumentIds_0WithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? folderId = null, bool? ignoreReadOnly = null, List<string> body = null);
        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <returns></returns>
        void RedactionFolderClearDocumentIds (int? caseId = null, long? userId = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null);

        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFolderClearDocumentIdsWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null);
        /// <summary>
        /// Clears all documents from given folder id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="folderId">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <returns></returns>
        void RedactionFolderClearDocumentIds_0 (int? caseId = null, long? userId = null, int? folderId = null, bool? ignoreReadOnly = null);

        /// <summary>
        /// Clears all documents from given folder id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="folderId">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFolderClearDocumentIds_0WithHttpInfo (int? caseId = null, long? userId = null, int? folderId = null, bool? ignoreReadOnly = null);
        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="body">Folder Structure to Create (optional)</param>
        /// <returns></returns>
        void RedactionFolderCreate (int? caseId = null, long? userId = null, int? parentId = null, RedactionFolderCreate body = null);

        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="body">Folder Structure to Create (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFolderCreateWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null, RedactionFolderCreate body = null);
        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Folder Name to Delete (optional)</param>
        /// <returns></returns>
        void RedactionFolderDelete (int? caseId = null, long? userId = null, int? parentId = null, string name = null);

        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Folder Name to Delete (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFolderDeleteWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null, string name = null);
        /// <summary>
        /// Deletes document from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns></returns>
        void RedactionFolderDeleteDocumentIds (int? caseId = null, long? userId = null, string keyField = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null, List<string> body = null);

        /// <summary>
        /// Deletes document from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFolderDeleteDocumentIdsWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null, List<string> body = null);
        /// <summary>
        /// Deletes document from given folder id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns></returns>
        void RedactionFolderDeleteDocumentIds_0 (int? caseId = null, long? userId = null, string keyField = null, int? folderId = null, bool? ignoreReadOnly = null, List<string> body = null);

        /// <summary>
        /// Deletes document from given folder id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFolderDeleteDocumentIds_0WithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? folderId = null, bool? ignoreReadOnly = null, List<string> body = null);
        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="id">Folder ID to Delete (optional)</param>
        /// <returns></returns>
        void RedactionFolderDelete_0 (int? caseId = null, long? userId = null, int? id = null);

        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="id">Folder ID to Delete (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFolderDelete_0WithHttpInfo (int? caseId = null, long? userId = null, int? id = null);
        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="id">Folder Id to Edit (optional)</param>
        /// <param name="updateACL">Access Control Update (optional)</param>
        /// <param name="body">Folder Structure to Create (optional)</param>
        /// <returns></returns>
        void RedactionFolderEdit (int? caseId = null, long? userId = null, int? id = null, bool? updateACL = null, RedactionFolderCreate body = null);

        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="id">Folder Id to Edit (optional)</param>
        /// <param name="updateACL">Access Control Update (optional)</param>
        /// <param name="body">Folder Structure to Create (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFolderEditWithHttpInfo (int? caseId = null, long? userId = null, int? id = null, bool? updateACL = null, RedactionFolderCreate body = null);
        /// <summary>
        /// Gets documents ids from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="startRow">Starting Row Number (optional)</param>
        /// <param name="batchSize">Batch Size (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <returns></returns>
        void RedactionFolderGetDocumentIds (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, int? parentId = null, string name = null);

        /// <summary>
        /// Gets documents ids from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="startRow">Starting Row Number (optional)</param>
        /// <param name="batchSize">Batch Size (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFolderGetDocumentIdsWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, int? parentId = null, string name = null);
        /// <summary>
        /// Gets documents ids from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="startRow">Starting Row Number (optional)</param>
        /// <param name="batchSize">Batch Size (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <returns></returns>
        void RedactionFolderGetDocumentIds_0 (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, int? folderId = null);

        /// <summary>
        /// Gets documents ids from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="startRow">Starting Row Number (optional)</param>
        /// <param name="batchSize">Batch Size (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFolderGetDocumentIds_0WithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, int? folderId = null);
        /// <summary>
        /// Gets the Root Folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <returns></returns>
        void RedactionFolderGetRootFolder (int? caseId = null, long? userId = null);

        /// <summary>
        /// Gets the Root Folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFolderGetRootFolderWithHttpInfo (int? caseId = null, long? userId = null);
        /// <summary>
        /// Search folder info by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Folder Name to Search (optional)</param>
        /// <returns></returns>
        void RedactionFolderGetSingleFolder (int? caseId = null, long? userId = null, int? parentId = null, string name = null);

        /// <summary>
        /// Search folder info by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Folder Name to Search (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFolderGetSingleFolderWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null, string name = null);
        /// <summary>
        /// Search folder info by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="folderId">Folder ID to Search (optional)</param>
        /// <returns></returns>
        void RedactionFolderGetSingleFolder_0 (int? caseId = null, long? userId = null, int? folderId = null);

        /// <summary>
        /// Search folder info by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="folderId">Folder ID to Search (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFolderGetSingleFolder_0WithHttpInfo (int? caseId = null, long? userId = null, int? folderId = null);
        /// <summary>
        /// Gets Subfolders for specified parent folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <returns></returns>
        void RedactionFolderGetSubFolders (int? caseId = null, long? userId = null, int? parentId = null);

        /// <summary>
        /// Gets Subfolders for specified parent folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedactionFolderGetSubFoldersWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds document to given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFolderAddDocumentIdsAsync (int? caseId = null, long? userId = null, string keyField = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null, List<string> body = null);

        /// <summary>
        /// Adds document to given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderAddDocumentIdsAsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null, List<string> body = null);
        /// <summary>
        /// Adds document to given folder id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFolderAddDocumentIds_0Async (int? caseId = null, long? userId = null, string keyField = null, int? folderId = null, bool? ignoreReadOnly = null, List<string> body = null);

        /// <summary>
        /// Adds document to given folder id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderAddDocumentIds_0AsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? folderId = null, bool? ignoreReadOnly = null, List<string> body = null);
        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFolderClearDocumentIdsAsync (int? caseId = null, long? userId = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null);

        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderClearDocumentIdsAsyncWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null);
        /// <summary>
        /// Clears all documents from given folder id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="folderId">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFolderClearDocumentIds_0Async (int? caseId = null, long? userId = null, int? folderId = null, bool? ignoreReadOnly = null);

        /// <summary>
        /// Clears all documents from given folder id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="folderId">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderClearDocumentIds_0AsyncWithHttpInfo (int? caseId = null, long? userId = null, int? folderId = null, bool? ignoreReadOnly = null);
        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="body">Folder Structure to Create (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFolderCreateAsync (int? caseId = null, long? userId = null, int? parentId = null, RedactionFolderCreate body = null);

        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="body">Folder Structure to Create (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderCreateAsyncWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null, RedactionFolderCreate body = null);
        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Folder Name to Delete (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFolderDeleteAsync (int? caseId = null, long? userId = null, int? parentId = null, string name = null);

        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Folder Name to Delete (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderDeleteAsyncWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null, string name = null);
        /// <summary>
        /// Deletes document from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFolderDeleteDocumentIdsAsync (int? caseId = null, long? userId = null, string keyField = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null, List<string> body = null);

        /// <summary>
        /// Deletes document from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderDeleteDocumentIdsAsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null, List<string> body = null);
        /// <summary>
        /// Deletes document from given folder id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFolderDeleteDocumentIds_0Async (int? caseId = null, long? userId = null, string keyField = null, int? folderId = null, bool? ignoreReadOnly = null, List<string> body = null);

        /// <summary>
        /// Deletes document from given folder id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderDeleteDocumentIds_0AsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? folderId = null, bool? ignoreReadOnly = null, List<string> body = null);
        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="id">Folder ID to Delete (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFolderDelete_0Async (int? caseId = null, long? userId = null, int? id = null);

        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="id">Folder ID to Delete (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderDelete_0AsyncWithHttpInfo (int? caseId = null, long? userId = null, int? id = null);
        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="id">Folder Id to Edit (optional)</param>
        /// <param name="updateACL">Access Control Update (optional)</param>
        /// <param name="body">Folder Structure to Create (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFolderEditAsync (int? caseId = null, long? userId = null, int? id = null, bool? updateACL = null, RedactionFolderCreate body = null);

        /// <summary>
        /// Clears all documents from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="id">Folder Id to Edit (optional)</param>
        /// <param name="updateACL">Access Control Update (optional)</param>
        /// <param name="body">Folder Structure to Create (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderEditAsyncWithHttpInfo (int? caseId = null, long? userId = null, int? id = null, bool? updateACL = null, RedactionFolderCreate body = null);
        /// <summary>
        /// Gets documents ids from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="startRow">Starting Row Number (optional)</param>
        /// <param name="batchSize">Batch Size (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFolderGetDocumentIdsAsync (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, int? parentId = null, string name = null);

        /// <summary>
        /// Gets documents ids from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="startRow">Starting Row Number (optional)</param>
        /// <param name="batchSize">Batch Size (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderGetDocumentIdsAsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, int? parentId = null, string name = null);
        /// <summary>
        /// Gets documents ids from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="startRow">Starting Row Number (optional)</param>
        /// <param name="batchSize">Batch Size (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFolderGetDocumentIds_0Async (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, int? folderId = null);

        /// <summary>
        /// Gets documents ids from given folder name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="startRow">Starting Row Number (optional)</param>
        /// <param name="batchSize">Batch Size (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderGetDocumentIds_0AsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, int? folderId = null);
        /// <summary>
        /// Gets the Root Folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFolderGetRootFolderAsync (int? caseId = null, long? userId = null);

        /// <summary>
        /// Gets the Root Folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderGetRootFolderAsyncWithHttpInfo (int? caseId = null, long? userId = null);
        /// <summary>
        /// Search folder info by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Folder Name to Search (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFolderGetSingleFolderAsync (int? caseId = null, long? userId = null, int? parentId = null, string name = null);

        /// <summary>
        /// Search folder info by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Folder Name to Search (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderGetSingleFolderAsyncWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null, string name = null);
        /// <summary>
        /// Search folder info by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="folderId">Folder ID to Search (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFolderGetSingleFolder_0Async (int? caseId = null, long? userId = null, int? folderId = null);

        /// <summary>
        /// Search folder info by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="folderId">Folder ID to Search (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderGetSingleFolder_0AsyncWithHttpInfo (int? caseId = null, long? userId = null, int? folderId = null);
        /// <summary>
        /// Gets Subfolders for specified parent folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedactionFolderGetSubFoldersAsync (int? caseId = null, long? userId = null, int? parentId = null);

        /// <summary>
        /// Gets Subfolders for specified parent folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderGetSubFoldersAsyncWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RedactionFolderApi : IRedactionFolderApi
    {
        private RevealAPI.V1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RedactionFolderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RedactionFolderApi(String basePath)
        {
            this.Configuration = new RevealAPI.V1.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RevealAPI.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RedactionFolderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RedactionFolderApi(RevealAPI.V1.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RevealAPI.V1.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RevealAPI.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RevealAPI.V1.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RevealAPI.V1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds document to given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns></returns>
        public void RedactionFolderAddDocumentIds (int? caseId = null, long? userId = null, string keyField = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null, List<string> body = null)
        {
             RedactionFolderAddDocumentIdsWithHttpInfo(caseId, userId, keyField, parentId, name, ignoreReadOnly, body);
        }

        /// <summary>
        /// Adds document to given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFolderAddDocumentIdsWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null, List<string> body = null)
        {

            var localVarPath = "/api/redactionFolder/documentIds/AddByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (ignoreReadOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreReadOnly", ignoreReadOnly)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderAddDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds document to given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFolderAddDocumentIdsAsync (int? caseId = null, long? userId = null, string keyField = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null, List<string> body = null)
        {
             await RedactionFolderAddDocumentIdsAsyncWithHttpInfo(caseId, userId, keyField, parentId, name, ignoreReadOnly, body);

        }

        /// <summary>
        /// Adds document to given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderAddDocumentIdsAsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null, List<string> body = null)
        {

            var localVarPath = "/api/redactionFolder/documentIds/AddByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (ignoreReadOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreReadOnly", ignoreReadOnly)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderAddDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds document to given folder id. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns></returns>
        public void RedactionFolderAddDocumentIds_0 (int? caseId = null, long? userId = null, string keyField = null, int? folderId = null, bool? ignoreReadOnly = null, List<string> body = null)
        {
             RedactionFolderAddDocumentIds_0WithHttpInfo(caseId, userId, keyField, folderId, ignoreReadOnly, body);
        }

        /// <summary>
        /// Adds document to given folder id. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFolderAddDocumentIds_0WithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? folderId = null, bool? ignoreReadOnly = null, List<string> body = null)
        {

            var localVarPath = "/api/redactionFolder/documentIds/AddById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (folderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter
            if (ignoreReadOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreReadOnly", ignoreReadOnly)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderAddDocumentIds_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds document to given folder id. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFolderAddDocumentIds_0Async (int? caseId = null, long? userId = null, string keyField = null, int? folderId = null, bool? ignoreReadOnly = null, List<string> body = null)
        {
             await RedactionFolderAddDocumentIds_0AsyncWithHttpInfo(caseId, userId, keyField, folderId, ignoreReadOnly, body);

        }

        /// <summary>
        /// Adds document to given folder id. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderAddDocumentIds_0AsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? folderId = null, bool? ignoreReadOnly = null, List<string> body = null)
        {

            var localVarPath = "/api/redactionFolder/documentIds/AddById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (folderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter
            if (ignoreReadOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreReadOnly", ignoreReadOnly)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderAddDocumentIds_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <returns></returns>
        public void RedactionFolderClearDocumentIds (int? caseId = null, long? userId = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null)
        {
             RedactionFolderClearDocumentIdsWithHttpInfo(caseId, userId, parentId, name, ignoreReadOnly);
        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFolderClearDocumentIdsWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null)
        {

            var localVarPath = "/api/redactionFolder/documentIds/ClearByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (ignoreReadOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreReadOnly", ignoreReadOnly)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderClearDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFolderClearDocumentIdsAsync (int? caseId = null, long? userId = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null)
        {
             await RedactionFolderClearDocumentIdsAsyncWithHttpInfo(caseId, userId, parentId, name, ignoreReadOnly);

        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderClearDocumentIdsAsyncWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null)
        {

            var localVarPath = "/api/redactionFolder/documentIds/ClearByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (ignoreReadOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreReadOnly", ignoreReadOnly)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderClearDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clears all documents from given folder id. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="folderId">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <returns></returns>
        public void RedactionFolderClearDocumentIds_0 (int? caseId = null, long? userId = null, int? folderId = null, bool? ignoreReadOnly = null)
        {
             RedactionFolderClearDocumentIds_0WithHttpInfo(caseId, userId, folderId, ignoreReadOnly);
        }

        /// <summary>
        /// Clears all documents from given folder id. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="folderId">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFolderClearDocumentIds_0WithHttpInfo (int? caseId = null, long? userId = null, int? folderId = null, bool? ignoreReadOnly = null)
        {

            var localVarPath = "/api/redactionFolder/documentIds/ClearById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (folderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter
            if (ignoreReadOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreReadOnly", ignoreReadOnly)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderClearDocumentIds_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clears all documents from given folder id. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="folderId">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFolderClearDocumentIds_0Async (int? caseId = null, long? userId = null, int? folderId = null, bool? ignoreReadOnly = null)
        {
             await RedactionFolderClearDocumentIds_0AsyncWithHttpInfo(caseId, userId, folderId, ignoreReadOnly);

        }

        /// <summary>
        /// Clears all documents from given folder id. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="folderId">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderClearDocumentIds_0AsyncWithHttpInfo (int? caseId = null, long? userId = null, int? folderId = null, bool? ignoreReadOnly = null)
        {

            var localVarPath = "/api/redactionFolder/documentIds/ClearById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (folderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter
            if (ignoreReadOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreReadOnly", ignoreReadOnly)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderClearDocumentIds_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="body">Folder Structure to Create (optional)</param>
        /// <returns></returns>
        public void RedactionFolderCreate (int? caseId = null, long? userId = null, int? parentId = null, RedactionFolderCreate body = null)
        {
             RedactionFolderCreateWithHttpInfo(caseId, userId, parentId, body);
        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="body">Folder Structure to Create (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFolderCreateWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null, RedactionFolderCreate body = null)
        {

            var localVarPath = "/api/redactionFolder/CreateFolder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="body">Folder Structure to Create (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFolderCreateAsync (int? caseId = null, long? userId = null, int? parentId = null, RedactionFolderCreate body = null)
        {
             await RedactionFolderCreateAsyncWithHttpInfo(caseId, userId, parentId, body);

        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="body">Folder Structure to Create (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderCreateAsyncWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null, RedactionFolderCreate body = null)
        {

            var localVarPath = "/api/redactionFolder/CreateFolder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Folder Name to Delete (optional)</param>
        /// <returns></returns>
        public void RedactionFolderDelete (int? caseId = null, long? userId = null, int? parentId = null, string name = null)
        {
             RedactionFolderDeleteWithHttpInfo(caseId, userId, parentId, name);
        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Folder Name to Delete (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFolderDeleteWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null, string name = null)
        {

            var localVarPath = "/api/redactionFolder/DeleteFolderByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Folder Name to Delete (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFolderDeleteAsync (int? caseId = null, long? userId = null, int? parentId = null, string name = null)
        {
             await RedactionFolderDeleteAsyncWithHttpInfo(caseId, userId, parentId, name);

        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Folder Name to Delete (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderDeleteAsyncWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null, string name = null)
        {

            var localVarPath = "/api/redactionFolder/DeleteFolderByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes document from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns></returns>
        public void RedactionFolderDeleteDocumentIds (int? caseId = null, long? userId = null, string keyField = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null, List<string> body = null)
        {
             RedactionFolderDeleteDocumentIdsWithHttpInfo(caseId, userId, keyField, parentId, name, ignoreReadOnly, body);
        }

        /// <summary>
        /// Deletes document from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFolderDeleteDocumentIdsWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null, List<string> body = null)
        {

            var localVarPath = "/api/redactionFolder/documentIds/DeleteByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (ignoreReadOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreReadOnly", ignoreReadOnly)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderDeleteDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes document from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFolderDeleteDocumentIdsAsync (int? caseId = null, long? userId = null, string keyField = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null, List<string> body = null)
        {
             await RedactionFolderDeleteDocumentIdsAsyncWithHttpInfo(caseId, userId, keyField, parentId, name, ignoreReadOnly, body);

        }

        /// <summary>
        /// Deletes document from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderDeleteDocumentIdsAsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? parentId = null, string name = null, bool? ignoreReadOnly = null, List<string> body = null)
        {

            var localVarPath = "/api/redactionFolder/documentIds/DeleteByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (ignoreReadOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreReadOnly", ignoreReadOnly)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderDeleteDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes document from given folder id. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns></returns>
        public void RedactionFolderDeleteDocumentIds_0 (int? caseId = null, long? userId = null, string keyField = null, int? folderId = null, bool? ignoreReadOnly = null, List<string> body = null)
        {
             RedactionFolderDeleteDocumentIds_0WithHttpInfo(caseId, userId, keyField, folderId, ignoreReadOnly, body);
        }

        /// <summary>
        /// Deletes document from given folder id. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFolderDeleteDocumentIds_0WithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? folderId = null, bool? ignoreReadOnly = null, List<string> body = null)
        {

            var localVarPath = "/api/redactionFolder/documentIds/DeleteById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (folderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter
            if (ignoreReadOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreReadOnly", ignoreReadOnly)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderDeleteDocumentIds_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes document from given folder id. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFolderDeleteDocumentIds_0Async (int? caseId = null, long? userId = null, string keyField = null, int? folderId = null, bool? ignoreReadOnly = null, List<string> body = null)
        {
             await RedactionFolderDeleteDocumentIds_0AsyncWithHttpInfo(caseId, userId, keyField, folderId, ignoreReadOnly, body);

        }

        /// <summary>
        /// Deletes document from given folder id. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <param name="ignoreReadOnly">Ignore Readonly Attribute (optional)</param>
        /// <param name="body">List of IDs to Add (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderDeleteDocumentIds_0AsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? folderId = null, bool? ignoreReadOnly = null, List<string> body = null)
        {

            var localVarPath = "/api/redactionFolder/documentIds/DeleteById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (folderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter
            if (ignoreReadOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreReadOnly", ignoreReadOnly)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderDeleteDocumentIds_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="id">Folder ID to Delete (optional)</param>
        /// <returns></returns>
        public void RedactionFolderDelete_0 (int? caseId = null, long? userId = null, int? id = null)
        {
             RedactionFolderDelete_0WithHttpInfo(caseId, userId, id);
        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="id">Folder ID to Delete (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFolderDelete_0WithHttpInfo (int? caseId = null, long? userId = null, int? id = null)
        {

            var localVarPath = "/api/redactionFolder/DeleteFolderById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderDelete_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="id">Folder ID to Delete (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFolderDelete_0Async (int? caseId = null, long? userId = null, int? id = null)
        {
             await RedactionFolderDelete_0AsyncWithHttpInfo(caseId, userId, id);

        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="id">Folder ID to Delete (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderDelete_0AsyncWithHttpInfo (int? caseId = null, long? userId = null, int? id = null)
        {

            var localVarPath = "/api/redactionFolder/DeleteFolderById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderDelete_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="id">Folder Id to Edit (optional)</param>
        /// <param name="updateACL">Access Control Update (optional)</param>
        /// <param name="body">Folder Structure to Create (optional)</param>
        /// <returns></returns>
        public void RedactionFolderEdit (int? caseId = null, long? userId = null, int? id = null, bool? updateACL = null, RedactionFolderCreate body = null)
        {
             RedactionFolderEditWithHttpInfo(caseId, userId, id, updateACL, body);
        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="id">Folder Id to Edit (optional)</param>
        /// <param name="updateACL">Access Control Update (optional)</param>
        /// <param name="body">Folder Structure to Create (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFolderEditWithHttpInfo (int? caseId = null, long? userId = null, int? id = null, bool? updateACL = null, RedactionFolderCreate body = null)
        {

            var localVarPath = "/api/redactionFolder/EditFolder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (updateACL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateACL", updateACL)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderEdit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="id">Folder Id to Edit (optional)</param>
        /// <param name="updateACL">Access Control Update (optional)</param>
        /// <param name="body">Folder Structure to Create (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFolderEditAsync (int? caseId = null, long? userId = null, int? id = null, bool? updateACL = null, RedactionFolderCreate body = null)
        {
             await RedactionFolderEditAsyncWithHttpInfo(caseId, userId, id, updateACL, body);

        }

        /// <summary>
        /// Clears all documents from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="id">Folder Id to Edit (optional)</param>
        /// <param name="updateACL">Access Control Update (optional)</param>
        /// <param name="body">Folder Structure to Create (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderEditAsyncWithHttpInfo (int? caseId = null, long? userId = null, int? id = null, bool? updateACL = null, RedactionFolderCreate body = null)
        {

            var localVarPath = "/api/redactionFolder/EditFolder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (updateACL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateACL", updateACL)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderEdit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets documents ids from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="startRow">Starting Row Number (optional)</param>
        /// <param name="batchSize">Batch Size (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <returns></returns>
        public void RedactionFolderGetDocumentIds (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, int? parentId = null, string name = null)
        {
             RedactionFolderGetDocumentIdsWithHttpInfo(caseId, userId, keyField, startRow, batchSize, parentId, name);
        }

        /// <summary>
        /// Gets documents ids from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="startRow">Starting Row Number (optional)</param>
        /// <param name="batchSize">Batch Size (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFolderGetDocumentIdsWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, int? parentId = null, string name = null)
        {

            var localVarPath = "/api/redactionFolder/GetDocumentsIdsByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (startRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startRow", startRow)); // query parameter
            if (batchSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchSize", batchSize)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderGetDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets documents ids from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="startRow">Starting Row Number (optional)</param>
        /// <param name="batchSize">Batch Size (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFolderGetDocumentIdsAsync (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, int? parentId = null, string name = null)
        {
             await RedactionFolderGetDocumentIdsAsyncWithHttpInfo(caseId, userId, keyField, startRow, batchSize, parentId, name);

        }

        /// <summary>
        /// Gets documents ids from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="startRow">Starting Row Number (optional)</param>
        /// <param name="batchSize">Batch Size (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Container Folder Name (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderGetDocumentIdsAsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, int? parentId = null, string name = null)
        {

            var localVarPath = "/api/redactionFolder/GetDocumentsIdsByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (startRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startRow", startRow)); // query parameter
            if (batchSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchSize", batchSize)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderGetDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets documents ids from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="startRow">Starting Row Number (optional)</param>
        /// <param name="batchSize">Batch Size (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <returns></returns>
        public void RedactionFolderGetDocumentIds_0 (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, int? folderId = null)
        {
             RedactionFolderGetDocumentIds_0WithHttpInfo(caseId, userId, keyField, startRow, batchSize, folderId);
        }

        /// <summary>
        /// Gets documents ids from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="startRow">Starting Row Number (optional)</param>
        /// <param name="batchSize">Batch Size (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFolderGetDocumentIds_0WithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, int? folderId = null)
        {

            var localVarPath = "/api/redactionFolder/GetDocumentsIdsById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (startRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startRow", startRow)); // query parameter
            if (batchSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchSize", batchSize)); // query parameter
            if (folderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderGetDocumentIds_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets documents ids from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="startRow">Starting Row Number (optional)</param>
        /// <param name="batchSize">Batch Size (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFolderGetDocumentIds_0Async (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, int? folderId = null)
        {
             await RedactionFolderGetDocumentIds_0AsyncWithHttpInfo(caseId, userId, keyField, startRow, batchSize, folderId);

        }

        /// <summary>
        /// Gets documents ids from given folder name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="keyField">Field to Retrieve: 1.- \&quot;ITEMID\&quot; 2.- \&quot;BEGDOC\&quot; (optional)</param>
        /// <param name="startRow">Starting Row Number (optional)</param>
        /// <param name="batchSize">Batch Size (optional)</param>
        /// <param name="folderId">Container Folder ID (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderGetDocumentIds_0AsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, int? folderId = null)
        {

            var localVarPath = "/api/redactionFolder/GetDocumentsIdsById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (startRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startRow", startRow)); // query parameter
            if (batchSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchSize", batchSize)); // query parameter
            if (folderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderGetDocumentIds_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the Root Folder 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <returns></returns>
        public void RedactionFolderGetRootFolder (int? caseId = null, long? userId = null)
        {
             RedactionFolderGetRootFolderWithHttpInfo(caseId, userId);
        }

        /// <summary>
        /// Gets the Root Folder 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFolderGetRootFolderWithHttpInfo (int? caseId = null, long? userId = null)
        {

            var localVarPath = "/api/redactionFolder/GetRoot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderGetRootFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the Root Folder 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFolderGetRootFolderAsync (int? caseId = null, long? userId = null)
        {
             await RedactionFolderGetRootFolderAsyncWithHttpInfo(caseId, userId);

        }

        /// <summary>
        /// Gets the Root Folder 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderGetRootFolderAsyncWithHttpInfo (int? caseId = null, long? userId = null)
        {

            var localVarPath = "/api/redactionFolder/GetRoot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderGetRootFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Search folder info by name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Folder Name to Search (optional)</param>
        /// <returns></returns>
        public void RedactionFolderGetSingleFolder (int? caseId = null, long? userId = null, int? parentId = null, string name = null)
        {
             RedactionFolderGetSingleFolderWithHttpInfo(caseId, userId, parentId, name);
        }

        /// <summary>
        /// Search folder info by name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Folder Name to Search (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFolderGetSingleFolderWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null, string name = null)
        {

            var localVarPath = "/api/redactionFolder/GetFolderByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderGetSingleFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Search folder info by name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Folder Name to Search (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFolderGetSingleFolderAsync (int? caseId = null, long? userId = null, int? parentId = null, string name = null)
        {
             await RedactionFolderGetSingleFolderAsyncWithHttpInfo(caseId, userId, parentId, name);

        }

        /// <summary>
        /// Search folder info by name. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <param name="name">Folder Name to Search (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderGetSingleFolderAsyncWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null, string name = null)
        {

            var localVarPath = "/api/redactionFolder/GetFolderByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderGetSingleFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Search folder info by id. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="folderId">Folder ID to Search (optional)</param>
        /// <returns></returns>
        public void RedactionFolderGetSingleFolder_0 (int? caseId = null, long? userId = null, int? folderId = null)
        {
             RedactionFolderGetSingleFolder_0WithHttpInfo(caseId, userId, folderId);
        }

        /// <summary>
        /// Search folder info by id. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="folderId">Folder ID to Search (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFolderGetSingleFolder_0WithHttpInfo (int? caseId = null, long? userId = null, int? folderId = null)
        {

            var localVarPath = "/api/redactionFolder/GetFolderById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (folderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderGetSingleFolder_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Search folder info by id. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="folderId">Folder ID to Search (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFolderGetSingleFolder_0Async (int? caseId = null, long? userId = null, int? folderId = null)
        {
             await RedactionFolderGetSingleFolder_0AsyncWithHttpInfo(caseId, userId, folderId);

        }

        /// <summary>
        /// Search folder info by id. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="folderId">Folder ID to Search (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderGetSingleFolder_0AsyncWithHttpInfo (int? caseId = null, long? userId = null, int? folderId = null)
        {

            var localVarPath = "/api/redactionFolder/GetFolderById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (folderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderGetSingleFolder_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets Subfolders for specified parent folder. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <returns></returns>
        public void RedactionFolderGetSubFolders (int? caseId = null, long? userId = null, int? parentId = null)
        {
             RedactionFolderGetSubFoldersWithHttpInfo(caseId, userId, parentId);
        }

        /// <summary>
        /// Gets Subfolders for specified parent folder. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedactionFolderGetSubFoldersWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null)
        {

            var localVarPath = "/api/redactionFolder/GetSubfolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderGetSubFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets Subfolders for specified parent folder. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedactionFolderGetSubFoldersAsync (int? caseId = null, long? userId = null, int? parentId = null)
        {
             await RedactionFolderGetSubFoldersAsyncWithHttpInfo(caseId, userId, parentId);

        }

        /// <summary>
        /// Gets Subfolders for specified parent folder. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Reveal Case Id (optional)</param>
        /// <param name="userId">Reveal User Id (optional)</param>
        /// <param name="parentId">Parent Folder Id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedactionFolderGetSubFoldersAsyncWithHttpInfo (int? caseId = null, long? userId = null, int? parentId = null)
        {

            var localVarPath = "/api/redactionFolder/GetSubfolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedactionFolderGetSubFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
