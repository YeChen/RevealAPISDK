/* 
 * Reveal API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using RevealAPI.V1.Client;
using RevealAPI.V1.Models.Resources;

namespace RevealAPI.V1.Api.Resources
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFieldApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clear values in IMPORT_DOCUMENTS for a field by FIELD NAME
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="fieldName"> (optional)</param>
        /// <returns>string</returns>
        string FieldClearField (int? caseId = null, string fieldName = null);

        /// <summary>
        /// Clear values in IMPORT_DOCUMENTS for a field by FIELD NAME
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="fieldName"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> FieldClearFieldWithHttpInfo (int? caseId = null, string fieldName = null);
        /// <summary>
        /// Clear values in IMPORT_DOCUMENTS for a field by FIELD ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>string</returns>
        string FieldClearField_0 (int? id, int? caseId = null);

        /// <summary>
        /// Clear values in IMPORT_DOCUMENTS for a field by FIELD ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> FieldClearField_0WithHttpInfo (int? id, int? caseId = null);
        /// <summary>
        /// Create a new field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Field</returns>
        Field FieldCreateField (int? caseId = null, Field body = null);

        /// <summary>
        /// Create a new field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Field</returns>
        ApiResponse<Field> FieldCreateFieldWithHttpInfo (int? caseId = null, Field body = null);
        /// <summary>
        /// Delete a field by FIELD ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>string</returns>
        string FieldDeleteFieldById (int? id, int? caseId = null);

        /// <summary>
        /// Delete a field by FIELD ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> FieldDeleteFieldByIdWithHttpInfo (int? id, int? caseId = null);
        /// <summary>
        /// Delete a field by FIELD NAME
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"> (optional)</param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>string</returns>
        string FieldDeleteFieldByName (string fieldName = null, int? caseId = null);

        /// <summary>
        /// Delete a field by FIELD NAME
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"> (optional)</param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> FieldDeleteFieldByNameWithHttpInfo (string fieldName = null, int? caseId = null);
        /// <summary>
        /// Get a list of all fields in IMPORT_METADATA / IMPORT_DOCUMENTS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <returns>List&lt;Field&gt;</returns>
        List<Field> FieldGetAllFields (int? caseId = null);

        /// <summary>
        /// Get a list of all fields in IMPORT_METADATA / IMPORT_DOCUMENTS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Field&gt;</returns>
        ApiResponse<List<Field>> FieldGetAllFieldsWithHttpInfo (int? caseId = null);
        /// <summary>
        /// Get the list of all document ids in the case (ITEMID or BEGDOC values).  On the first call start offset should be 0 or 1, on subsequent calls it should be \&quot;count of results received + 1\&quot;  If you receive less records than the batchsize you sent in (unless you sent in 0) then you are done.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <returns></returns>
        void FieldGetDocumentIds (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null);

        /// <summary>
        /// Get the list of all document ids in the case (ITEMID or BEGDOC values).  On the first call start offset should be 0 or 1, on subsequent calls it should be \&quot;count of results received + 1\&quot;  If you receive less records than the batchsize you sent in (unless you sent in 0) then you are done.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FieldGetDocumentIdsWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null);
        /// <summary>
        /// Get a list of document ids (ITEMID or BEGDOC values) for a field that have a certain value.   Specify the desired matching field value or specify null or \&quot;null\&quot; or \&quot;not null\&quot; as special values.  The keyfield can be either \&quot;ITEMID\&quot; or \&quot;BEGDOC\&quot;  On the first call start offset should be 0 or 1, on subsequent calls it should be \&quot;count of results received + 1\&quot;  If you receive less records than the batchsize you sent in (unless you sent in 0) then you are done.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void FieldGetDocumentIds_0 (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, DocumentField body = null);

        /// <summary>
        /// Get a list of document ids (ITEMID or BEGDOC values) for a field that have a certain value.   Specify the desired matching field value or specify null or \&quot;null\&quot; or \&quot;not null\&quot; as special values.  The keyfield can be either \&quot;ITEMID\&quot; or \&quot;BEGDOC\&quot;  On the first call start offset should be 0 or 1, on subsequent calls it should be \&quot;count of results received + 1\&quot;  If you receive less records than the batchsize you sent in (unless you sent in 0) then you are done.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FieldGetDocumentIds_0WithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, DocumentField body = null);
        /// <summary>
        /// Get information about a single field by FIELD ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Field</returns>
        Field FieldGetFieldById (int? id, int? caseId = null);

        /// <summary>
        /// Get information about a single field by FIELD ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>ApiResponse of Field</returns>
        ApiResponse<Field> FieldGetFieldByIdWithHttpInfo (int? id, int? caseId = null);
        /// <summary>
        /// Get information about a single field by name (name as part of the path)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Field</returns>
        Field FieldGetFieldByName (string fieldName, int? caseId = null);

        /// <summary>
        /// Get information about a single field by name (name as part of the path)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>ApiResponse of Field</returns>
        ApiResponse<Field> FieldGetFieldByNameWithHttpInfo (string fieldName, int? caseId = null);
        /// <summary>
        /// Overlay field values into IMPORT_DOCUMENTS table. Use either FieldId or FieldName to specify the fields to update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string FieldOverLayFields (int? caseId = null, List<OverLayRequest> body = null);

        /// <summary>
        /// Overlay field values into IMPORT_DOCUMENTS table. Use either FieldId or FieldName to specify the fields to update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> FieldOverLayFieldsWithHttpInfo (int? caseId = null, List<OverLayRequest> body = null);
        /// <summary>
        /// Update an existing field by field name or Id in the Field object. Id is used first. If its 0, then the field name is used to lookup the field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Field</returns>
        Field FieldUpdateField (int? caseId = null, Field body = null);

        /// <summary>
        /// Update an existing field by field name or Id in the Field object. Id is used first. If its 0, then the field name is used to lookup the field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Field</returns>
        ApiResponse<Field> FieldUpdateFieldWithHttpInfo (int? caseId = null, Field body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Clear values in IMPORT_DOCUMENTS for a field by FIELD NAME
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="fieldName"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> FieldClearFieldAsync (int? caseId = null, string fieldName = null);

        /// <summary>
        /// Clear values in IMPORT_DOCUMENTS for a field by FIELD NAME
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="fieldName"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> FieldClearFieldAsyncWithHttpInfo (int? caseId = null, string fieldName = null);
        /// <summary>
        /// Clear values in IMPORT_DOCUMENTS for a field by FIELD ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> FieldClearField_0Async (int? id, int? caseId = null);

        /// <summary>
        /// Clear values in IMPORT_DOCUMENTS for a field by FIELD ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> FieldClearField_0AsyncWithHttpInfo (int? id, int? caseId = null);
        /// <summary>
        /// Create a new field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Field</returns>
        System.Threading.Tasks.Task<Field> FieldCreateFieldAsync (int? caseId = null, Field body = null);

        /// <summary>
        /// Create a new field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Field)</returns>
        System.Threading.Tasks.Task<ApiResponse<Field>> FieldCreateFieldAsyncWithHttpInfo (int? caseId = null, Field body = null);
        /// <summary>
        /// Delete a field by FIELD ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> FieldDeleteFieldByIdAsync (int? id, int? caseId = null);

        /// <summary>
        /// Delete a field by FIELD ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> FieldDeleteFieldByIdAsyncWithHttpInfo (int? id, int? caseId = null);
        /// <summary>
        /// Delete a field by FIELD NAME
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"> (optional)</param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> FieldDeleteFieldByNameAsync (string fieldName = null, int? caseId = null);

        /// <summary>
        /// Delete a field by FIELD NAME
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"> (optional)</param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> FieldDeleteFieldByNameAsyncWithHttpInfo (string fieldName = null, int? caseId = null);
        /// <summary>
        /// Get a list of all fields in IMPORT_METADATA / IMPORT_DOCUMENTS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of List&lt;Field&gt;</returns>
        System.Threading.Tasks.Task<List<Field>> FieldGetAllFieldsAsync (int? caseId = null);

        /// <summary>
        /// Get a list of all fields in IMPORT_METADATA / IMPORT_DOCUMENTS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Field&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Field>>> FieldGetAllFieldsAsyncWithHttpInfo (int? caseId = null);
        /// <summary>
        /// Get the list of all document ids in the case (ITEMID or BEGDOC values).  On the first call start offset should be 0 or 1, on subsequent calls it should be \&quot;count of results received + 1\&quot;  If you receive less records than the batchsize you sent in (unless you sent in 0) then you are done.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FieldGetDocumentIdsAsync (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null);

        /// <summary>
        /// Get the list of all document ids in the case (ITEMID or BEGDOC values).  On the first call start offset should be 0 or 1, on subsequent calls it should be \&quot;count of results received + 1\&quot;  If you receive less records than the batchsize you sent in (unless you sent in 0) then you are done.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FieldGetDocumentIdsAsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null);
        /// <summary>
        /// Get a list of document ids (ITEMID or BEGDOC values) for a field that have a certain value.   Specify the desired matching field value or specify null or \&quot;null\&quot; or \&quot;not null\&quot; as special values.  The keyfield can be either \&quot;ITEMID\&quot; or \&quot;BEGDOC\&quot;  On the first call start offset should be 0 or 1, on subsequent calls it should be \&quot;count of results received + 1\&quot;  If you receive less records than the batchsize you sent in (unless you sent in 0) then you are done.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FieldGetDocumentIds_0Async (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, DocumentField body = null);

        /// <summary>
        /// Get a list of document ids (ITEMID or BEGDOC values) for a field that have a certain value.   Specify the desired matching field value or specify null or \&quot;null\&quot; or \&quot;not null\&quot; as special values.  The keyfield can be either \&quot;ITEMID\&quot; or \&quot;BEGDOC\&quot;  On the first call start offset should be 0 or 1, on subsequent calls it should be \&quot;count of results received + 1\&quot;  If you receive less records than the batchsize you sent in (unless you sent in 0) then you are done.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FieldGetDocumentIds_0AsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, DocumentField body = null);
        /// <summary>
        /// Get information about a single field by FIELD ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of Field</returns>
        System.Threading.Tasks.Task<Field> FieldGetFieldByIdAsync (int? id, int? caseId = null);

        /// <summary>
        /// Get information about a single field by FIELD ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of ApiResponse (Field)</returns>
        System.Threading.Tasks.Task<ApiResponse<Field>> FieldGetFieldByIdAsyncWithHttpInfo (int? id, int? caseId = null);
        /// <summary>
        /// Get information about a single field by name (name as part of the path)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of Field</returns>
        System.Threading.Tasks.Task<Field> FieldGetFieldByNameAsync (string fieldName, int? caseId = null);

        /// <summary>
        /// Get information about a single field by name (name as part of the path)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of ApiResponse (Field)</returns>
        System.Threading.Tasks.Task<ApiResponse<Field>> FieldGetFieldByNameAsyncWithHttpInfo (string fieldName, int? caseId = null);
        /// <summary>
        /// Overlay field values into IMPORT_DOCUMENTS table. Use either FieldId or FieldName to specify the fields to update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> FieldOverLayFieldsAsync (int? caseId = null, List<OverLayRequest> body = null);

        /// <summary>
        /// Overlay field values into IMPORT_DOCUMENTS table. Use either FieldId or FieldName to specify the fields to update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> FieldOverLayFieldsAsyncWithHttpInfo (int? caseId = null, List<OverLayRequest> body = null);
        /// <summary>
        /// Update an existing field by field name or Id in the Field object. Id is used first. If its 0, then the field name is used to lookup the field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Field</returns>
        System.Threading.Tasks.Task<Field> FieldUpdateFieldAsync (int? caseId = null, Field body = null);

        /// <summary>
        /// Update an existing field by field name or Id in the Field object. Id is used first. If its 0, then the field name is used to lookup the field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Field)</returns>
        System.Threading.Tasks.Task<ApiResponse<Field>> FieldUpdateFieldAsyncWithHttpInfo (int? caseId = null, Field body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FieldApi : IFieldApi
    {
        private RevealAPI.V1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FieldApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FieldApi(String basePath)
        {
            this.Configuration = new RevealAPI.V1.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RevealAPI.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FieldApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FieldApi(RevealAPI.V1.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RevealAPI.V1.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RevealAPI.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RevealAPI.V1.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RevealAPI.V1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Clear values in IMPORT_DOCUMENTS for a field by FIELD NAME 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="fieldName"> (optional)</param>
        /// <returns>string</returns>
        public string FieldClearField (int? caseId = null, string fieldName = null)
        {
             ApiResponse<string> localVarResponse = FieldClearFieldWithHttpInfo(caseId, fieldName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear values in IMPORT_DOCUMENTS for a field by FIELD NAME 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="fieldName"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > FieldClearFieldWithHttpInfo (int? caseId = null, string fieldName = null)
        {

            var localVarPath = "/api/field/clear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (fieldName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fieldName", fieldName)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldClearField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Clear values in IMPORT_DOCUMENTS for a field by FIELD NAME 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="fieldName"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> FieldClearFieldAsync (int? caseId = null, string fieldName = null)
        {
             ApiResponse<string> localVarResponse = await FieldClearFieldAsyncWithHttpInfo(caseId, fieldName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear values in IMPORT_DOCUMENTS for a field by FIELD NAME 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="fieldName"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> FieldClearFieldAsyncWithHttpInfo (int? caseId = null, string fieldName = null)
        {

            var localVarPath = "/api/field/clear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (fieldName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fieldName", fieldName)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldClearField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Clear values in IMPORT_DOCUMENTS for a field by FIELD ID 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>string</returns>
        public string FieldClearField_0 (int? id, int? caseId = null)
        {
             ApiResponse<string> localVarResponse = FieldClearField_0WithHttpInfo(id, caseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear values in IMPORT_DOCUMENTS for a field by FIELD ID 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > FieldClearField_0WithHttpInfo (int? id, int? caseId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FieldApi->FieldClearField_0");

            var localVarPath = "/api/field/clear/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldClearField_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Clear values in IMPORT_DOCUMENTS for a field by FIELD ID 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> FieldClearField_0Async (int? id, int? caseId = null)
        {
             ApiResponse<string> localVarResponse = await FieldClearField_0AsyncWithHttpInfo(id, caseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear values in IMPORT_DOCUMENTS for a field by FIELD ID 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> FieldClearField_0AsyncWithHttpInfo (int? id, int? caseId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FieldApi->FieldClearField_0");

            var localVarPath = "/api/field/clear/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldClearField_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a new field 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Field</returns>
        public Field FieldCreateField (int? caseId = null, Field body = null)
        {
             ApiResponse<Field> localVarResponse = FieldCreateFieldWithHttpInfo(caseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new field 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Field</returns>
        public ApiResponse< Field > FieldCreateFieldWithHttpInfo (int? caseId = null, Field body = null)
        {

            var localVarPath = "/api/field";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldCreateField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Field>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Field) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Field)));
        }

        /// <summary>
        /// Create a new field 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Field</returns>
        public async System.Threading.Tasks.Task<Field> FieldCreateFieldAsync (int? caseId = null, Field body = null)
        {
             ApiResponse<Field> localVarResponse = await FieldCreateFieldAsyncWithHttpInfo(caseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new field 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Field)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Field>> FieldCreateFieldAsyncWithHttpInfo (int? caseId = null, Field body = null)
        {

            var localVarPath = "/api/field";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldCreateField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Field>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Field) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Field)));
        }

        /// <summary>
        /// Delete a field by FIELD ID 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>string</returns>
        public string FieldDeleteFieldById (int? id, int? caseId = null)
        {
             ApiResponse<string> localVarResponse = FieldDeleteFieldByIdWithHttpInfo(id, caseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a field by FIELD ID 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > FieldDeleteFieldByIdWithHttpInfo (int? id, int? caseId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FieldApi->FieldDeleteFieldById");

            var localVarPath = "/api/field/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldDeleteFieldById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete a field by FIELD ID 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> FieldDeleteFieldByIdAsync (int? id, int? caseId = null)
        {
             ApiResponse<string> localVarResponse = await FieldDeleteFieldByIdAsyncWithHttpInfo(id, caseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a field by FIELD ID 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> FieldDeleteFieldByIdAsyncWithHttpInfo (int? id, int? caseId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FieldApi->FieldDeleteFieldById");

            var localVarPath = "/api/field/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldDeleteFieldById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete a field by FIELD NAME 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"> (optional)</param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>string</returns>
        public string FieldDeleteFieldByName (string fieldName = null, int? caseId = null)
        {
             ApiResponse<string> localVarResponse = FieldDeleteFieldByNameWithHttpInfo(fieldName, caseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a field by FIELD NAME 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"> (optional)</param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > FieldDeleteFieldByNameWithHttpInfo (string fieldName = null, int? caseId = null)
        {

            var localVarPath = "/api/field";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fieldName", fieldName)); // query parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldDeleteFieldByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete a field by FIELD NAME 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"> (optional)</param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> FieldDeleteFieldByNameAsync (string fieldName = null, int? caseId = null)
        {
             ApiResponse<string> localVarResponse = await FieldDeleteFieldByNameAsyncWithHttpInfo(fieldName, caseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a field by FIELD NAME 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"> (optional)</param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> FieldDeleteFieldByNameAsyncWithHttpInfo (string fieldName = null, int? caseId = null)
        {

            var localVarPath = "/api/field";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fieldName", fieldName)); // query parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldDeleteFieldByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a list of all fields in IMPORT_METADATA / IMPORT_DOCUMENTS 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <returns>List&lt;Field&gt;</returns>
        public List<Field> FieldGetAllFields (int? caseId = null)
        {
             ApiResponse<List<Field>> localVarResponse = FieldGetAllFieldsWithHttpInfo(caseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all fields in IMPORT_METADATA / IMPORT_DOCUMENTS 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Field&gt;</returns>
        public ApiResponse< List<Field> > FieldGetAllFieldsWithHttpInfo (int? caseId = null)
        {

            var localVarPath = "/api/field";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldGetAllFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Field>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Field>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Field>)));
        }

        /// <summary>
        /// Get a list of all fields in IMPORT_METADATA / IMPORT_DOCUMENTS 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of List&lt;Field&gt;</returns>
        public async System.Threading.Tasks.Task<List<Field>> FieldGetAllFieldsAsync (int? caseId = null)
        {
             ApiResponse<List<Field>> localVarResponse = await FieldGetAllFieldsAsyncWithHttpInfo(caseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all fields in IMPORT_METADATA / IMPORT_DOCUMENTS 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Field&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Field>>> FieldGetAllFieldsAsyncWithHttpInfo (int? caseId = null)
        {

            var localVarPath = "/api/field";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldGetAllFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Field>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Field>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Field>)));
        }

        /// <summary>
        /// Get the list of all document ids in the case (ITEMID or BEGDOC values).  On the first call start offset should be 0 or 1, on subsequent calls it should be \&quot;count of results received + 1\&quot;  If you receive less records than the batchsize you sent in (unless you sent in 0) then you are done. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <returns></returns>
        public void FieldGetDocumentIds (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null)
        {
             FieldGetDocumentIdsWithHttpInfo(caseId, userId, keyField, startRow, batchSize);
        }

        /// <summary>
        /// Get the list of all document ids in the case (ITEMID or BEGDOC values).  On the first call start offset should be 0 or 1, on subsequent calls it should be \&quot;count of results received + 1\&quot;  If you receive less records than the batchsize you sent in (unless you sent in 0) then you are done. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FieldGetDocumentIdsWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null)
        {

            var localVarPath = "/api/field/documentIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (startRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startRow", startRow)); // query parameter
            if (batchSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchSize", batchSize)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldGetDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the list of all document ids in the case (ITEMID or BEGDOC values).  On the first call start offset should be 0 or 1, on subsequent calls it should be \&quot;count of results received + 1\&quot;  If you receive less records than the batchsize you sent in (unless you sent in 0) then you are done. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FieldGetDocumentIdsAsync (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null)
        {
             await FieldGetDocumentIdsAsyncWithHttpInfo(caseId, userId, keyField, startRow, batchSize);

        }

        /// <summary>
        /// Get the list of all document ids in the case (ITEMID or BEGDOC values).  On the first call start offset should be 0 or 1, on subsequent calls it should be \&quot;count of results received + 1\&quot;  If you receive less records than the batchsize you sent in (unless you sent in 0) then you are done. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FieldGetDocumentIdsAsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null)
        {

            var localVarPath = "/api/field/documentIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (startRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startRow", startRow)); // query parameter
            if (batchSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchSize", batchSize)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldGetDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a list of document ids (ITEMID or BEGDOC values) for a field that have a certain value.   Specify the desired matching field value or specify null or \&quot;null\&quot; or \&quot;not null\&quot; as special values.  The keyfield can be either \&quot;ITEMID\&quot; or \&quot;BEGDOC\&quot;  On the first call start offset should be 0 or 1, on subsequent calls it should be \&quot;count of results received + 1\&quot;  If you receive less records than the batchsize you sent in (unless you sent in 0) then you are done. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void FieldGetDocumentIds_0 (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, DocumentField body = null)
        {
             FieldGetDocumentIds_0WithHttpInfo(caseId, userId, keyField, startRow, batchSize, body);
        }

        /// <summary>
        /// Get a list of document ids (ITEMID or BEGDOC values) for a field that have a certain value.   Specify the desired matching field value or specify null or \&quot;null\&quot; or \&quot;not null\&quot; as special values.  The keyfield can be either \&quot;ITEMID\&quot; or \&quot;BEGDOC\&quot;  On the first call start offset should be 0 or 1, on subsequent calls it should be \&quot;count of results received + 1\&quot;  If you receive less records than the batchsize you sent in (unless you sent in 0) then you are done. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FieldGetDocumentIds_0WithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, DocumentField body = null)
        {

            var localVarPath = "/api/field/documentIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (startRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startRow", startRow)); // query parameter
            if (batchSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchSize", batchSize)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldGetDocumentIds_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a list of document ids (ITEMID or BEGDOC values) for a field that have a certain value.   Specify the desired matching field value or specify null or \&quot;null\&quot; or \&quot;not null\&quot; as special values.  The keyfield can be either \&quot;ITEMID\&quot; or \&quot;BEGDOC\&quot;  On the first call start offset should be 0 or 1, on subsequent calls it should be \&quot;count of results received + 1\&quot;  If you receive less records than the batchsize you sent in (unless you sent in 0) then you are done. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FieldGetDocumentIds_0Async (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, DocumentField body = null)
        {
             await FieldGetDocumentIds_0AsyncWithHttpInfo(caseId, userId, keyField, startRow, batchSize, body);

        }

        /// <summary>
        /// Get a list of document ids (ITEMID or BEGDOC values) for a field that have a certain value.   Specify the desired matching field value or specify null or \&quot;null\&quot; or \&quot;not null\&quot; as special values.  The keyfield can be either \&quot;ITEMID\&quot; or \&quot;BEGDOC\&quot;  On the first call start offset should be 0 or 1, on subsequent calls it should be \&quot;count of results received + 1\&quot;  If you receive less records than the batchsize you sent in (unless you sent in 0) then you are done. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FieldGetDocumentIds_0AsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, DocumentField body = null)
        {

            var localVarPath = "/api/field/documentIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (startRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startRow", startRow)); // query parameter
            if (batchSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchSize", batchSize)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldGetDocumentIds_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get information about a single field by FIELD ID 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Field</returns>
        public Field FieldGetFieldById (int? id, int? caseId = null)
        {
             ApiResponse<Field> localVarResponse = FieldGetFieldByIdWithHttpInfo(id, caseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about a single field by FIELD ID 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>ApiResponse of Field</returns>
        public ApiResponse< Field > FieldGetFieldByIdWithHttpInfo (int? id, int? caseId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FieldApi->FieldGetFieldById");

            var localVarPath = "/api/field/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldGetFieldById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Field>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Field) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Field)));
        }

        /// <summary>
        /// Get information about a single field by FIELD ID 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of Field</returns>
        public async System.Threading.Tasks.Task<Field> FieldGetFieldByIdAsync (int? id, int? caseId = null)
        {
             ApiResponse<Field> localVarResponse = await FieldGetFieldByIdAsyncWithHttpInfo(id, caseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information about a single field by FIELD ID 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of ApiResponse (Field)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Field>> FieldGetFieldByIdAsyncWithHttpInfo (int? id, int? caseId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FieldApi->FieldGetFieldById");

            var localVarPath = "/api/field/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldGetFieldById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Field>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Field) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Field)));
        }

        /// <summary>
        /// Get information about a single field by name (name as part of the path) 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Field</returns>
        public Field FieldGetFieldByName (string fieldName, int? caseId = null)
        {
             ApiResponse<Field> localVarResponse = FieldGetFieldByNameWithHttpInfo(fieldName, caseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about a single field by name (name as part of the path) 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>ApiResponse of Field</returns>
        public ApiResponse< Field > FieldGetFieldByNameWithHttpInfo (string fieldName, int? caseId = null)
        {
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling FieldApi->FieldGetFieldByName");

            var localVarPath = "/api/field/name/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldGetFieldByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Field>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Field) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Field)));
        }

        /// <summary>
        /// Get information about a single field by name (name as part of the path) 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of Field</returns>
        public async System.Threading.Tasks.Task<Field> FieldGetFieldByNameAsync (string fieldName, int? caseId = null)
        {
             ApiResponse<Field> localVarResponse = await FieldGetFieldByNameAsyncWithHttpInfo(fieldName, caseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information about a single field by name (name as part of the path) 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"></param>
        /// <param name="caseId"> (optional)</param>
        /// <returns>Task of ApiResponse (Field)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Field>> FieldGetFieldByNameAsyncWithHttpInfo (string fieldName, int? caseId = null)
        {
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling FieldApi->FieldGetFieldByName");

            var localVarPath = "/api/field/name/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldGetFieldByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Field>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Field) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Field)));
        }

        /// <summary>
        /// Overlay field values into IMPORT_DOCUMENTS table. Use either FieldId or FieldName to specify the fields to update 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string FieldOverLayFields (int? caseId = null, List<OverLayRequest> body = null)
        {
             ApiResponse<string> localVarResponse = FieldOverLayFieldsWithHttpInfo(caseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Overlay field values into IMPORT_DOCUMENTS table. Use either FieldId or FieldName to specify the fields to update 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > FieldOverLayFieldsWithHttpInfo (int? caseId = null, List<OverLayRequest> body = null)
        {

            var localVarPath = "/api/field/overlay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldOverLayFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Overlay field values into IMPORT_DOCUMENTS table. Use either FieldId or FieldName to specify the fields to update 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> FieldOverLayFieldsAsync (int? caseId = null, List<OverLayRequest> body = null)
        {
             ApiResponse<string> localVarResponse = await FieldOverLayFieldsAsyncWithHttpInfo(caseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Overlay field values into IMPORT_DOCUMENTS table. Use either FieldId or FieldName to specify the fields to update 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> FieldOverLayFieldsAsyncWithHttpInfo (int? caseId = null, List<OverLayRequest> body = null)
        {

            var localVarPath = "/api/field/overlay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldOverLayFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update an existing field by field name or Id in the Field object. Id is used first. If its 0, then the field name is used to lookup the field. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Field</returns>
        public Field FieldUpdateField (int? caseId = null, Field body = null)
        {
             ApiResponse<Field> localVarResponse = FieldUpdateFieldWithHttpInfo(caseId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing field by field name or Id in the Field object. Id is used first. If its 0, then the field name is used to lookup the field. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Field</returns>
        public ApiResponse< Field > FieldUpdateFieldWithHttpInfo (int? caseId = null, Field body = null)
        {

            var localVarPath = "/api/field";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldUpdateField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Field>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Field) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Field)));
        }

        /// <summary>
        /// Update an existing field by field name or Id in the Field object. Id is used first. If its 0, then the field name is used to lookup the field. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Field</returns>
        public async System.Threading.Tasks.Task<Field> FieldUpdateFieldAsync (int? caseId = null, Field body = null)
        {
             ApiResponse<Field> localVarResponse = await FieldUpdateFieldAsyncWithHttpInfo(caseId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing field by field name or Id in the Field object. Id is used first. If its 0, then the field name is used to lookup the field. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Field)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Field>> FieldUpdateFieldAsyncWithHttpInfo (int? caseId = null, Field body = null)
        {

            var localVarPath = "/api/field";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FieldUpdateField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Field>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Field) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Field)));
        }

    }
}
