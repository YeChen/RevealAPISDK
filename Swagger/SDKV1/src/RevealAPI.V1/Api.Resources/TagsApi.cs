/* 
 * Reveal API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using RevealAPI.V1.Client;
using RevealAPI.V1.Models.Resources;

namespace RevealAPI.V1.Api.Resources
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITagsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void TagsAddDocumentIds (int? caseId = null, long? userId = null, string keyField = null, string name = null, bool? ignoreAccessRights = null, List<string> body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TagsAddDocumentIdsWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, string name = null, bool? ignoreAccessRights = null, List<string> body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns></returns>
        void TagsClearDocumentIds (int? caseId = null, long? userId = null, string name = null, bool? ignoreAccessRights = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TagsClearDocumentIdsWithHttpInfo (int? caseId = null, long? userId = null, string name = null, bool? ignoreAccessRights = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="tagSetName"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void TagsCreate (int? caseId = null, long? userId = null, string tagSetName = null, TagCreate body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="tagSetName"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TagsCreateWithHttpInfo (int? caseId = null, long? userId = null, string tagSetName = null, TagCreate body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="tagSetName"> (optional)</param>
        /// <param name="tagName"> (optional)</param>
        /// <returns></returns>
        void TagsDelete (int? caseId = null, long? userId = null, string tagSetName = null, string tagName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="tagSetName"> (optional)</param>
        /// <param name="tagName"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TagsDeleteWithHttpInfo (int? caseId = null, long? userId = null, string tagSetName = null, string tagName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void TagsDeleteDocumentIds (int? caseId = null, long? userId = null, string keyField = null, string name = null, bool? ignoreAccessRights = null, List<string> body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TagsDeleteDocumentIdsWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, string name = null, bool? ignoreAccessRights = null, List<string> body = null);
        /// <summary>
        /// Edit a tag (cannot modify its tag set)  The only things that can be changes are the name, description, and the IsPrivilege flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void TagsEdit (int? caseId = null, long? userId = null, int? id = null, TagCreate body = null);

        /// <summary>
        /// Edit a tag (cannot modify its tag set)  The only things that can be changes are the name, description, and the IsPrivilege flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TagsEditWithHttpInfo (int? caseId = null, long? userId = null, int? id = null, TagCreate body = null);
        /// <summary>
        /// Edit a tag with the ability to change its position in a tag set. The tag name, description, and the IsPrivilege flag can be changed.  The tags parent and display order can be changed in the tag set. It cannot be moved to a different tag set. Specify 0 to not change any tag set info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="tagSetId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void TagsEdit_0 (int? caseId = null, long? userId = null, int? id = null, int? tagSetId = null, TagCreate body = null);

        /// <summary>
        /// Edit a tag with the ability to change its position in a tag set. The tag name, description, and the IsPrivilege flag can be changed.  The tags parent and display order can be changed in the tag set. It cannot be moved to a different tag set. Specify 0 to not change any tag set info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="tagSetId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TagsEdit_0WithHttpInfo (int? caseId = null, long? userId = null, int? id = null, int? tagSetId = null, TagCreate body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns></returns>
        void TagsGet (int? caseId = null, long? userId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TagsGetWithHttpInfo (int? caseId = null, long? userId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns></returns>
        void TagsGetDocumentIds (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, string name = null, bool? ignoreAccessRights = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TagsGetDocumentIdsWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, string name = null, bool? ignoreAccessRights = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void TagsGetDocumentIds_0 (int? caseId = null, long? userId = null, string keyField = null, int? id = null, bool? ignoreAccessRights = null, List<string> body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TagsGetDocumentIds_0WithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? id = null, bool? ignoreAccessRights = null, List<string> body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="reviewedSince"> (optional)</param>
        /// <param name="tagProfileId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns></returns>
        void TagsGetReviewedDocuments (int? caseId = null, string reviewedSince = null, int? tagProfileId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, bool? ignoreAccessRights = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="reviewedSince"> (optional)</param>
        /// <param name="tagProfileId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TagsGetReviewedDocumentsWithHttpInfo (int? caseId = null, string reviewedSince = null, int? tagProfileId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, bool? ignoreAccessRights = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TagsAddDocumentIdsAsync (int? caseId = null, long? userId = null, string keyField = null, string name = null, bool? ignoreAccessRights = null, List<string> body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TagsAddDocumentIdsAsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, string name = null, bool? ignoreAccessRights = null, List<string> body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TagsClearDocumentIdsAsync (int? caseId = null, long? userId = null, string name = null, bool? ignoreAccessRights = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TagsClearDocumentIdsAsyncWithHttpInfo (int? caseId = null, long? userId = null, string name = null, bool? ignoreAccessRights = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="tagSetName"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TagsCreateAsync (int? caseId = null, long? userId = null, string tagSetName = null, TagCreate body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="tagSetName"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TagsCreateAsyncWithHttpInfo (int? caseId = null, long? userId = null, string tagSetName = null, TagCreate body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="tagSetName"> (optional)</param>
        /// <param name="tagName"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TagsDeleteAsync (int? caseId = null, long? userId = null, string tagSetName = null, string tagName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="tagSetName"> (optional)</param>
        /// <param name="tagName"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TagsDeleteAsyncWithHttpInfo (int? caseId = null, long? userId = null, string tagSetName = null, string tagName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TagsDeleteDocumentIdsAsync (int? caseId = null, long? userId = null, string keyField = null, string name = null, bool? ignoreAccessRights = null, List<string> body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TagsDeleteDocumentIdsAsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, string name = null, bool? ignoreAccessRights = null, List<string> body = null);
        /// <summary>
        /// Edit a tag (cannot modify its tag set)  The only things that can be changes are the name, description, and the IsPrivilege flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TagsEditAsync (int? caseId = null, long? userId = null, int? id = null, TagCreate body = null);

        /// <summary>
        /// Edit a tag (cannot modify its tag set)  The only things that can be changes are the name, description, and the IsPrivilege flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TagsEditAsyncWithHttpInfo (int? caseId = null, long? userId = null, int? id = null, TagCreate body = null);
        /// <summary>
        /// Edit a tag with the ability to change its position in a tag set. The tag name, description, and the IsPrivilege flag can be changed.  The tags parent and display order can be changed in the tag set. It cannot be moved to a different tag set. Specify 0 to not change any tag set info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="tagSetId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TagsEdit_0Async (int? caseId = null, long? userId = null, int? id = null, int? tagSetId = null, TagCreate body = null);

        /// <summary>
        /// Edit a tag with the ability to change its position in a tag set. The tag name, description, and the IsPrivilege flag can be changed.  The tags parent and display order can be changed in the tag set. It cannot be moved to a different tag set. Specify 0 to not change any tag set info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="tagSetId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TagsEdit_0AsyncWithHttpInfo (int? caseId = null, long? userId = null, int? id = null, int? tagSetId = null, TagCreate body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TagsGetAsync (int? caseId = null, long? userId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TagsGetAsyncWithHttpInfo (int? caseId = null, long? userId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TagsGetDocumentIdsAsync (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, string name = null, bool? ignoreAccessRights = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TagsGetDocumentIdsAsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, string name = null, bool? ignoreAccessRights = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TagsGetDocumentIds_0Async (int? caseId = null, long? userId = null, string keyField = null, int? id = null, bool? ignoreAccessRights = null, List<string> body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TagsGetDocumentIds_0AsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? id = null, bool? ignoreAccessRights = null, List<string> body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="reviewedSince"> (optional)</param>
        /// <param name="tagProfileId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TagsGetReviewedDocumentsAsync (int? caseId = null, string reviewedSince = null, int? tagProfileId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, bool? ignoreAccessRights = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="reviewedSince"> (optional)</param>
        /// <param name="tagProfileId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TagsGetReviewedDocumentsAsyncWithHttpInfo (int? caseId = null, string reviewedSince = null, int? tagProfileId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, bool? ignoreAccessRights = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TagsApi : ITagsApi
    {
        private RevealAPI.V1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TagsApi(String basePath)
        {
            this.Configuration = new RevealAPI.V1.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RevealAPI.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TagsApi(RevealAPI.V1.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RevealAPI.V1.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RevealAPI.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RevealAPI.V1.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RevealAPI.V1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void TagsAddDocumentIds (int? caseId = null, long? userId = null, string keyField = null, string name = null, bool? ignoreAccessRights = null, List<string> body = null)
        {
             TagsAddDocumentIdsWithHttpInfo(caseId, userId, keyField, name, ignoreAccessRights, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TagsAddDocumentIdsWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, string name = null, bool? ignoreAccessRights = null, List<string> body = null)
        {

            var localVarPath = "/api/tags/documentIds/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (ignoreAccessRights != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreAccessRights", ignoreAccessRights)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsAddDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TagsAddDocumentIdsAsync (int? caseId = null, long? userId = null, string keyField = null, string name = null, bool? ignoreAccessRights = null, List<string> body = null)
        {
             await TagsAddDocumentIdsAsyncWithHttpInfo(caseId, userId, keyField, name, ignoreAccessRights, body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TagsAddDocumentIdsAsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, string name = null, bool? ignoreAccessRights = null, List<string> body = null)
        {

            var localVarPath = "/api/tags/documentIds/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (ignoreAccessRights != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreAccessRights", ignoreAccessRights)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsAddDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns></returns>
        public void TagsClearDocumentIds (int? caseId = null, long? userId = null, string name = null, bool? ignoreAccessRights = null)
        {
             TagsClearDocumentIdsWithHttpInfo(caseId, userId, name, ignoreAccessRights);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TagsClearDocumentIdsWithHttpInfo (int? caseId = null, long? userId = null, string name = null, bool? ignoreAccessRights = null)
        {

            var localVarPath = "/api/tags/documentIds/clear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (ignoreAccessRights != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreAccessRights", ignoreAccessRights)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsClearDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TagsClearDocumentIdsAsync (int? caseId = null, long? userId = null, string name = null, bool? ignoreAccessRights = null)
        {
             await TagsClearDocumentIdsAsyncWithHttpInfo(caseId, userId, name, ignoreAccessRights);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TagsClearDocumentIdsAsyncWithHttpInfo (int? caseId = null, long? userId = null, string name = null, bool? ignoreAccessRights = null)
        {

            var localVarPath = "/api/tags/documentIds/clear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (ignoreAccessRights != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreAccessRights", ignoreAccessRights)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsClearDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="tagSetName"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void TagsCreate (int? caseId = null, long? userId = null, string tagSetName = null, TagCreate body = null)
        {
             TagsCreateWithHttpInfo(caseId, userId, tagSetName, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="tagSetName"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TagsCreateWithHttpInfo (int? caseId = null, long? userId = null, string tagSetName = null, TagCreate body = null)
        {

            var localVarPath = "/api/tags/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (tagSetName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tagSetName", tagSetName)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="tagSetName"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TagsCreateAsync (int? caseId = null, long? userId = null, string tagSetName = null, TagCreate body = null)
        {
             await TagsCreateAsyncWithHttpInfo(caseId, userId, tagSetName, body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="tagSetName"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TagsCreateAsyncWithHttpInfo (int? caseId = null, long? userId = null, string tagSetName = null, TagCreate body = null)
        {

            var localVarPath = "/api/tags/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (tagSetName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tagSetName", tagSetName)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="tagSetName"> (optional)</param>
        /// <param name="tagName"> (optional)</param>
        /// <returns></returns>
        public void TagsDelete (int? caseId = null, long? userId = null, string tagSetName = null, string tagName = null)
        {
             TagsDeleteWithHttpInfo(caseId, userId, tagSetName, tagName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="tagSetName"> (optional)</param>
        /// <param name="tagName"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TagsDeleteWithHttpInfo (int? caseId = null, long? userId = null, string tagSetName = null, string tagName = null)
        {

            var localVarPath = "/api/tags/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (tagSetName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tagSetName", tagSetName)); // query parameter
            if (tagName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tagName", tagName)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="tagSetName"> (optional)</param>
        /// <param name="tagName"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TagsDeleteAsync (int? caseId = null, long? userId = null, string tagSetName = null, string tagName = null)
        {
             await TagsDeleteAsyncWithHttpInfo(caseId, userId, tagSetName, tagName);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="tagSetName"> (optional)</param>
        /// <param name="tagName"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TagsDeleteAsyncWithHttpInfo (int? caseId = null, long? userId = null, string tagSetName = null, string tagName = null)
        {

            var localVarPath = "/api/tags/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (tagSetName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tagSetName", tagSetName)); // query parameter
            if (tagName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tagName", tagName)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void TagsDeleteDocumentIds (int? caseId = null, long? userId = null, string keyField = null, string name = null, bool? ignoreAccessRights = null, List<string> body = null)
        {
             TagsDeleteDocumentIdsWithHttpInfo(caseId, userId, keyField, name, ignoreAccessRights, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TagsDeleteDocumentIdsWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, string name = null, bool? ignoreAccessRights = null, List<string> body = null)
        {

            var localVarPath = "/api/tags/documentIds/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (ignoreAccessRights != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreAccessRights", ignoreAccessRights)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsDeleteDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TagsDeleteDocumentIdsAsync (int? caseId = null, long? userId = null, string keyField = null, string name = null, bool? ignoreAccessRights = null, List<string> body = null)
        {
             await TagsDeleteDocumentIdsAsyncWithHttpInfo(caseId, userId, keyField, name, ignoreAccessRights, body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TagsDeleteDocumentIdsAsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, string name = null, bool? ignoreAccessRights = null, List<string> body = null)
        {

            var localVarPath = "/api/tags/documentIds/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (ignoreAccessRights != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreAccessRights", ignoreAccessRights)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsDeleteDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit a tag (cannot modify its tag set)  The only things that can be changes are the name, description, and the IsPrivilege flag 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void TagsEdit (int? caseId = null, long? userId = null, int? id = null, TagCreate body = null)
        {
             TagsEditWithHttpInfo(caseId, userId, id, body);
        }

        /// <summary>
        /// Edit a tag (cannot modify its tag set)  The only things that can be changes are the name, description, and the IsPrivilege flag 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TagsEditWithHttpInfo (int? caseId = null, long? userId = null, int? id = null, TagCreate body = null)
        {

            var localVarPath = "/api/tags/edit2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsEdit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit a tag (cannot modify its tag set)  The only things that can be changes are the name, description, and the IsPrivilege flag 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TagsEditAsync (int? caseId = null, long? userId = null, int? id = null, TagCreate body = null)
        {
             await TagsEditAsyncWithHttpInfo(caseId, userId, id, body);

        }

        /// <summary>
        /// Edit a tag (cannot modify its tag set)  The only things that can be changes are the name, description, and the IsPrivilege flag 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TagsEditAsyncWithHttpInfo (int? caseId = null, long? userId = null, int? id = null, TagCreate body = null)
        {

            var localVarPath = "/api/tags/edit2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsEdit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit a tag with the ability to change its position in a tag set. The tag name, description, and the IsPrivilege flag can be changed.  The tags parent and display order can be changed in the tag set. It cannot be moved to a different tag set. Specify 0 to not change any tag set info. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="tagSetId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void TagsEdit_0 (int? caseId = null, long? userId = null, int? id = null, int? tagSetId = null, TagCreate body = null)
        {
             TagsEdit_0WithHttpInfo(caseId, userId, id, tagSetId, body);
        }

        /// <summary>
        /// Edit a tag with the ability to change its position in a tag set. The tag name, description, and the IsPrivilege flag can be changed.  The tags parent and display order can be changed in the tag set. It cannot be moved to a different tag set. Specify 0 to not change any tag set info. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="tagSetId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TagsEdit_0WithHttpInfo (int? caseId = null, long? userId = null, int? id = null, int? tagSetId = null, TagCreate body = null)
        {

            var localVarPath = "/api/tags/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (tagSetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tagSetId", tagSetId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsEdit_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit a tag with the ability to change its position in a tag set. The tag name, description, and the IsPrivilege flag can be changed.  The tags parent and display order can be changed in the tag set. It cannot be moved to a different tag set. Specify 0 to not change any tag set info. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="tagSetId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TagsEdit_0Async (int? caseId = null, long? userId = null, int? id = null, int? tagSetId = null, TagCreate body = null)
        {
             await TagsEdit_0AsyncWithHttpInfo(caseId, userId, id, tagSetId, body);

        }

        /// <summary>
        /// Edit a tag with the ability to change its position in a tag set. The tag name, description, and the IsPrivilege flag can be changed.  The tags parent and display order can be changed in the tag set. It cannot be moved to a different tag set. Specify 0 to not change any tag set info. 
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="tagSetId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TagsEdit_0AsyncWithHttpInfo (int? caseId = null, long? userId = null, int? id = null, int? tagSetId = null, TagCreate body = null)
        {

            var localVarPath = "/api/tags/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (tagSetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tagSetId", tagSetId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsEdit_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns></returns>
        public void TagsGet (int? caseId = null, long? userId = null)
        {
             TagsGetWithHttpInfo(caseId, userId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TagsGetWithHttpInfo (int? caseId = null, long? userId = null)
        {

            var localVarPath = "/api/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TagsGetAsync (int? caseId = null, long? userId = null)
        {
             await TagsGetAsyncWithHttpInfo(caseId, userId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TagsGetAsyncWithHttpInfo (int? caseId = null, long? userId = null)
        {

            var localVarPath = "/api/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns></returns>
        public void TagsGetDocumentIds (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, string name = null, bool? ignoreAccessRights = null)
        {
             TagsGetDocumentIdsWithHttpInfo(caseId, userId, keyField, startRow, batchSize, name, ignoreAccessRights);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TagsGetDocumentIdsWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, string name = null, bool? ignoreAccessRights = null)
        {

            var localVarPath = "/api/tags/documentIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (startRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startRow", startRow)); // query parameter
            if (batchSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchSize", batchSize)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (ignoreAccessRights != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreAccessRights", ignoreAccessRights)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsGetDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TagsGetDocumentIdsAsync (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, string name = null, bool? ignoreAccessRights = null)
        {
             await TagsGetDocumentIdsAsyncWithHttpInfo(caseId, userId, keyField, startRow, batchSize, name, ignoreAccessRights);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TagsGetDocumentIdsAsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, string name = null, bool? ignoreAccessRights = null)
        {

            var localVarPath = "/api/tags/documentIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (startRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startRow", startRow)); // query parameter
            if (batchSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchSize", batchSize)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (ignoreAccessRights != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreAccessRights", ignoreAccessRights)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsGetDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void TagsGetDocumentIds_0 (int? caseId = null, long? userId = null, string keyField = null, int? id = null, bool? ignoreAccessRights = null, List<string> body = null)
        {
             TagsGetDocumentIds_0WithHttpInfo(caseId, userId, keyField, id, ignoreAccessRights, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TagsGetDocumentIds_0WithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? id = null, bool? ignoreAccessRights = null, List<string> body = null)
        {

            var localVarPath = "/api/tags/documentIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (ignoreAccessRights != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreAccessRights", ignoreAccessRights)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsGetDocumentIds_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TagsGetDocumentIds_0Async (int? caseId = null, long? userId = null, string keyField = null, int? id = null, bool? ignoreAccessRights = null, List<string> body = null)
        {
             await TagsGetDocumentIds_0AsyncWithHttpInfo(caseId, userId, keyField, id, ignoreAccessRights, body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TagsGetDocumentIds_0AsyncWithHttpInfo (int? caseId = null, long? userId = null, string keyField = null, int? id = null, bool? ignoreAccessRights = null, List<string> body = null)
        {

            var localVarPath = "/api/tags/documentIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (ignoreAccessRights != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreAccessRights", ignoreAccessRights)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsGetDocumentIds_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="reviewedSince"> (optional)</param>
        /// <param name="tagProfileId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns></returns>
        public void TagsGetReviewedDocuments (int? caseId = null, string reviewedSince = null, int? tagProfileId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, bool? ignoreAccessRights = null)
        {
             TagsGetReviewedDocumentsWithHttpInfo(caseId, reviewedSince, tagProfileId, userId, keyField, startRow, batchSize, ignoreAccessRights);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="reviewedSince"> (optional)</param>
        /// <param name="tagProfileId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TagsGetReviewedDocumentsWithHttpInfo (int? caseId = null, string reviewedSince = null, int? tagProfileId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, bool? ignoreAccessRights = null)
        {

            var localVarPath = "/api/tags/documentIds/reviewed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (reviewedSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reviewedSince", reviewedSince)); // query parameter
            if (tagProfileId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tagProfileId", tagProfileId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (startRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startRow", startRow)); // query parameter
            if (batchSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchSize", batchSize)); // query parameter
            if (ignoreAccessRights != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreAccessRights", ignoreAccessRights)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsGetReviewedDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="reviewedSince"> (optional)</param>
        /// <param name="tagProfileId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TagsGetReviewedDocumentsAsync (int? caseId = null, string reviewedSince = null, int? tagProfileId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, bool? ignoreAccessRights = null)
        {
             await TagsGetReviewedDocumentsAsyncWithHttpInfo(caseId, reviewedSince, tagProfileId, userId, keyField, startRow, batchSize, ignoreAccessRights);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="RevealAPI.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId"> (optional)</param>
        /// <param name="reviewedSince"> (optional)</param>
        /// <param name="tagProfileId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="keyField"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="batchSize"> (optional)</param>
        /// <param name="ignoreAccessRights"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TagsGetReviewedDocumentsAsyncWithHttpInfo (int? caseId = null, string reviewedSince = null, int? tagProfileId = null, long? userId = null, string keyField = null, int? startRow = null, int? batchSize = null, bool? ignoreAccessRights = null)
        {

            var localVarPath = "/api/tags/documentIds/reviewed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caseId", caseId)); // query parameter
            if (reviewedSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reviewedSince", reviewedSince)); // query parameter
            if (tagProfileId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tagProfileId", tagProfileId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (keyField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyField", keyField)); // query parameter
            if (startRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startRow", startRow)); // query parameter
            if (batchSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchSize", batchSize)); // query parameter
            if (ignoreAccessRights != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreAccessRights", ignoreAccessRights)); // query parameter

            // authentication (api-token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("InControlAuthToken")))
            {
                localVarHeaderParams["InControlAuthToken"] = this.Configuration.GetApiKeyWithPrefix("InControlAuthToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TagsGetReviewedDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
