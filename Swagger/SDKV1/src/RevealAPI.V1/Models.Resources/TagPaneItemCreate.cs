/* 
 * Reveal API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.V1.Client.SwaggerDateConverter;

namespace RevealAPI.V1.Models.Resources
{
    /// <summary>
    /// TagPaneItemCreate
    /// </summary>
    [DataContract]
    public partial class TagPaneItemCreate :  IEquatable<TagPaneItemCreate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TagPaneItemCreate" /> class.
        /// </summary>
        /// <param name="tagProfileId">tagProfileId.</param>
        /// <param name="tagPaneId">tagPaneId.</param>
        /// <param name="parentId">parentId.</param>
        /// <param name="itemType">itemType.</param>
        /// <param name="tagId">tagId.</param>
        /// <param name="tagSetId">tagSetId.</param>
        /// <param name="fieldName">fieldName.</param>
        /// <param name="fieldLabel">fieldLabel.</param>
        /// <param name="displayOrder">displayOrder.</param>
        /// <param name="isReviewed">isReviewed.</param>
        /// <param name="isDefault">isDefault.</param>
        /// <param name="fieldRequired">fieldRequired.</param>
        /// <param name="selectionRequired">selectionRequired.</param>
        public TagPaneItemCreate(int? tagProfileId = default(int?), int? tagPaneId = default(int?), int? parentId = default(int?), int? itemType = default(int?), int? tagId = default(int?), int? tagSetId = default(int?), string fieldName = default(string), string fieldLabel = default(string), int? displayOrder = default(int?), bool? isReviewed = default(bool?), bool? isDefault = default(bool?), bool? fieldRequired = default(bool?), bool? selectionRequired = default(bool?))
        {
            this.TagProfileId = tagProfileId;
            this.TagPaneId = tagPaneId;
            this.ParentId = parentId;
            this.ItemType = itemType;
            this.TagId = tagId;
            this.TagSetId = tagSetId;
            this.FieldName = fieldName;
            this.FieldLabel = fieldLabel;
            this.DisplayOrder = displayOrder;
            this.IsReviewed = isReviewed;
            this.IsDefault = isDefault;
            this.FieldRequired = fieldRequired;
            this.SelectionRequired = selectionRequired;
        }
        
        /// <summary>
        /// Gets or Sets TagProfileId
        /// </summary>
        [DataMember(Name="tagProfileId", EmitDefaultValue=false)]
        public int? TagProfileId { get; set; }

        /// <summary>
        /// Gets or Sets TagPaneId
        /// </summary>
        [DataMember(Name="tagPaneId", EmitDefaultValue=false)]
        public int? TagPaneId { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public int? ParentId { get; set; }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name="itemType", EmitDefaultValue=false)]
        public int? ItemType { get; set; }

        /// <summary>
        /// Gets or Sets TagId
        /// </summary>
        [DataMember(Name="tagId", EmitDefaultValue=false)]
        public int? TagId { get; set; }

        /// <summary>
        /// Gets or Sets TagSetId
        /// </summary>
        [DataMember(Name="tagSetId", EmitDefaultValue=false)]
        public int? TagSetId { get; set; }

        /// <summary>
        /// Gets or Sets FieldName
        /// </summary>
        [DataMember(Name="fieldName", EmitDefaultValue=false)]
        public string FieldName { get; set; }

        /// <summary>
        /// Gets or Sets FieldLabel
        /// </summary>
        [DataMember(Name="fieldLabel", EmitDefaultValue=false)]
        public string FieldLabel { get; set; }

        /// <summary>
        /// Gets or Sets DisplayOrder
        /// </summary>
        [DataMember(Name="displayOrder", EmitDefaultValue=false)]
        public int? DisplayOrder { get; set; }

        /// <summary>
        /// Gets or Sets IsReviewed
        /// </summary>
        [DataMember(Name="isReviewed", EmitDefaultValue=false)]
        public bool? IsReviewed { get; set; }

        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [DataMember(Name="isDefault", EmitDefaultValue=false)]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// Gets or Sets FieldRequired
        /// </summary>
        [DataMember(Name="fieldRequired", EmitDefaultValue=false)]
        public bool? FieldRequired { get; set; }

        /// <summary>
        /// Gets or Sets SelectionRequired
        /// </summary>
        [DataMember(Name="selectionRequired", EmitDefaultValue=false)]
        public bool? SelectionRequired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TagPaneItemCreate {\n");
            sb.Append("  TagProfileId: ").Append(TagProfileId).Append("\n");
            sb.Append("  TagPaneId: ").Append(TagPaneId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  TagId: ").Append(TagId).Append("\n");
            sb.Append("  TagSetId: ").Append(TagSetId).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  FieldLabel: ").Append(FieldLabel).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  IsReviewed: ").Append(IsReviewed).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  FieldRequired: ").Append(FieldRequired).Append("\n");
            sb.Append("  SelectionRequired: ").Append(SelectionRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TagPaneItemCreate);
        }

        /// <summary>
        /// Returns true if TagPaneItemCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of TagPaneItemCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TagPaneItemCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TagProfileId == input.TagProfileId ||
                    (this.TagProfileId != null &&
                    this.TagProfileId.Equals(input.TagProfileId))
                ) && 
                (
                    this.TagPaneId == input.TagPaneId ||
                    (this.TagPaneId != null &&
                    this.TagPaneId.Equals(input.TagPaneId))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.ItemType == input.ItemType ||
                    (this.ItemType != null &&
                    this.ItemType.Equals(input.ItemType))
                ) && 
                (
                    this.TagId == input.TagId ||
                    (this.TagId != null &&
                    this.TagId.Equals(input.TagId))
                ) && 
                (
                    this.TagSetId == input.TagSetId ||
                    (this.TagSetId != null &&
                    this.TagSetId.Equals(input.TagSetId))
                ) && 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.FieldLabel == input.FieldLabel ||
                    (this.FieldLabel != null &&
                    this.FieldLabel.Equals(input.FieldLabel))
                ) && 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    (this.DisplayOrder != null &&
                    this.DisplayOrder.Equals(input.DisplayOrder))
                ) && 
                (
                    this.IsReviewed == input.IsReviewed ||
                    (this.IsReviewed != null &&
                    this.IsReviewed.Equals(input.IsReviewed))
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    (this.IsDefault != null &&
                    this.IsDefault.Equals(input.IsDefault))
                ) && 
                (
                    this.FieldRequired == input.FieldRequired ||
                    (this.FieldRequired != null &&
                    this.FieldRequired.Equals(input.FieldRequired))
                ) && 
                (
                    this.SelectionRequired == input.SelectionRequired ||
                    (this.SelectionRequired != null &&
                    this.SelectionRequired.Equals(input.SelectionRequired))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TagProfileId != null)
                    hashCode = hashCode * 59 + this.TagProfileId.GetHashCode();
                if (this.TagPaneId != null)
                    hashCode = hashCode * 59 + this.TagPaneId.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                if (this.ItemType != null)
                    hashCode = hashCode * 59 + this.ItemType.GetHashCode();
                if (this.TagId != null)
                    hashCode = hashCode * 59 + this.TagId.GetHashCode();
                if (this.TagSetId != null)
                    hashCode = hashCode * 59 + this.TagSetId.GetHashCode();
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this.FieldLabel != null)
                    hashCode = hashCode * 59 + this.FieldLabel.GetHashCode();
                if (this.DisplayOrder != null)
                    hashCode = hashCode * 59 + this.DisplayOrder.GetHashCode();
                if (this.IsReviewed != null)
                    hashCode = hashCode * 59 + this.IsReviewed.GetHashCode();
                if (this.IsDefault != null)
                    hashCode = hashCode * 59 + this.IsDefault.GetHashCode();
                if (this.FieldRequired != null)
                    hashCode = hashCode * 59 + this.FieldRequired.GetHashCode();
                if (this.SelectionRequired != null)
                    hashCode = hashCode * 59 + this.SelectionRequired.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
