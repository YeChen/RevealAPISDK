/* 
 * Reveal API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.V1.Client.SwaggerDateConverter;

namespace RevealAPI.V1.Models.Resources
{
    /// <summary>
    /// DocumentsRequest
    /// </summary>
    [DataContract]
    public partial class DocumentsRequest :  IEquatable<DocumentsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsRequest" /> class.
        /// </summary>
        /// <param name="keyField">keyField.</param>
        /// <param name="combineDateTimeFields">combineDateTimeFields.</param>
        /// <param name="useFieldNames">useFieldNames.</param>
        /// <param name="fieldProfileName">fieldProfileName.</param>
        /// <param name="documentIds">documentIds.</param>
        /// <param name="documentFields">documentFields.</param>
        /// <param name="maxTextLength">maxTextLength.</param>
        public DocumentsRequest(string keyField = default(string), bool? combineDateTimeFields = default(bool?), bool? useFieldNames = default(bool?), string fieldProfileName = default(string), List<string> documentIds = default(List<string>), List<string> documentFields = default(List<string>), int? maxTextLength = default(int?))
        {
            this.KeyField = keyField;
            this.CombineDateTimeFields = combineDateTimeFields;
            this.UseFieldNames = useFieldNames;
            this.FieldProfileName = fieldProfileName;
            this.DocumentIds = documentIds;
            this.DocumentFields = documentFields;
            this.MaxTextLength = maxTextLength;
        }
        
        /// <summary>
        /// Gets or Sets KeyField
        /// </summary>
        [DataMember(Name="keyField", EmitDefaultValue=false)]
        public string KeyField { get; set; }

        /// <summary>
        /// Gets or Sets CombineDateTimeFields
        /// </summary>
        [DataMember(Name="combineDateTimeFields", EmitDefaultValue=false)]
        public bool? CombineDateTimeFields { get; set; }

        /// <summary>
        /// Gets or Sets UseFieldNames
        /// </summary>
        [DataMember(Name="useFieldNames", EmitDefaultValue=false)]
        public bool? UseFieldNames { get; set; }

        /// <summary>
        /// Gets or Sets FieldProfileName
        /// </summary>
        [DataMember(Name="fieldProfileName", EmitDefaultValue=false)]
        public string FieldProfileName { get; set; }

        /// <summary>
        /// Gets or Sets DocumentIds
        /// </summary>
        [DataMember(Name="documentIds", EmitDefaultValue=false)]
        public List<string> DocumentIds { get; set; }

        /// <summary>
        /// Gets or Sets DocumentFields
        /// </summary>
        [DataMember(Name="documentFields", EmitDefaultValue=false)]
        public List<string> DocumentFields { get; set; }

        /// <summary>
        /// Gets or Sets MaxTextLength
        /// </summary>
        [DataMember(Name="maxTextLength", EmitDefaultValue=false)]
        public int? MaxTextLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentsRequest {\n");
            sb.Append("  KeyField: ").Append(KeyField).Append("\n");
            sb.Append("  CombineDateTimeFields: ").Append(CombineDateTimeFields).Append("\n");
            sb.Append("  UseFieldNames: ").Append(UseFieldNames).Append("\n");
            sb.Append("  FieldProfileName: ").Append(FieldProfileName).Append("\n");
            sb.Append("  DocumentIds: ").Append(DocumentIds).Append("\n");
            sb.Append("  DocumentFields: ").Append(DocumentFields).Append("\n");
            sb.Append("  MaxTextLength: ").Append(MaxTextLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentsRequest);
        }

        /// <summary>
        /// Returns true if DocumentsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KeyField == input.KeyField ||
                    (this.KeyField != null &&
                    this.KeyField.Equals(input.KeyField))
                ) && 
                (
                    this.CombineDateTimeFields == input.CombineDateTimeFields ||
                    (this.CombineDateTimeFields != null &&
                    this.CombineDateTimeFields.Equals(input.CombineDateTimeFields))
                ) && 
                (
                    this.UseFieldNames == input.UseFieldNames ||
                    (this.UseFieldNames != null &&
                    this.UseFieldNames.Equals(input.UseFieldNames))
                ) && 
                (
                    this.FieldProfileName == input.FieldProfileName ||
                    (this.FieldProfileName != null &&
                    this.FieldProfileName.Equals(input.FieldProfileName))
                ) && 
                (
                    this.DocumentIds == input.DocumentIds ||
                    this.DocumentIds != null &&
                    this.DocumentIds.SequenceEqual(input.DocumentIds)
                ) && 
                (
                    this.DocumentFields == input.DocumentFields ||
                    this.DocumentFields != null &&
                    this.DocumentFields.SequenceEqual(input.DocumentFields)
                ) && 
                (
                    this.MaxTextLength == input.MaxTextLength ||
                    (this.MaxTextLength != null &&
                    this.MaxTextLength.Equals(input.MaxTextLength))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KeyField != null)
                    hashCode = hashCode * 59 + this.KeyField.GetHashCode();
                if (this.CombineDateTimeFields != null)
                    hashCode = hashCode * 59 + this.CombineDateTimeFields.GetHashCode();
                if (this.UseFieldNames != null)
                    hashCode = hashCode * 59 + this.UseFieldNames.GetHashCode();
                if (this.FieldProfileName != null)
                    hashCode = hashCode * 59 + this.FieldProfileName.GetHashCode();
                if (this.DocumentIds != null)
                    hashCode = hashCode * 59 + this.DocumentIds.GetHashCode();
                if (this.DocumentFields != null)
                    hashCode = hashCode * 59 + this.DocumentFields.GetHashCode();
                if (this.MaxTextLength != null)
                    hashCode = hashCode * 59 + this.MaxTextLength.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
