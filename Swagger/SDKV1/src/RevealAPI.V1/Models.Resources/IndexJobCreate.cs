/* 
 * Reveal API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.V1.Client.SwaggerDateConverter;

namespace RevealAPI.V1.Models.Resources
{
    /// <summary>
    /// IndexJobCreate
    /// </summary>
    [DataContract]
    public partial class IndexJobCreate :  IEquatable<IndexJobCreate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IndexJobCreate" /> class.
        /// </summary>
        /// <param name="jobName">jobName.</param>
        /// <param name="createdByUser">createdByUser.</param>
        /// <param name="importFileNames">importFileNames.</param>
        /// <param name="keyField">keyField.</param>
        /// <param name="documentIds">documentIds.</param>
        /// <param name="textSetIds">textSetIds.</param>
        /// <param name="notifications">notifications.</param>
        /// <param name="priority">priority.</param>
        /// <param name="workFolderIds">workFolderIds.</param>
        /// <param name="metadataFields">metadataFields.</param>
        public IndexJobCreate(string jobName = default(string), long? createdByUser = default(long?), List<string> importFileNames = default(List<string>), string keyField = default(string), List<string> documentIds = default(List<string>), List<int?> textSetIds = default(List<int?>), List<IndexJobNotification> notifications = default(List<IndexJobNotification>), int? priority = default(int?), List<int?> workFolderIds = default(List<int?>), List<string> metadataFields = default(List<string>))
        {
            this.JobName = jobName;
            this.CreatedByUser = createdByUser;
            this.ImportFileNames = importFileNames;
            this.KeyField = keyField;
            this.DocumentIds = documentIds;
            this.TextSetIds = textSetIds;
            this.Notifications = notifications;
            this.Priority = priority;
            this.WorkFolderIds = workFolderIds;
            this.MetadataFields = metadataFields;
        }
        
        /// <summary>
        /// Gets or Sets JobName
        /// </summary>
        [DataMember(Name="jobName", EmitDefaultValue=false)]
        public string JobName { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUser
        /// </summary>
        [DataMember(Name="createdByUser", EmitDefaultValue=false)]
        public long? CreatedByUser { get; set; }

        /// <summary>
        /// Gets or Sets ImportFileNames
        /// </summary>
        [DataMember(Name="importFileNames", EmitDefaultValue=false)]
        public List<string> ImportFileNames { get; set; }

        /// <summary>
        /// Gets or Sets KeyField
        /// </summary>
        [DataMember(Name="keyField", EmitDefaultValue=false)]
        public string KeyField { get; set; }

        /// <summary>
        /// Gets or Sets DocumentIds
        /// </summary>
        [DataMember(Name="documentIds", EmitDefaultValue=false)]
        public List<string> DocumentIds { get; set; }

        /// <summary>
        /// Gets or Sets TextSetIds
        /// </summary>
        [DataMember(Name="textSetIds", EmitDefaultValue=false)]
        public List<int?> TextSetIds { get; set; }

        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [DataMember(Name="notifications", EmitDefaultValue=false)]
        public List<IndexJobNotification> Notifications { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }

        /// <summary>
        /// Gets or Sets WorkFolderIds
        /// </summary>
        [DataMember(Name="workFolderIds", EmitDefaultValue=false)]
        public List<int?> WorkFolderIds { get; set; }

        /// <summary>
        /// Gets or Sets MetadataFields
        /// </summary>
        [DataMember(Name="metadataFields", EmitDefaultValue=false)]
        public List<string> MetadataFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IndexJobCreate {\n");
            sb.Append("  JobName: ").Append(JobName).Append("\n");
            sb.Append("  CreatedByUser: ").Append(CreatedByUser).Append("\n");
            sb.Append("  ImportFileNames: ").Append(ImportFileNames).Append("\n");
            sb.Append("  KeyField: ").Append(KeyField).Append("\n");
            sb.Append("  DocumentIds: ").Append(DocumentIds).Append("\n");
            sb.Append("  TextSetIds: ").Append(TextSetIds).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  WorkFolderIds: ").Append(WorkFolderIds).Append("\n");
            sb.Append("  MetadataFields: ").Append(MetadataFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IndexJobCreate);
        }

        /// <summary>
        /// Returns true if IndexJobCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of IndexJobCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IndexJobCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JobName == input.JobName ||
                    (this.JobName != null &&
                    this.JobName.Equals(input.JobName))
                ) && 
                (
                    this.CreatedByUser == input.CreatedByUser ||
                    (this.CreatedByUser != null &&
                    this.CreatedByUser.Equals(input.CreatedByUser))
                ) && 
                (
                    this.ImportFileNames == input.ImportFileNames ||
                    this.ImportFileNames != null &&
                    this.ImportFileNames.SequenceEqual(input.ImportFileNames)
                ) && 
                (
                    this.KeyField == input.KeyField ||
                    (this.KeyField != null &&
                    this.KeyField.Equals(input.KeyField))
                ) && 
                (
                    this.DocumentIds == input.DocumentIds ||
                    this.DocumentIds != null &&
                    this.DocumentIds.SequenceEqual(input.DocumentIds)
                ) && 
                (
                    this.TextSetIds == input.TextSetIds ||
                    this.TextSetIds != null &&
                    this.TextSetIds.SequenceEqual(input.TextSetIds)
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    this.Notifications != null &&
                    this.Notifications.SequenceEqual(input.Notifications)
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.WorkFolderIds == input.WorkFolderIds ||
                    this.WorkFolderIds != null &&
                    this.WorkFolderIds.SequenceEqual(input.WorkFolderIds)
                ) && 
                (
                    this.MetadataFields == input.MetadataFields ||
                    this.MetadataFields != null &&
                    this.MetadataFields.SequenceEqual(input.MetadataFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobName != null)
                    hashCode = hashCode * 59 + this.JobName.GetHashCode();
                if (this.CreatedByUser != null)
                    hashCode = hashCode * 59 + this.CreatedByUser.GetHashCode();
                if (this.ImportFileNames != null)
                    hashCode = hashCode * 59 + this.ImportFileNames.GetHashCode();
                if (this.KeyField != null)
                    hashCode = hashCode * 59 + this.KeyField.GetHashCode();
                if (this.DocumentIds != null)
                    hashCode = hashCode * 59 + this.DocumentIds.GetHashCode();
                if (this.TextSetIds != null)
                    hashCode = hashCode * 59 + this.TextSetIds.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.WorkFolderIds != null)
                    hashCode = hashCode * 59 + this.WorkFolderIds.GetHashCode();
                if (this.MetadataFields != null)
                    hashCode = hashCode * 59 + this.MetadataFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
