/* 
 * Reveal API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.V1.Client.SwaggerDateConverter;

namespace RevealAPI.V1.Models.Resources
{
    /// <summary>
    /// UploadJobUpdate
    /// </summary>
    [DataContract]
    public partial class UploadJobUpdate :  IEquatable<UploadJobUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadJobUpdate" /> class.
        /// </summary>
        /// <param name="jobId">jobId.</param>
        /// <param name="documentsExtracted">documentsExtracted.</param>
        /// <param name="documentsLoaded">documentsLoaded.</param>
        /// <param name="status">status.</param>
        /// <param name="statusText">statusText.</param>
        /// <param name="manifestJson">manifestJson.</param>
        /// <param name="workflow">workflow.</param>
        /// <param name="duplicateDocuments">duplicateDocuments.</param>
        public UploadJobUpdate(Guid? jobId = default(Guid?), long? documentsExtracted = default(long?), long? documentsLoaded = default(long?), string status = default(string), string statusText = default(string), string manifestJson = default(string), string workflow = default(string), bool? duplicateDocuments = default(bool?))
        {
            this.JobId = jobId;
            this.DocumentsExtracted = documentsExtracted;
            this.DocumentsLoaded = documentsLoaded;
            this.Status = status;
            this.StatusText = statusText;
            this.ManifestJson = manifestJson;
            this.Workflow = workflow;
            this.DuplicateDocuments = duplicateDocuments;
        }
        
        /// <summary>
        /// Gets or Sets JobId
        /// </summary>
        [DataMember(Name="job_Id", EmitDefaultValue=false)]
        public Guid? JobId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentsExtracted
        /// </summary>
        [DataMember(Name="documents_Extracted", EmitDefaultValue=false)]
        public long? DocumentsExtracted { get; set; }

        /// <summary>
        /// Gets or Sets DocumentsLoaded
        /// </summary>
        [DataMember(Name="documents_Loaded", EmitDefaultValue=false)]
        public long? DocumentsLoaded { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusText
        /// </summary>
        [DataMember(Name="status_text", EmitDefaultValue=false)]
        public string StatusText { get; set; }

        /// <summary>
        /// Gets or Sets ManifestJson
        /// </summary>
        [DataMember(Name="manifest_json", EmitDefaultValue=false)]
        public string ManifestJson { get; set; }

        /// <summary>
        /// Gets or Sets Workflow
        /// </summary>
        [DataMember(Name="workflow", EmitDefaultValue=false)]
        public string Workflow { get; set; }

        /// <summary>
        /// Gets or Sets DuplicateDocuments
        /// </summary>
        [DataMember(Name="duplicate_Documents", EmitDefaultValue=false)]
        public bool? DuplicateDocuments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UploadJobUpdate {\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  DocumentsExtracted: ").Append(DocumentsExtracted).Append("\n");
            sb.Append("  DocumentsLoaded: ").Append(DocumentsLoaded).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusText: ").Append(StatusText).Append("\n");
            sb.Append("  ManifestJson: ").Append(ManifestJson).Append("\n");
            sb.Append("  Workflow: ").Append(Workflow).Append("\n");
            sb.Append("  DuplicateDocuments: ").Append(DuplicateDocuments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadJobUpdate);
        }

        /// <summary>
        /// Returns true if UploadJobUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadJobUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadJobUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JobId == input.JobId ||
                    (this.JobId != null &&
                    this.JobId.Equals(input.JobId))
                ) && 
                (
                    this.DocumentsExtracted == input.DocumentsExtracted ||
                    (this.DocumentsExtracted != null &&
                    this.DocumentsExtracted.Equals(input.DocumentsExtracted))
                ) && 
                (
                    this.DocumentsLoaded == input.DocumentsLoaded ||
                    (this.DocumentsLoaded != null &&
                    this.DocumentsLoaded.Equals(input.DocumentsLoaded))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusText == input.StatusText ||
                    (this.StatusText != null &&
                    this.StatusText.Equals(input.StatusText))
                ) && 
                (
                    this.ManifestJson == input.ManifestJson ||
                    (this.ManifestJson != null &&
                    this.ManifestJson.Equals(input.ManifestJson))
                ) && 
                (
                    this.Workflow == input.Workflow ||
                    (this.Workflow != null &&
                    this.Workflow.Equals(input.Workflow))
                ) && 
                (
                    this.DuplicateDocuments == input.DuplicateDocuments ||
                    (this.DuplicateDocuments != null &&
                    this.DuplicateDocuments.Equals(input.DuplicateDocuments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobId != null)
                    hashCode = hashCode * 59 + this.JobId.GetHashCode();
                if (this.DocumentsExtracted != null)
                    hashCode = hashCode * 59 + this.DocumentsExtracted.GetHashCode();
                if (this.DocumentsLoaded != null)
                    hashCode = hashCode * 59 + this.DocumentsLoaded.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusText != null)
                    hashCode = hashCode * 59 + this.StatusText.GetHashCode();
                if (this.ManifestJson != null)
                    hashCode = hashCode * 59 + this.ManifestJson.GetHashCode();
                if (this.Workflow != null)
                    hashCode = hashCode * 59 + this.Workflow.GetHashCode();
                if (this.DuplicateDocuments != null)
                    hashCode = hashCode * 59 + this.DuplicateDocuments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
