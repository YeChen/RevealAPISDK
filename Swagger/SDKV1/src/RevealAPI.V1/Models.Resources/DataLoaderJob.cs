/* 
 * Reveal API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.V1.Client.SwaggerDateConverter;

namespace RevealAPI.V1.Models.Resources
{
    /// <summary>
    /// DataLoaderJob
    /// </summary>
    [DataContract]
    public partial class DataLoaderJob :  IEquatable<DataLoaderJob>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public JobStatusType? Status { get; set; }
        /// <summary>
        /// Gets or Sets JobType
        /// </summary>
        [DataMember(Name="jobType", EmitDefaultValue=false)]
        public DocumentLoaderJobType? JobType { get; set; }
        /// <summary>
        /// Gets or Sets CurrentTask
        /// </summary>
        [DataMember(Name="currentTask", EmitDefaultValue=false)]
        public DocumentLoaderCurrentTaskType? CurrentTask { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataLoaderJob" /> class.
        /// </summary>
        /// <param name="errorList">errorList.</param>
        /// <param name="jobId">jobId.</param>
        /// <param name="jobName">jobName.</param>
        /// <param name="beginNumber">beginNumber.</param>
        /// <param name="endNumber">endNumber.</param>
        /// <param name="status">status.</param>
        /// <param name="totalDocuments">totalDocuments.</param>
        /// <param name="progress">progress.</param>
        /// <param name="startedDateTime">startedDateTime.</param>
        /// <param name="endedDateTime">endedDateTime.</param>
        /// <param name="documentsProcessed">documentsProcessed.</param>
        /// <param name="processingErrors">processingErrors.</param>
        /// <param name="jobType">jobType.</param>
        /// <param name="currentTask">currentTask.</param>
        /// <param name="caseId">caseId.</param>
        /// <param name="loadFileName">loadFileName.</param>
        public DataLoaderJob(List<DataLoaderError> errorList = default(List<DataLoaderError>), int? jobId = default(int?), string jobName = default(string), string beginNumber = default(string), string endNumber = default(string), JobStatusType? status = default(JobStatusType?), int? totalDocuments = default(int?), int? progress = default(int?), DateTime? startedDateTime = default(DateTime?), DateTime? endedDateTime = default(DateTime?), int? documentsProcessed = default(int?), int? processingErrors = default(int?), DocumentLoaderJobType? jobType = default(DocumentLoaderJobType?), DocumentLoaderCurrentTaskType? currentTask = default(DocumentLoaderCurrentTaskType?), int? caseId = default(int?), string loadFileName = default(string))
        {
            this.ErrorList = errorList;
            this.JobId = jobId;
            this.JobName = jobName;
            this.BeginNumber = beginNumber;
            this.EndNumber = endNumber;
            this.Status = status;
            this.TotalDocuments = totalDocuments;
            this.Progress = progress;
            this.StartedDateTime = startedDateTime;
            this.EndedDateTime = endedDateTime;
            this.DocumentsProcessed = documentsProcessed;
            this.ProcessingErrors = processingErrors;
            this.JobType = jobType;
            this.CurrentTask = currentTask;
            this.CaseId = caseId;
            this.LoadFileName = loadFileName;
        }
        
        /// <summary>
        /// Gets or Sets ErrorList
        /// </summary>
        [DataMember(Name="errorList", EmitDefaultValue=false)]
        public List<DataLoaderError> ErrorList { get; set; }

        /// <summary>
        /// Gets or Sets JobId
        /// </summary>
        [DataMember(Name="jobId", EmitDefaultValue=false)]
        public int? JobId { get; set; }

        /// <summary>
        /// Gets or Sets JobName
        /// </summary>
        [DataMember(Name="jobName", EmitDefaultValue=false)]
        public string JobName { get; set; }

        /// <summary>
        /// Gets or Sets BeginNumber
        /// </summary>
        [DataMember(Name="beginNumber", EmitDefaultValue=false)]
        public string BeginNumber { get; set; }

        /// <summary>
        /// Gets or Sets EndNumber
        /// </summary>
        [DataMember(Name="endNumber", EmitDefaultValue=false)]
        public string EndNumber { get; set; }


        /// <summary>
        /// Gets or Sets TotalDocuments
        /// </summary>
        [DataMember(Name="totalDocuments", EmitDefaultValue=false)]
        public int? TotalDocuments { get; set; }

        /// <summary>
        /// Gets or Sets Progress
        /// </summary>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public int? Progress { get; set; }

        /// <summary>
        /// Gets or Sets StartedDateTime
        /// </summary>
        [DataMember(Name="startedDateTime", EmitDefaultValue=false)]
        public DateTime? StartedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets EndedDateTime
        /// </summary>
        [DataMember(Name="endedDateTime", EmitDefaultValue=false)]
        public DateTime? EndedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets DocumentsProcessed
        /// </summary>
        [DataMember(Name="documentsProcessed", EmitDefaultValue=false)]
        public int? DocumentsProcessed { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingErrors
        /// </summary>
        [DataMember(Name="processingErrors", EmitDefaultValue=false)]
        public int? ProcessingErrors { get; set; }



        /// <summary>
        /// Gets or Sets CaseId
        /// </summary>
        [DataMember(Name="caseId", EmitDefaultValue=false)]
        public int? CaseId { get; set; }

        /// <summary>
        /// Gets or Sets LoadFileName
        /// </summary>
        [DataMember(Name="loadFileName", EmitDefaultValue=false)]
        public string LoadFileName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataLoaderJob {\n");
            sb.Append("  ErrorList: ").Append(ErrorList).Append("\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  JobName: ").Append(JobName).Append("\n");
            sb.Append("  BeginNumber: ").Append(BeginNumber).Append("\n");
            sb.Append("  EndNumber: ").Append(EndNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TotalDocuments: ").Append(TotalDocuments).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  StartedDateTime: ").Append(StartedDateTime).Append("\n");
            sb.Append("  EndedDateTime: ").Append(EndedDateTime).Append("\n");
            sb.Append("  DocumentsProcessed: ").Append(DocumentsProcessed).Append("\n");
            sb.Append("  ProcessingErrors: ").Append(ProcessingErrors).Append("\n");
            sb.Append("  JobType: ").Append(JobType).Append("\n");
            sb.Append("  CurrentTask: ").Append(CurrentTask).Append("\n");
            sb.Append("  CaseId: ").Append(CaseId).Append("\n");
            sb.Append("  LoadFileName: ").Append(LoadFileName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataLoaderJob);
        }

        /// <summary>
        /// Returns true if DataLoaderJob instances are equal
        /// </summary>
        /// <param name="input">Instance of DataLoaderJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataLoaderJob input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ErrorList == input.ErrorList ||
                    this.ErrorList != null &&
                    this.ErrorList.SequenceEqual(input.ErrorList)
                ) && 
                (
                    this.JobId == input.JobId ||
                    (this.JobId != null &&
                    this.JobId.Equals(input.JobId))
                ) && 
                (
                    this.JobName == input.JobName ||
                    (this.JobName != null &&
                    this.JobName.Equals(input.JobName))
                ) && 
                (
                    this.BeginNumber == input.BeginNumber ||
                    (this.BeginNumber != null &&
                    this.BeginNumber.Equals(input.BeginNumber))
                ) && 
                (
                    this.EndNumber == input.EndNumber ||
                    (this.EndNumber != null &&
                    this.EndNumber.Equals(input.EndNumber))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TotalDocuments == input.TotalDocuments ||
                    (this.TotalDocuments != null &&
                    this.TotalDocuments.Equals(input.TotalDocuments))
                ) && 
                (
                    this.Progress == input.Progress ||
                    (this.Progress != null &&
                    this.Progress.Equals(input.Progress))
                ) && 
                (
                    this.StartedDateTime == input.StartedDateTime ||
                    (this.StartedDateTime != null &&
                    this.StartedDateTime.Equals(input.StartedDateTime))
                ) && 
                (
                    this.EndedDateTime == input.EndedDateTime ||
                    (this.EndedDateTime != null &&
                    this.EndedDateTime.Equals(input.EndedDateTime))
                ) && 
                (
                    this.DocumentsProcessed == input.DocumentsProcessed ||
                    (this.DocumentsProcessed != null &&
                    this.DocumentsProcessed.Equals(input.DocumentsProcessed))
                ) && 
                (
                    this.ProcessingErrors == input.ProcessingErrors ||
                    (this.ProcessingErrors != null &&
                    this.ProcessingErrors.Equals(input.ProcessingErrors))
                ) && 
                (
                    this.JobType == input.JobType ||
                    (this.JobType != null &&
                    this.JobType.Equals(input.JobType))
                ) && 
                (
                    this.CurrentTask == input.CurrentTask ||
                    (this.CurrentTask != null &&
                    this.CurrentTask.Equals(input.CurrentTask))
                ) && 
                (
                    this.CaseId == input.CaseId ||
                    (this.CaseId != null &&
                    this.CaseId.Equals(input.CaseId))
                ) && 
                (
                    this.LoadFileName == input.LoadFileName ||
                    (this.LoadFileName != null &&
                    this.LoadFileName.Equals(input.LoadFileName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ErrorList != null)
                    hashCode = hashCode * 59 + this.ErrorList.GetHashCode();
                if (this.JobId != null)
                    hashCode = hashCode * 59 + this.JobId.GetHashCode();
                if (this.JobName != null)
                    hashCode = hashCode * 59 + this.JobName.GetHashCode();
                if (this.BeginNumber != null)
                    hashCode = hashCode * 59 + this.BeginNumber.GetHashCode();
                if (this.EndNumber != null)
                    hashCode = hashCode * 59 + this.EndNumber.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TotalDocuments != null)
                    hashCode = hashCode * 59 + this.TotalDocuments.GetHashCode();
                if (this.Progress != null)
                    hashCode = hashCode * 59 + this.Progress.GetHashCode();
                if (this.StartedDateTime != null)
                    hashCode = hashCode * 59 + this.StartedDateTime.GetHashCode();
                if (this.EndedDateTime != null)
                    hashCode = hashCode * 59 + this.EndedDateTime.GetHashCode();
                if (this.DocumentsProcessed != null)
                    hashCode = hashCode * 59 + this.DocumentsProcessed.GetHashCode();
                if (this.ProcessingErrors != null)
                    hashCode = hashCode * 59 + this.ProcessingErrors.GetHashCode();
                if (this.JobType != null)
                    hashCode = hashCode * 59 + this.JobType.GetHashCode();
                if (this.CurrentTask != null)
                    hashCode = hashCode * 59 + this.CurrentTask.GetHashCode();
                if (this.CaseId != null)
                    hashCode = hashCode * 59 + this.CaseId.GetHashCode();
                if (this.LoadFileName != null)
                    hashCode = hashCode * 59 + this.LoadFileName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
