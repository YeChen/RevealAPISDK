/* 
 * Reveal API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.V1.Client.SwaggerDateConverter;

namespace RevealAPI.V1.Models.Resources
{
    /// <summary>
    /// FieldMapping
    /// </summary>
    [DataContract]
    public partial class FieldMapping :  IEquatable<FieldMapping>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldMapping" /> class.
        /// </summary>
        /// <param name="mappingId">mappingId.</param>
        /// <param name="mappingName">mappingName.</param>
        public FieldMapping(int? mappingId = default(int?), string mappingName = default(string))
        {
            this.MappingId = mappingId;
            this.MappingName = mappingName;
        }
        
        /// <summary>
        /// Gets or Sets MappingId
        /// </summary>
        [DataMember(Name="mappingId", EmitDefaultValue=false)]
        public int? MappingId { get; set; }

        /// <summary>
        /// Gets or Sets MappingName
        /// </summary>
        [DataMember(Name="mappingName", EmitDefaultValue=false)]
        public string MappingName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldMapping {\n");
            sb.Append("  MappingId: ").Append(MappingId).Append("\n");
            sb.Append("  MappingName: ").Append(MappingName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FieldMapping);
        }

        /// <summary>
        /// Returns true if FieldMapping instances are equal
        /// </summary>
        /// <param name="input">Instance of FieldMapping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldMapping input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MappingId == input.MappingId ||
                    (this.MappingId != null &&
                    this.MappingId.Equals(input.MappingId))
                ) && 
                (
                    this.MappingName == input.MappingName ||
                    (this.MappingName != null &&
                    this.MappingName.Equals(input.MappingName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MappingId != null)
                    hashCode = hashCode * 59 + this.MappingId.GetHashCode();
                if (this.MappingName != null)
                    hashCode = hashCode * 59 + this.MappingName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
