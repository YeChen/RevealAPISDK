/* 
 * Reveal API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.V1.Client.SwaggerDateConverter;

namespace RevealAPI.V1.Models.Resources
{
    /// <summary>
    /// IndexingError
    /// </summary>
    [DataContract]
    public partial class IndexingError :  IEquatable<IndexingError>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IndexingError" /> class.
        /// </summary>
        /// <param name="textSetName">textSetName.</param>
        /// <param name="itemId">itemId.</param>
        /// <param name="begdoc">begdoc.</param>
        /// <param name="fileName">fileName.</param>
        /// <param name="convertError">convertError.</param>
        /// <param name="indexError">indexError.</param>
        public IndexingError(string textSetName = default(string), long? itemId = default(long?), string begdoc = default(string), string fileName = default(string), string convertError = default(string), string indexError = default(string))
        {
            this.TextSetName = textSetName;
            this.ItemId = itemId;
            this.Begdoc = begdoc;
            this.FileName = fileName;
            this.ConvertError = convertError;
            this.IndexError = indexError;
        }
        
        /// <summary>
        /// Gets or Sets TextSetName
        /// </summary>
        [DataMember(Name="textSetName", EmitDefaultValue=false)]
        public string TextSetName { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="itemId", EmitDefaultValue=false)]
        public long? ItemId { get; set; }

        /// <summary>
        /// Gets or Sets Begdoc
        /// </summary>
        [DataMember(Name="begdoc", EmitDefaultValue=false)]
        public string Begdoc { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets ConvertError
        /// </summary>
        [DataMember(Name="convertError", EmitDefaultValue=false)]
        public string ConvertError { get; set; }

        /// <summary>
        /// Gets or Sets IndexError
        /// </summary>
        [DataMember(Name="indexError", EmitDefaultValue=false)]
        public string IndexError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IndexingError {\n");
            sb.Append("  TextSetName: ").Append(TextSetName).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Begdoc: ").Append(Begdoc).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  ConvertError: ").Append(ConvertError).Append("\n");
            sb.Append("  IndexError: ").Append(IndexError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IndexingError);
        }

        /// <summary>
        /// Returns true if IndexingError instances are equal
        /// </summary>
        /// <param name="input">Instance of IndexingError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IndexingError input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TextSetName == input.TextSetName ||
                    (this.TextSetName != null &&
                    this.TextSetName.Equals(input.TextSetName))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.Begdoc == input.Begdoc ||
                    (this.Begdoc != null &&
                    this.Begdoc.Equals(input.Begdoc))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.ConvertError == input.ConvertError ||
                    (this.ConvertError != null &&
                    this.ConvertError.Equals(input.ConvertError))
                ) && 
                (
                    this.IndexError == input.IndexError ||
                    (this.IndexError != null &&
                    this.IndexError.Equals(input.IndexError))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TextSetName != null)
                    hashCode = hashCode * 59 + this.TextSetName.GetHashCode();
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.Begdoc != null)
                    hashCode = hashCode * 59 + this.Begdoc.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.ConvertError != null)
                    hashCode = hashCode * 59 + this.ConvertError.GetHashCode();
                if (this.IndexError != null)
                    hashCode = hashCode * 59 + this.IndexError.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
