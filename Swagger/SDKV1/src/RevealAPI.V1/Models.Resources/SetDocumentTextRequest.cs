/* 
 * Reveal API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.V1.Client.SwaggerDateConverter;

namespace RevealAPI.V1.Models.Resources
{
    /// <summary>
    /// SetDocumentTextRequest
    /// </summary>
    [DataContract]
    public partial class SetDocumentTextRequest :  IEquatable<SetDocumentTextRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetDocumentTextRequest" /> class.
        /// </summary>
        /// <param name="docId">docId.</param>
        /// <param name="documentTextSetId">documentTextSetId.</param>
        /// <param name="documentText">documentText.</param>
        public SetDocumentTextRequest(string docId = default(string), int? documentTextSetId = default(int?), string documentText = default(string))
        {
            this.DocId = docId;
            this.DocumentTextSetId = documentTextSetId;
            this.DocumentText = documentText;
        }
        
        /// <summary>
        /// Gets or Sets DocId
        /// </summary>
        [DataMember(Name="docId", EmitDefaultValue=false)]
        public string DocId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentTextSetId
        /// </summary>
        [DataMember(Name="documentTextSetId", EmitDefaultValue=false)]
        public int? DocumentTextSetId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentText
        /// </summary>
        [DataMember(Name="documentText", EmitDefaultValue=false)]
        public string DocumentText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetDocumentTextRequest {\n");
            sb.Append("  DocId: ").Append(DocId).Append("\n");
            sb.Append("  DocumentTextSetId: ").Append(DocumentTextSetId).Append("\n");
            sb.Append("  DocumentText: ").Append(DocumentText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetDocumentTextRequest);
        }

        /// <summary>
        /// Returns true if SetDocumentTextRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SetDocumentTextRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetDocumentTextRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocId == input.DocId ||
                    (this.DocId != null &&
                    this.DocId.Equals(input.DocId))
                ) && 
                (
                    this.DocumentTextSetId == input.DocumentTextSetId ||
                    (this.DocumentTextSetId != null &&
                    this.DocumentTextSetId.Equals(input.DocumentTextSetId))
                ) && 
                (
                    this.DocumentText == input.DocumentText ||
                    (this.DocumentText != null &&
                    this.DocumentText.Equals(input.DocumentText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocId != null)
                    hashCode = hashCode * 59 + this.DocId.GetHashCode();
                if (this.DocumentTextSetId != null)
                    hashCode = hashCode * 59 + this.DocumentTextSetId.GetHashCode();
                if (this.DocumentText != null)
                    hashCode = hashCode * 59 + this.DocumentText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
