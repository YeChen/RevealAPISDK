/* 
 * Reveal API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.V1.Client.SwaggerDateConverter;

namespace RevealAPI.V1.Models.Resources
{
    /// <summary>
    /// FieldMappingField
    /// </summary>
    [DataContract]
    public partial class FieldMappingField :  IEquatable<FieldMappingField>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldMappingField" /> class.
        /// </summary>
        /// <param name="fieldId">fieldId.</param>
        /// <param name="fieldName">fieldName.</param>
        /// <param name="fieldOrderInImportFile">fieldOrderInImportFile.</param>
        /// <param name="fieldReferenceInImportFile">fieldReferenceInImportFile.</param>
        /// <param name="templateField">templateField.</param>
        /// <param name="templateAutoField">templateAutoField.</param>
        public FieldMappingField(int? fieldId = default(int?), string fieldName = default(string), int? fieldOrderInImportFile = default(int?), int? fieldReferenceInImportFile = default(int?), string templateField = default(string), string templateAutoField = default(string))
        {
            this.FieldId = fieldId;
            this.FieldName = fieldName;
            this.FieldOrderInImportFile = fieldOrderInImportFile;
            this.FieldReferenceInImportFile = fieldReferenceInImportFile;
            this.TemplateField = templateField;
            this.TemplateAutoField = templateAutoField;
        }
        
        /// <summary>
        /// Gets or Sets FieldId
        /// </summary>
        [DataMember(Name="fieldId", EmitDefaultValue=false)]
        public int? FieldId { get; set; }

        /// <summary>
        /// Gets or Sets FieldName
        /// </summary>
        [DataMember(Name="fieldName", EmitDefaultValue=false)]
        public string FieldName { get; set; }

        /// <summary>
        /// Gets or Sets FieldOrderInImportFile
        /// </summary>
        [DataMember(Name="fieldOrderInImportFile", EmitDefaultValue=false)]
        public int? FieldOrderInImportFile { get; set; }

        /// <summary>
        /// Gets or Sets FieldReferenceInImportFile
        /// </summary>
        [DataMember(Name="fieldReferenceInImportFile", EmitDefaultValue=false)]
        public int? FieldReferenceInImportFile { get; set; }

        /// <summary>
        /// Gets or Sets TemplateField
        /// </summary>
        [DataMember(Name="templateField", EmitDefaultValue=false)]
        public string TemplateField { get; set; }

        /// <summary>
        /// Gets or Sets TemplateAutoField
        /// </summary>
        [DataMember(Name="templateAutoField", EmitDefaultValue=false)]
        public string TemplateAutoField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldMappingField {\n");
            sb.Append("  FieldId: ").Append(FieldId).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  FieldOrderInImportFile: ").Append(FieldOrderInImportFile).Append("\n");
            sb.Append("  FieldReferenceInImportFile: ").Append(FieldReferenceInImportFile).Append("\n");
            sb.Append("  TemplateField: ").Append(TemplateField).Append("\n");
            sb.Append("  TemplateAutoField: ").Append(TemplateAutoField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FieldMappingField);
        }

        /// <summary>
        /// Returns true if FieldMappingField instances are equal
        /// </summary>
        /// <param name="input">Instance of FieldMappingField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldMappingField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FieldId == input.FieldId ||
                    (this.FieldId != null &&
                    this.FieldId.Equals(input.FieldId))
                ) && 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.FieldOrderInImportFile == input.FieldOrderInImportFile ||
                    (this.FieldOrderInImportFile != null &&
                    this.FieldOrderInImportFile.Equals(input.FieldOrderInImportFile))
                ) && 
                (
                    this.FieldReferenceInImportFile == input.FieldReferenceInImportFile ||
                    (this.FieldReferenceInImportFile != null &&
                    this.FieldReferenceInImportFile.Equals(input.FieldReferenceInImportFile))
                ) && 
                (
                    this.TemplateField == input.TemplateField ||
                    (this.TemplateField != null &&
                    this.TemplateField.Equals(input.TemplateField))
                ) && 
                (
                    this.TemplateAutoField == input.TemplateAutoField ||
                    (this.TemplateAutoField != null &&
                    this.TemplateAutoField.Equals(input.TemplateAutoField))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldId != null)
                    hashCode = hashCode * 59 + this.FieldId.GetHashCode();
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this.FieldOrderInImportFile != null)
                    hashCode = hashCode * 59 + this.FieldOrderInImportFile.GetHashCode();
                if (this.FieldReferenceInImportFile != null)
                    hashCode = hashCode * 59 + this.FieldReferenceInImportFile.GetHashCode();
                if (this.TemplateField != null)
                    hashCode = hashCode * 59 + this.TemplateField.GetHashCode();
                if (this.TemplateAutoField != null)
                    hashCode = hashCode * 59 + this.TemplateAutoField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
