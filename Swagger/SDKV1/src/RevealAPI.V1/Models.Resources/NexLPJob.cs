/* 
 * Reveal API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = RevealAPI.V1.Client.SwaggerDateConverter;

namespace RevealAPI.V1.Models.Resources
{
    /// <summary>
    /// NexLPJob
    /// </summary>
    [DataContract]
    public partial class NexLPJob :  IEquatable<NexLPJob>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NexLPJob" /> class.
        /// </summary>
        /// <param name="jobId">jobId.</param>
        /// <param name="jobName">jobName.</param>
        /// <param name="jobStatus">jobStatus.</param>
        /// <param name="jobStatusName">jobStatusName.</param>
        /// <param name="totalNumberOfDocuments">totalNumberOfDocuments.</param>
        /// <param name="numberOfDocumentsAdded">numberOfDocumentsAdded.</param>
        /// <param name="numberOfDocumentsUpdated">numberOfDocumentsUpdated.</param>
        /// <param name="numberOfDocumentsDeleted">numberOfDocumentsDeleted.</param>
        /// <param name="numberOfProcessingErrors">numberOfProcessingErrors.</param>
        /// <param name="createdDateTime">createdDateTime.</param>
        /// <param name="createdByUser">createdByUser.</param>
        /// <param name="startDateTime">startDateTime.</param>
        /// <param name="endDateTime">endDateTime.</param>
        /// <param name="jobInfoMessage">jobInfoMessage.</param>
        /// <param name="niaJobId">niaJobId.</param>
        public NexLPJob(int? jobId = default(int?), string jobName = default(string), int? jobStatus = default(int?), string jobStatusName = default(string), int? totalNumberOfDocuments = default(int?), int? numberOfDocumentsAdded = default(int?), int? numberOfDocumentsUpdated = default(int?), int? numberOfDocumentsDeleted = default(int?), int? numberOfProcessingErrors = default(int?), DateTime? createdDateTime = default(DateTime?), long? createdByUser = default(long?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), string jobInfoMessage = default(string), string niaJobId = default(string))
        {
            this.JobId = jobId;
            this.JobName = jobName;
            this.JobStatus = jobStatus;
            this.JobStatusName = jobStatusName;
            this.TotalNumberOfDocuments = totalNumberOfDocuments;
            this.NumberOfDocumentsAdded = numberOfDocumentsAdded;
            this.NumberOfDocumentsUpdated = numberOfDocumentsUpdated;
            this.NumberOfDocumentsDeleted = numberOfDocumentsDeleted;
            this.NumberOfProcessingErrors = numberOfProcessingErrors;
            this.CreatedDateTime = createdDateTime;
            this.CreatedByUser = createdByUser;
            this.StartDateTime = startDateTime;
            this.EndDateTime = endDateTime;
            this.JobInfoMessage = jobInfoMessage;
            this.NiaJobId = niaJobId;
        }
        
        /// <summary>
        /// Gets or Sets JobId
        /// </summary>
        [DataMember(Name="jobId", EmitDefaultValue=false)]
        public int? JobId { get; set; }

        /// <summary>
        /// Gets or Sets JobName
        /// </summary>
        [DataMember(Name="jobName", EmitDefaultValue=false)]
        public string JobName { get; set; }

        /// <summary>
        /// Gets or Sets JobStatus
        /// </summary>
        [DataMember(Name="jobStatus", EmitDefaultValue=false)]
        public int? JobStatus { get; set; }

        /// <summary>
        /// Gets or Sets JobStatusName
        /// </summary>
        [DataMember(Name="jobStatusName", EmitDefaultValue=false)]
        public string JobStatusName { get; set; }

        /// <summary>
        /// Gets or Sets TotalNumberOfDocuments
        /// </summary>
        [DataMember(Name="totalNumberOfDocuments", EmitDefaultValue=false)]
        public int? TotalNumberOfDocuments { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfDocumentsAdded
        /// </summary>
        [DataMember(Name="numberOfDocumentsAdded", EmitDefaultValue=false)]
        public int? NumberOfDocumentsAdded { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfDocumentsUpdated
        /// </summary>
        [DataMember(Name="numberOfDocumentsUpdated", EmitDefaultValue=false)]
        public int? NumberOfDocumentsUpdated { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfDocumentsDeleted
        /// </summary>
        [DataMember(Name="numberOfDocumentsDeleted", EmitDefaultValue=false)]
        public int? NumberOfDocumentsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfProcessingErrors
        /// </summary>
        [DataMember(Name="numberOfProcessingErrors", EmitDefaultValue=false)]
        public int? NumberOfProcessingErrors { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="createdDateTime", EmitDefaultValue=false)]
        public DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUser
        /// </summary>
        [DataMember(Name="createdByUser", EmitDefaultValue=false)]
        public long? CreatedByUser { get; set; }

        /// <summary>
        /// Gets or Sets StartDateTime
        /// </summary>
        [DataMember(Name="startDateTime", EmitDefaultValue=false)]
        public DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Gets or Sets EndDateTime
        /// </summary>
        [DataMember(Name="endDateTime", EmitDefaultValue=false)]
        public DateTime? EndDateTime { get; set; }

        /// <summary>
        /// Gets or Sets JobInfoMessage
        /// </summary>
        [DataMember(Name="jobInfoMessage", EmitDefaultValue=false)]
        public string JobInfoMessage { get; set; }

        /// <summary>
        /// Gets or Sets NiaJobId
        /// </summary>
        [DataMember(Name="niaJobId", EmitDefaultValue=false)]
        public string NiaJobId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NexLPJob {\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  JobName: ").Append(JobName).Append("\n");
            sb.Append("  JobStatus: ").Append(JobStatus).Append("\n");
            sb.Append("  JobStatusName: ").Append(JobStatusName).Append("\n");
            sb.Append("  TotalNumberOfDocuments: ").Append(TotalNumberOfDocuments).Append("\n");
            sb.Append("  NumberOfDocumentsAdded: ").Append(NumberOfDocumentsAdded).Append("\n");
            sb.Append("  NumberOfDocumentsUpdated: ").Append(NumberOfDocumentsUpdated).Append("\n");
            sb.Append("  NumberOfDocumentsDeleted: ").Append(NumberOfDocumentsDeleted).Append("\n");
            sb.Append("  NumberOfProcessingErrors: ").Append(NumberOfProcessingErrors).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  CreatedByUser: ").Append(CreatedByUser).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  JobInfoMessage: ").Append(JobInfoMessage).Append("\n");
            sb.Append("  NiaJobId: ").Append(NiaJobId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NexLPJob);
        }

        /// <summary>
        /// Returns true if NexLPJob instances are equal
        /// </summary>
        /// <param name="input">Instance of NexLPJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NexLPJob input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JobId == input.JobId ||
                    (this.JobId != null &&
                    this.JobId.Equals(input.JobId))
                ) && 
                (
                    this.JobName == input.JobName ||
                    (this.JobName != null &&
                    this.JobName.Equals(input.JobName))
                ) && 
                (
                    this.JobStatus == input.JobStatus ||
                    (this.JobStatus != null &&
                    this.JobStatus.Equals(input.JobStatus))
                ) && 
                (
                    this.JobStatusName == input.JobStatusName ||
                    (this.JobStatusName != null &&
                    this.JobStatusName.Equals(input.JobStatusName))
                ) && 
                (
                    this.TotalNumberOfDocuments == input.TotalNumberOfDocuments ||
                    (this.TotalNumberOfDocuments != null &&
                    this.TotalNumberOfDocuments.Equals(input.TotalNumberOfDocuments))
                ) && 
                (
                    this.NumberOfDocumentsAdded == input.NumberOfDocumentsAdded ||
                    (this.NumberOfDocumentsAdded != null &&
                    this.NumberOfDocumentsAdded.Equals(input.NumberOfDocumentsAdded))
                ) && 
                (
                    this.NumberOfDocumentsUpdated == input.NumberOfDocumentsUpdated ||
                    (this.NumberOfDocumentsUpdated != null &&
                    this.NumberOfDocumentsUpdated.Equals(input.NumberOfDocumentsUpdated))
                ) && 
                (
                    this.NumberOfDocumentsDeleted == input.NumberOfDocumentsDeleted ||
                    (this.NumberOfDocumentsDeleted != null &&
                    this.NumberOfDocumentsDeleted.Equals(input.NumberOfDocumentsDeleted))
                ) && 
                (
                    this.NumberOfProcessingErrors == input.NumberOfProcessingErrors ||
                    (this.NumberOfProcessingErrors != null &&
                    this.NumberOfProcessingErrors.Equals(input.NumberOfProcessingErrors))
                ) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && 
                (
                    this.CreatedByUser == input.CreatedByUser ||
                    (this.CreatedByUser != null &&
                    this.CreatedByUser.Equals(input.CreatedByUser))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.JobInfoMessage == input.JobInfoMessage ||
                    (this.JobInfoMessage != null &&
                    this.JobInfoMessage.Equals(input.JobInfoMessage))
                ) && 
                (
                    this.NiaJobId == input.NiaJobId ||
                    (this.NiaJobId != null &&
                    this.NiaJobId.Equals(input.NiaJobId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobId != null)
                    hashCode = hashCode * 59 + this.JobId.GetHashCode();
                if (this.JobName != null)
                    hashCode = hashCode * 59 + this.JobName.GetHashCode();
                if (this.JobStatus != null)
                    hashCode = hashCode * 59 + this.JobStatus.GetHashCode();
                if (this.JobStatusName != null)
                    hashCode = hashCode * 59 + this.JobStatusName.GetHashCode();
                if (this.TotalNumberOfDocuments != null)
                    hashCode = hashCode * 59 + this.TotalNumberOfDocuments.GetHashCode();
                if (this.NumberOfDocumentsAdded != null)
                    hashCode = hashCode * 59 + this.NumberOfDocumentsAdded.GetHashCode();
                if (this.NumberOfDocumentsUpdated != null)
                    hashCode = hashCode * 59 + this.NumberOfDocumentsUpdated.GetHashCode();
                if (this.NumberOfDocumentsDeleted != null)
                    hashCode = hashCode * 59 + this.NumberOfDocumentsDeleted.GetHashCode();
                if (this.NumberOfProcessingErrors != null)
                    hashCode = hashCode * 59 + this.NumberOfProcessingErrors.GetHashCode();
                if (this.CreatedDateTime != null)
                    hashCode = hashCode * 59 + this.CreatedDateTime.GetHashCode();
                if (this.CreatedByUser != null)
                    hashCode = hashCode * 59 + this.CreatedByUser.GetHashCode();
                if (this.StartDateTime != null)
                    hashCode = hashCode * 59 + this.StartDateTime.GetHashCode();
                if (this.EndDateTime != null)
                    hashCode = hashCode * 59 + this.EndDateTime.GetHashCode();
                if (this.JobInfoMessage != null)
                    hashCode = hashCode * 59 + this.JobInfoMessage.GetHashCode();
                if (this.NiaJobId != null)
                    hashCode = hashCode * 59 + this.NiaJobId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
